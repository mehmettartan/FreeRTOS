
23_FreeRtos_Den.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08003758  08003758  00013758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003824  08003824  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08003824  08003824  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003824  08003824  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003824  08003824  00013824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003828  08003828  00013828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  0800382c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
 10 .bss          000049b4  20000008  20000008  00020008  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200049bc  200049bc  00020008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011588  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000258f  00000000  00000000  000315c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f80  00000000  00000000  00033b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e68  00000000  00000000  00034ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021408  00000000  00000000  00035938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010c24  00000000  00000000  00056d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2964  00000000  00000000  00067964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013a2c8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000040b0  00000000  00000000  0013a318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000008 	.word	0x20000008
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003740 	.word	0x08003740

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	08003740 	.word	0x08003740

080001d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	4603      	mov	r3, r0
 80001d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	db0b      	blt.n	80001fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	f003 021f 	and.w	r2, r3, #31
 80001e8:	4907      	ldr	r1, [pc, #28]	; (8000208 <__NVIC_EnableIRQ+0x38>)
 80001ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ee:	095b      	lsrs	r3, r3, #5
 80001f0:	2001      	movs	r0, #1
 80001f2:	fa00 f202 	lsl.w	r2, r0, r2
 80001f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fa:	bf00      	nop
 80001fc:	370c      	adds	r7, #12
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	e000e100 	.word	0xe000e100

0800020c <pa0_exti_init>:

#define GPIOAEN     (1U<<0)
#define SYSCFGEN     (1U<<14)

void pa0_exti_init(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000210:	b672      	cpsid	i
}
 8000212:	bf00      	nop
	/*Disable global interrupt */
	__disable_irq();

	/*Enable clock access for GPIOC */
	RCC->AHB1ENR |= GPIOAEN;
 8000214:	4b15      	ldr	r3, [pc, #84]	; (800026c <pa0_exti_init+0x60>)
 8000216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000218:	4a14      	ldr	r2, [pc, #80]	; (800026c <pa0_exti_init+0x60>)
 800021a:	f043 0301 	orr.w	r3, r3, #1
 800021e:	6313      	str	r3, [r2, #48]	; 0x30

	/*Enable clock access SysCnfg */
	RCC->APB2ENR |= SYSCFGEN;
 8000220:	4b12      	ldr	r3, [pc, #72]	; (800026c <pa0_exti_init+0x60>)
 8000222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000224:	4a11      	ldr	r2, [pc, #68]	; (800026c <pa0_exti_init+0x60>)
 8000226:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800022a:	6453      	str	r3, [r2, #68]	; 0x44

	/*Set PA0 as Input	 */
	GPIOA->MODER &=~(1U<<0);
 800022c:	4b10      	ldr	r3, [pc, #64]	; (8000270 <pa0_exti_init+0x64>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a0f      	ldr	r2, [pc, #60]	; (8000270 <pa0_exti_init+0x64>)
 8000232:	f023 0301 	bic.w	r3, r3, #1
 8000236:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<1);
 8000238:	4b0d      	ldr	r3, [pc, #52]	; (8000270 <pa0_exti_init+0x64>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a0c      	ldr	r2, [pc, #48]	; (8000270 <pa0_exti_init+0x64>)
 800023e:	f023 0302 	bic.w	r3, r3, #2
 8000242:	6013      	str	r3, [r2, #0]

	/*Select PORTA for EXTI0 */
	//SYSCFG->EXTICR[3] |= (1U<<5);

	/*UNMASK EXTI13 */
	EXTI->IMR |= (1U<<0);
 8000244:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <pa0_exti_init+0x68>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a0a      	ldr	r2, [pc, #40]	; (8000274 <pa0_exti_init+0x68>)
 800024a:	f043 0301 	orr.w	r3, r3, #1
 800024e:	6013      	str	r3, [r2, #0]

	/*Select falling edge trigger */
	EXTI->FTSR |= (1U<<0);
 8000250:	4b08      	ldr	r3, [pc, #32]	; (8000274 <pa0_exti_init+0x68>)
 8000252:	68db      	ldr	r3, [r3, #12]
 8000254:	4a07      	ldr	r2, [pc, #28]	; (8000274 <pa0_exti_init+0x68>)
 8000256:	f043 0301 	orr.w	r3, r3, #1
 800025a:	60d3      	str	r3, [r2, #12]

	/*Enable EXTI3 line in NVIC */
	NVIC_EnableIRQ(EXTI0_IRQn);
 800025c:	2006      	movs	r0, #6
 800025e:	f7ff ffb7 	bl	80001d0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000262:	b662      	cpsie	i
}
 8000264:	bf00      	nop

	/*Enable global interrupt */
	__enable_irq();
}
 8000266:	bf00      	nop
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	40023800 	.word	0x40023800
 8000270:	40020000 	.word	0x40020000
 8000274:	40013c00 	.word	0x40013c00

08000278 <led_init>:
#include "stm32f4xx.h"
#include "led.h"

void led_init()
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIODEN;
 800027c:	4b11      	ldr	r3, [pc, #68]	; (80002c4 <led_init+0x4c>)
 800027e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000280:	4a10      	ldr	r2, [pc, #64]	; (80002c4 <led_init+0x4c>)
 8000282:	f043 0308 	orr.w	r3, r3, #8
 8000286:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOD->MODER |= (1U<<24);
 8000288:	4b0f      	ldr	r3, [pc, #60]	; (80002c8 <led_init+0x50>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a0e      	ldr	r2, [pc, #56]	; (80002c8 <led_init+0x50>)
 800028e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000292:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1U<<25);
 8000294:	4b0c      	ldr	r3, [pc, #48]	; (80002c8 <led_init+0x50>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a0b      	ldr	r2, [pc, #44]	; (80002c8 <led_init+0x50>)
 800029a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800029e:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1U<<26);
 80002a0:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <led_init+0x50>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a08      	ldr	r2, [pc, #32]	; (80002c8 <led_init+0x50>)
 80002a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80002aa:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1U<<27);
 80002ac:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <led_init+0x50>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a05      	ldr	r2, [pc, #20]	; (80002c8 <led_init+0x50>)
 80002b2:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80002b6:	6013      	str	r3, [r2, #0]
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	40023800 	.word	0x40023800
 80002c8:	40020c00 	.word	0x40020c00

080002cc <led_toggle>:
	GPIOD->BSRR = (1U<<28);
	GPIOD->BSRR = (1U<<29);
}

void led_toggle()
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOD, LED_PIN);
 80002d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002d4:	4804      	ldr	r0, [pc, #16]	; (80002e8 <led_toggle+0x1c>)
 80002d6:	f000 f97c 	bl	80005d2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOD, LED_PIN1);
 80002da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002de:	4802      	ldr	r0, [pc, #8]	; (80002e8 <led_toggle+0x1c>)
 80002e0:	f000 f977 	bl	80005d2 <HAL_GPIO_TogglePin>
}
 80002e4:	bf00      	nop
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	40020c00 	.word	0x40020c00

080002ec <Task1Sem>:
	uart2_write_string(string);

}

void Task1Sem()
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	for(;;)
	{
		uart2_write_string("Task1 is running");
 80002f0:	4804      	ldr	r0, [pc, #16]	; (8000304 <Task1Sem+0x18>)
 80002f2:	f000 f90b 	bl	800050c <uart2_write_string>
		vTaskDelay(1000);
 80002f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002fa:	f001 fc09 	bl	8001b10 <vTaskDelay>

		led_toggle();
 80002fe:	f7ff ffe5 	bl	80002cc <led_toggle>
		uart2_write_string("Task1 is running");
 8000302:	e7f5      	b.n	80002f0 <Task1Sem+0x4>
 8000304:	080037b4 	.word	0x080037b4

08000308 <Task2Sem>:
	}
}

void Task2Sem()
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	for(;;)
	{
		xSemaphoreTake(BinarySem,portMAX_DELAY);
 800030c:	4b07      	ldr	r3, [pc, #28]	; (800032c <Task2Sem+0x24>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f04f 31ff 	mov.w	r1, #4294967295
 8000314:	4618      	mov	r0, r3
 8000316:	f000 ffc7 	bl	80012a8 <xQueueSemaphoreTake>
		uart2_write_string("Handler Task is running");
 800031a:	4805      	ldr	r0, [pc, #20]	; (8000330 <Task2Sem+0x28>)
 800031c:	f000 f8f6 	bl	800050c <uart2_write_string>
		vTaskDelay(1000);
 8000320:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000324:	f001 fbf4 	bl	8001b10 <vTaskDelay>
		xSemaphoreTake(BinarySem,portMAX_DELAY);
 8000328:	e7f0      	b.n	800030c <Task2Sem+0x4>
 800032a:	bf00      	nop
 800032c:	20000024 	.word	0x20000024
 8000330:	080037c8 	.word	0x080037c8

08000334 <main>:
}



int main(int argc, char **argv)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af02      	add	r7, sp, #8
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	6039      	str	r1, [r7, #0]
	uart2_tx_init();
 800033e:	f000 f881 	bl	8000444 <uart2_tx_init>
	led_init();
 8000342:	f7ff ff99 	bl	8000278 <led_init>
	pa0_exti_init();
 8000346:	f7ff ff61 	bl	800020c <pa0_exti_init>
	xTimerStart(Auto_Reload_Timer, 0);

	vTaskStartScheduler();
*/

	xTaskCreate(Task1Sem,"Task 1 Sem",configMINIMAL_STACK_SIZE,NULL,0,NULL);
 800034a:	2300      	movs	r3, #0
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2300      	movs	r3, #0
 8000350:	9300      	str	r3, [sp, #0]
 8000352:	2300      	movs	r3, #0
 8000354:	2280      	movs	r2, #128	; 0x80
 8000356:	4908      	ldr	r1, [pc, #32]	; (8000378 <main+0x44>)
 8000358:	4808      	ldr	r0, [pc, #32]	; (800037c <main+0x48>)
 800035a:	f001 fa94 	bl	8001886 <xTaskCreate>

	xTaskCreate(Task2Sem,"Task 2 Sem",configMINIMAL_STACK_SIZE,NULL,1,NULL);
 800035e:	2300      	movs	r3, #0
 8000360:	9301      	str	r3, [sp, #4]
 8000362:	2301      	movs	r3, #1
 8000364:	9300      	str	r3, [sp, #0]
 8000366:	2300      	movs	r3, #0
 8000368:	2280      	movs	r2, #128	; 0x80
 800036a:	4905      	ldr	r1, [pc, #20]	; (8000380 <main+0x4c>)
 800036c:	4805      	ldr	r0, [pc, #20]	; (8000384 <main+0x50>)
 800036e:	f001 fa8a 	bl	8001886 <xTaskCreate>

	vTaskStartScheduler();
 8000372:	f001 fc01 	bl	8001b78 <vTaskStartScheduler>

	while(1)
 8000376:	e7fe      	b.n	8000376 <main+0x42>
 8000378:	080037e0 	.word	0x080037e0
 800037c:	080002ed 	.word	0x080002ed
 8000380:	080037ec 	.word	0x080037ec
 8000384:	08000309 	.word	0x08000309

08000388 <EXTI0_IRQHandler>:

	}
}

void EXTI0_IRQHandler(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800038e:	2300      	movs	r3, #0
 8000390:	607b      	str	r3, [r7, #4]
	uart2_write_string("ISR is Running..!\r\n");
 8000392:	480f      	ldr	r0, [pc, #60]	; (80003d0 <EXTI0_IRQHandler+0x48>)
 8000394:	f000 f8ba 	bl	800050c <uart2_write_string>
	xSemaphoreGiveFromISR(BinarySem,&xHigherPriorityTaskWoken);
 8000398:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <EXTI0_IRQHandler+0x4c>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	1d3a      	adds	r2, r7, #4
 800039e:	4611      	mov	r1, r2
 80003a0:	4618      	mov	r0, r3
 80003a2:	f000 fe14 	bl	8000fce <xQueueGiveFromISR>
	EXTI->PR |= LINE0;
 80003a6:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <EXTI0_IRQHandler+0x50>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	4a0b      	ldr	r2, [pc, #44]	; (80003d8 <EXTI0_IRQHandler+0x50>)
 80003ac:	f043 0301 	orr.w	r3, r3, #1
 80003b0:	6153      	str	r3, [r2, #20]
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d007      	beq.n	80003c8 <EXTI0_IRQHandler+0x40>
 80003b8:	4b08      	ldr	r3, [pc, #32]	; (80003dc <EXTI0_IRQHandler+0x54>)
 80003ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	f3bf 8f4f 	dsb	sy
 80003c4:	f3bf 8f6f 	isb	sy
}
 80003c8:	bf00      	nop
 80003ca:	3708      	adds	r7, #8
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	080037f8 	.word	0x080037f8
 80003d4:	20000024 	.word	0x20000024
 80003d8:	40013c00 	.word	0x40013c00
 80003dc:	e000ed04 	.word	0xe000ed04

080003e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003e4:	e7fe      	b.n	80003e4 <NMI_Handler+0x4>

080003e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003e6:	b480      	push	{r7}
 80003e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003ea:	e7fe      	b.n	80003ea <HardFault_Handler+0x4>

080003ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003f0:	e7fe      	b.n	80003f0 <MemManage_Handler+0x4>

080003f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003f2:	b480      	push	{r7}
 80003f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003f6:	e7fe      	b.n	80003f6 <BusFault_Handler+0x4>

080003f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003fc:	e7fe      	b.n	80003fc <UsageFault_Handler+0x4>

080003fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003fe:	b480      	push	{r7}
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000402:	bf00      	nop
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr

0800040c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000410:	4802      	ldr	r0, [pc, #8]	; (800041c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000412:	f000 f8f8 	bl	8000606 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	20000028 	.word	0x20000028

08000420 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000424:	4b06      	ldr	r3, [pc, #24]	; (8000440 <SystemInit+0x20>)
 8000426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800042a:	4a05      	ldr	r2, [pc, #20]	; (8000440 <SystemInit+0x20>)
 800042c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000430:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	e000ed00 	.word	0xe000ed00

08000444 <uart2_tx_init>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t Baudrate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t Baudrate);


void uart2_tx_init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOAEN;
 8000448:	4b20      	ldr	r3, [pc, #128]	; (80004cc <uart2_tx_init+0x88>)
 800044a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044c:	4a1f      	ldr	r2, [pc, #124]	; (80004cc <uart2_tx_init+0x88>)
 800044e:	f043 0301 	orr.w	r3, r3, #1
 8000452:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER &=~(1U<<4);
 8000454:	4b1e      	ldr	r3, [pc, #120]	; (80004d0 <uart2_tx_init+0x8c>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a1d      	ldr	r2, [pc, #116]	; (80004d0 <uart2_tx_init+0x8c>)
 800045a:	f023 0310 	bic.w	r3, r3, #16
 800045e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000460:	4b1b      	ldr	r3, [pc, #108]	; (80004d0 <uart2_tx_init+0x8c>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a1a      	ldr	r2, [pc, #104]	; (80004d0 <uart2_tx_init+0x8c>)
 8000466:	f043 0320 	orr.w	r3, r3, #32
 800046a:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] |= (1U<<8);
 800046c:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <uart2_tx_init+0x8c>)
 800046e:	6a1b      	ldr	r3, [r3, #32]
 8000470:	4a17      	ldr	r2, [pc, #92]	; (80004d0 <uart2_tx_init+0x8c>)
 8000472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000476:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000478:	4b15      	ldr	r3, [pc, #84]	; (80004d0 <uart2_tx_init+0x8c>)
 800047a:	6a1b      	ldr	r3, [r3, #32]
 800047c:	4a14      	ldr	r2, [pc, #80]	; (80004d0 <uart2_tx_init+0x8c>)
 800047e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000482:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000484:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <uart2_tx_init+0x8c>)
 8000486:	6a1b      	ldr	r3, [r3, #32]
 8000488:	4a11      	ldr	r2, [pc, #68]	; (80004d0 <uart2_tx_init+0x8c>)
 800048a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800048e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8000490:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <uart2_tx_init+0x8c>)
 8000492:	6a1b      	ldr	r3, [r3, #32]
 8000494:	4a0e      	ldr	r2, [pc, #56]	; (80004d0 <uart2_tx_init+0x8c>)
 8000496:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800049a:	6213      	str	r3, [r2, #32]

	RCC->APB1ENR |= UART2EN;
 800049c:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <uart2_tx_init+0x88>)
 800049e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004a0:	4a0a      	ldr	r2, [pc, #40]	; (80004cc <uart2_tx_init+0x88>)
 80004a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004a6:	6413      	str	r3, [r2, #64]	; 0x40

	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80004a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004ac:	4909      	ldr	r1, [pc, #36]	; (80004d4 <uart2_tx_init+0x90>)
 80004ae:	480a      	ldr	r0, [pc, #40]	; (80004d8 <uart2_tx_init+0x94>)
 80004b0:	f000 f841 	bl	8000536 <uart_set_baudrate>

	USART2->CR1 = CR1_TE;
 80004b4:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <uart2_tx_init+0x94>)
 80004b6:	2208      	movs	r2, #8
 80004b8:	60da      	str	r2, [r3, #12]

	USART2->CR1 |= CR1_UE;
 80004ba:	4b07      	ldr	r3, [pc, #28]	; (80004d8 <uart2_tx_init+0x94>)
 80004bc:	68db      	ldr	r3, [r3, #12]
 80004be:	4a06      	ldr	r2, [pc, #24]	; (80004d8 <uart2_tx_init+0x94>)
 80004c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004c4:	60d3      	str	r3, [r2, #12]
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40023800 	.word	0x40023800
 80004d0:	40020000 	.word	0x40020000
 80004d4:	00f42400 	.word	0x00f42400
 80004d8:	40004400 	.word	0x40004400

080004dc <uart2_write_char>:

void uart2_write_char(char ch)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
	while(! (USART2->SR & SR_TXE)) { }
 80004e6:	bf00      	nop
 80004e8:	4b07      	ldr	r3, [pc, #28]	; (8000508 <uart2_write_char+0x2c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d0f9      	beq.n	80004e8 <uart2_write_char+0xc>

	USART2->DR = (ch & 0xFF);
 80004f4:	4a04      	ldr	r2, [pc, #16]	; (8000508 <uart2_write_char+0x2c>)
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	6053      	str	r3, [r2, #4]
}
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	40004400 	.word	0x40004400

0800050c <uart2_write_string>:

void uart2_write_string(const char* str) {
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000514:	e006      	b.n	8000524 <uart2_write_string+0x18>
    	uart2_write_char(*str++);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	1c5a      	adds	r2, r3, #1
 800051a:	607a      	str	r2, [r7, #4]
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	4618      	mov	r0, r3
 8000520:	f7ff ffdc 	bl	80004dc <uart2_write_char>
    while (*str) {
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d1f4      	bne.n	8000516 <uart2_write_string+0xa>
    }
}
 800052c:	bf00      	nop
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}

08000536 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t Baudrate)
{
 8000536:	b580      	push	{r7, lr}
 8000538:	b084      	sub	sp, #16
 800053a:	af00      	add	r7, sp, #0
 800053c:	60f8      	str	r0, [r7, #12]
 800053e:	60b9      	str	r1, [r7, #8]
 8000540:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, Baudrate);
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	68b8      	ldr	r0, [r7, #8]
 8000546:	f000 f808 	bl	800055a <compute_uart_bd>
 800054a:	4603      	mov	r3, r0
 800054c:	461a      	mov	r2, r3
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	609a      	str	r2, [r3, #8]
}
 8000552:	bf00      	nop
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t Baudrate)
{
 800055a:	b480      	push	{r7}
 800055c:	b083      	sub	sp, #12
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (Baudrate/2U))/Baudrate);
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	085a      	lsrs	r2, r3, #1
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	441a      	add	r2, r3
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000572:	b29b      	uxth	r3, r3

}
 8000574:	4618      	mov	r0, r3
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr

08000580 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000580:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000584:	480d      	ldr	r0, [pc, #52]	; (80005bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000586:	490e      	ldr	r1, [pc, #56]	; (80005c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000588:	4a0e      	ldr	r2, [pc, #56]	; (80005c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800058a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800058c:	e002      	b.n	8000594 <LoopCopyDataInit>

0800058e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800058e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000592:	3304      	adds	r3, #4

08000594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000598:	d3f9      	bcc.n	800058e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800059a:	4a0b      	ldr	r2, [pc, #44]	; (80005c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800059c:	4c0b      	ldr	r4, [pc, #44]	; (80005cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800059e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a0:	e001      	b.n	80005a6 <LoopFillZerobss>

080005a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005a4:	3204      	adds	r2, #4

080005a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a8:	d3fb      	bcc.n	80005a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80005aa:	f7ff ff39 	bl	8000420 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ae:	f003 f88d 	bl	80036cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005b2:	f7ff febf 	bl	8000334 <main>
  bx  lr    
 80005b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80005b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c0:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80005c4:	0800382c 	.word	0x0800382c
  ldr r2, =_sbss
 80005c8:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80005cc:	200049bc 	.word	0x200049bc

080005d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005d0:	e7fe      	b.n	80005d0 <ADC_IRQHandler>

080005d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80005d2:	b480      	push	{r7}
 80005d4:	b085      	sub	sp, #20
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
 80005da:	460b      	mov	r3, r1
 80005dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80005e4:	887a      	ldrh	r2, [r7, #2]
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	4013      	ands	r3, r2
 80005ea:	041a      	lsls	r2, r3, #16
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	43d9      	mvns	r1, r3
 80005f0:	887b      	ldrh	r3, [r7, #2]
 80005f2:	400b      	ands	r3, r1
 80005f4:	431a      	orrs	r2, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	619a      	str	r2, [r3, #24]
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr

08000606 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	691b      	ldr	r3, [r3, #16]
 8000614:	f003 0302 	and.w	r3, r3, #2
 8000618:	2b02      	cmp	r3, #2
 800061a:	d122      	bne.n	8000662 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	68db      	ldr	r3, [r3, #12]
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	2b02      	cmp	r3, #2
 8000628:	d11b      	bne.n	8000662 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f06f 0202 	mvn.w	r2, #2
 8000632:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2201      	movs	r2, #1
 8000638:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f003 0303 	and.w	r3, r3, #3
 8000644:	2b00      	cmp	r3, #0
 8000646:	d003      	beq.n	8000650 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f000 f8f8 	bl	800083e <HAL_TIM_IC_CaptureCallback>
 800064e:	e005      	b.n	800065c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f000 f8ea 	bl	800082a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f000 f8fb 	bl	8000852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2200      	movs	r2, #0
 8000660:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	691b      	ldr	r3, [r3, #16]
 8000668:	f003 0304 	and.w	r3, r3, #4
 800066c:	2b04      	cmp	r3, #4
 800066e:	d122      	bne.n	80006b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	68db      	ldr	r3, [r3, #12]
 8000676:	f003 0304 	and.w	r3, r3, #4
 800067a:	2b04      	cmp	r3, #4
 800067c:	d11b      	bne.n	80006b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f06f 0204 	mvn.w	r2, #4
 8000686:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2202      	movs	r2, #2
 800068c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000698:	2b00      	cmp	r3, #0
 800069a:	d003      	beq.n	80006a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f000 f8ce 	bl	800083e <HAL_TIM_IC_CaptureCallback>
 80006a2:	e005      	b.n	80006b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f000 f8c0 	bl	800082a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f000 f8d1 	bl	8000852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2200      	movs	r2, #0
 80006b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	691b      	ldr	r3, [r3, #16]
 80006bc:	f003 0308 	and.w	r3, r3, #8
 80006c0:	2b08      	cmp	r3, #8
 80006c2:	d122      	bne.n	800070a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	f003 0308 	and.w	r3, r3, #8
 80006ce:	2b08      	cmp	r3, #8
 80006d0:	d11b      	bne.n	800070a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f06f 0208 	mvn.w	r2, #8
 80006da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2204      	movs	r2, #4
 80006e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	69db      	ldr	r3, [r3, #28]
 80006e8:	f003 0303 	and.w	r3, r3, #3
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d003      	beq.n	80006f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f000 f8a4 	bl	800083e <HAL_TIM_IC_CaptureCallback>
 80006f6:	e005      	b.n	8000704 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f000 f896 	bl	800082a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f000 f8a7 	bl	8000852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2200      	movs	r2, #0
 8000708:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	691b      	ldr	r3, [r3, #16]
 8000710:	f003 0310 	and.w	r3, r3, #16
 8000714:	2b10      	cmp	r3, #16
 8000716:	d122      	bne.n	800075e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	68db      	ldr	r3, [r3, #12]
 800071e:	f003 0310 	and.w	r3, r3, #16
 8000722:	2b10      	cmp	r3, #16
 8000724:	d11b      	bne.n	800075e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f06f 0210 	mvn.w	r2, #16
 800072e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2208      	movs	r2, #8
 8000734:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	69db      	ldr	r3, [r3, #28]
 800073c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000740:	2b00      	cmp	r3, #0
 8000742:	d003      	beq.n	800074c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f000 f87a 	bl	800083e <HAL_TIM_IC_CaptureCallback>
 800074a:	e005      	b.n	8000758 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f000 f86c 	bl	800082a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000752:	6878      	ldr	r0, [r7, #4]
 8000754:	f000 f87d 	bl	8000852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2200      	movs	r2, #0
 800075c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	691b      	ldr	r3, [r3, #16]
 8000764:	f003 0301 	and.w	r3, r3, #1
 8000768:	2b01      	cmp	r3, #1
 800076a:	d10e      	bne.n	800078a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	68db      	ldr	r3, [r3, #12]
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	2b01      	cmp	r3, #1
 8000778:	d107      	bne.n	800078a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f06f 0201 	mvn.w	r2, #1
 8000782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f000 f846 	bl	8000816 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	691b      	ldr	r3, [r3, #16]
 8000790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000794:	2b80      	cmp	r3, #128	; 0x80
 8000796:	d10e      	bne.n	80007b6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	68db      	ldr	r3, [r3, #12]
 800079e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a2:	2b80      	cmp	r3, #128	; 0x80
 80007a4:	d107      	bne.n	80007b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80007ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f000 f86c 	bl	800088e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	691b      	ldr	r3, [r3, #16]
 80007bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007c0:	2b40      	cmp	r3, #64	; 0x40
 80007c2:	d10e      	bne.n	80007e2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	68db      	ldr	r3, [r3, #12]
 80007ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ce:	2b40      	cmp	r3, #64	; 0x40
 80007d0:	d107      	bne.n	80007e2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80007da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f000 f842 	bl	8000866 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	691b      	ldr	r3, [r3, #16]
 80007e8:	f003 0320 	and.w	r3, r3, #32
 80007ec:	2b20      	cmp	r3, #32
 80007ee:	d10e      	bne.n	800080e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	68db      	ldr	r3, [r3, #12]
 80007f6:	f003 0320 	and.w	r3, r3, #32
 80007fa:	2b20      	cmp	r3, #32
 80007fc:	d107      	bne.n	800080e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f06f 0220 	mvn.w	r2, #32
 8000806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f000 f836 	bl	800087a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000816:	b480      	push	{r7}
 8000818:	b083      	sub	sp, #12
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800082a:	b480      	push	{r7}
 800082c:	b083      	sub	sp, #12
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800083e:	b480      	push	{r7}
 8000840:	b083      	sub	sp, #12
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000852:	b480      	push	{r7}
 8000854:	b083      	sub	sp, #12
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr

08000866 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8000866:	b480      	push	{r7}
 8000868:	b083      	sub	sp, #12
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr

0800087a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800087a:	b480      	push	{r7}
 800087c:	b083      	sub	sp, #12
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800088e:	b480      	push	{r7}
 8000890:	b083      	sub	sp, #12
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
	...

080008a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <SysTick_Handler+0x1c>)
 80008aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80008ac:	f001 fdac 	bl	8002408 <xTaskGetSchedulerState>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d001      	beq.n	80008ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80008b6:	f002 fc8f 	bl	80031d8 <xPortSysTickHandler>
  }
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	e000e010 	.word	0xe000e010

080008c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	4a07      	ldr	r2, [pc, #28]	; (80008f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80008d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	4a06      	ldr	r2, [pc, #24]	; (80008f4 <vApplicationGetIdleTaskMemory+0x30>)
 80008da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2280      	movs	r2, #128	; 0x80
 80008e0:	601a      	str	r2, [r3, #0]
}
 80008e2:	bf00      	nop
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	20000070 	.word	0x20000070
 80008f4:	200000cc 	.word	0x200000cc

080008f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	4a07      	ldr	r2, [pc, #28]	; (8000924 <vApplicationGetTimerTaskMemory+0x2c>)
 8000908:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	4a06      	ldr	r2, [pc, #24]	; (8000928 <vApplicationGetTimerTaskMemory+0x30>)
 800090e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000916:	601a      	str	r2, [r3, #0]
}
 8000918:	bf00      	nop
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	200002cc 	.word	0x200002cc
 8000928:	20000328 	.word	0x20000328

0800092c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f103 0208 	add.w	r2, r3, #8
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	f04f 32ff 	mov.w	r2, #4294967295
 8000944:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f103 0208 	add.w	r2, r3, #8
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f103 0208 	add.w	r2, r3, #8
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000986:	b480      	push	{r7}
 8000988:	b085      	sub	sp, #20
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
 800098e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	68fa      	ldr	r2, [r7, #12]
 800099a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	689a      	ldr	r2, [r3, #8]
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	689b      	ldr	r3, [r3, #8]
 80009a8:	683a      	ldr	r2, [r7, #0]
 80009aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	683a      	ldr	r2, [r7, #0]
 80009b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	1c5a      	adds	r2, r3, #1
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	601a      	str	r2, [r3, #0]
}
 80009c2:	bf00      	nop
 80009c4:	3714      	adds	r7, #20
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80009ce:	b480      	push	{r7}
 80009d0:	b085      	sub	sp, #20
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
 80009d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009e4:	d103      	bne.n	80009ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	691b      	ldr	r3, [r3, #16]
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	e00c      	b.n	8000a08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	3308      	adds	r3, #8
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	e002      	b.n	80009fc <vListInsert+0x2e>
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d2f6      	bcs.n	80009f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	685a      	ldr	r2, [r3, #4]
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	683a      	ldr	r2, [r7, #0]
 8000a16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	683a      	ldr	r2, [r7, #0]
 8000a22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	1c5a      	adds	r2, r3, #1
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	601a      	str	r2, [r3, #0]
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	691b      	ldr	r3, [r3, #16]
 8000a4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	6892      	ldr	r2, [r2, #8]
 8000a56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	6852      	ldr	r2, [r2, #4]
 8000a60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d103      	bne.n	8000a74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	689a      	ldr	r2, [r3, #8]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	1e5a      	subs	r2, r3, #1
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	681b      	ldr	r3, [r3, #0]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d10a      	bne.n	8000abe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000aac:	f383 8811 	msr	BASEPRI, r3
 8000ab0:	f3bf 8f6f 	isb	sy
 8000ab4:	f3bf 8f4f 	dsb	sy
 8000ab8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000aba:	bf00      	nop
 8000abc:	e7fe      	b.n	8000abc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8000abe:	f002 faf9 	bl	80030b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aca:	68f9      	ldr	r1, [r7, #12]
 8000acc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000ace:	fb01 f303 	mul.w	r3, r1, r3
 8000ad2:	441a      	add	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	2200      	movs	r2, #0
 8000adc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aee:	3b01      	subs	r3, #1
 8000af0:	68f9      	ldr	r1, [r7, #12]
 8000af2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000af4:	fb01 f303 	mul.w	r3, r1, r3
 8000af8:	441a      	add	r2, r3
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	22ff      	movs	r2, #255	; 0xff
 8000b02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	22ff      	movs	r2, #255	; 0xff
 8000b0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d114      	bne.n	8000b3e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	691b      	ldr	r3, [r3, #16]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d01a      	beq.n	8000b52 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	3310      	adds	r3, #16
 8000b20:	4618      	mov	r0, r3
 8000b22:	f001 fab3 	bl	800208c <xTaskRemoveFromEventList>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d012      	beq.n	8000b52 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <xQueueGenericReset+0xcc>)
 8000b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	f3bf 8f4f 	dsb	sy
 8000b38:	f3bf 8f6f 	isb	sy
 8000b3c:	e009      	b.n	8000b52 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	3310      	adds	r3, #16
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fef2 	bl	800092c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	3324      	adds	r3, #36	; 0x24
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff feed 	bl	800092c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000b52:	f002 fadf 	bl	8003114 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000b56:	2301      	movs	r3, #1
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	e000ed04 	.word	0xe000ed04

08000b64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08e      	sub	sp, #56	; 0x38
 8000b68:	af02      	add	r7, sp, #8
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
 8000b70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d10a      	bne.n	8000b8e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8000b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b7c:	f383 8811 	msr	BASEPRI, r3
 8000b80:	f3bf 8f6f 	isb	sy
 8000b84:	f3bf 8f4f 	dsb	sy
 8000b88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000b8a:	bf00      	nop
 8000b8c:	e7fe      	b.n	8000b8c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d10a      	bne.n	8000baa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8000b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b98:	f383 8811 	msr	BASEPRI, r3
 8000b9c:	f3bf 8f6f 	isb	sy
 8000ba0:	f3bf 8f4f 	dsb	sy
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000ba6:	bf00      	nop
 8000ba8:	e7fe      	b.n	8000ba8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d002      	beq.n	8000bb6 <xQueueGenericCreateStatic+0x52>
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <xQueueGenericCreateStatic+0x56>
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e000      	b.n	8000bbc <xQueueGenericCreateStatic+0x58>
 8000bba:	2300      	movs	r3, #0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d10a      	bne.n	8000bd6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8000bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bc4:	f383 8811 	msr	BASEPRI, r3
 8000bc8:	f3bf 8f6f 	isb	sy
 8000bcc:	f3bf 8f4f 	dsb	sy
 8000bd0:	623b      	str	r3, [r7, #32]
}
 8000bd2:	bf00      	nop
 8000bd4:	e7fe      	b.n	8000bd4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d102      	bne.n	8000be2 <xQueueGenericCreateStatic+0x7e>
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d101      	bne.n	8000be6 <xQueueGenericCreateStatic+0x82>
 8000be2:	2301      	movs	r3, #1
 8000be4:	e000      	b.n	8000be8 <xQueueGenericCreateStatic+0x84>
 8000be6:	2300      	movs	r3, #0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d10a      	bne.n	8000c02 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8000bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bf0:	f383 8811 	msr	BASEPRI, r3
 8000bf4:	f3bf 8f6f 	isb	sy
 8000bf8:	f3bf 8f4f 	dsb	sy
 8000bfc:	61fb      	str	r3, [r7, #28]
}
 8000bfe:	bf00      	nop
 8000c00:	e7fe      	b.n	8000c00 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8000c02:	2350      	movs	r3, #80	; 0x50
 8000c04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	2b50      	cmp	r3, #80	; 0x50
 8000c0a:	d00a      	beq.n	8000c22 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8000c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c10:	f383 8811 	msr	BASEPRI, r3
 8000c14:	f3bf 8f6f 	isb	sy
 8000c18:	f3bf 8f4f 	dsb	sy
 8000c1c:	61bb      	str	r3, [r7, #24]
}
 8000c1e:	bf00      	nop
 8000c20:	e7fe      	b.n	8000c20 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8000c22:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8000c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d00d      	beq.n	8000c4a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8000c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c30:	2201      	movs	r2, #1
 8000c32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000c36:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	68b9      	ldr	r1, [r7, #8]
 8000c44:	68f8      	ldr	r0, [r7, #12]
 8000c46:	f000 f805 	bl	8000c54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3730      	adds	r7, #48	; 0x30
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
 8000c60:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d103      	bne.n	8000c70 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	69ba      	ldr	r2, [r7, #24]
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	e002      	b.n	8000c76 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	68fa      	ldr	r2, [r7, #12]
 8000c7a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000c82:	2101      	movs	r1, #1
 8000c84:	69b8      	ldr	r0, [r7, #24]
 8000c86:	f7ff ff05 	bl	8000a94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	78fa      	ldrb	r2, [r7, #3]
 8000c8e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000c92:	bf00      	nop
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08e      	sub	sp, #56	; 0x38
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
 8000ca8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000caa:	2300      	movs	r3, #0
 8000cac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d10a      	bne.n	8000cce <xQueueGenericSend+0x32>
	__asm volatile
 8000cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cbc:	f383 8811 	msr	BASEPRI, r3
 8000cc0:	f3bf 8f6f 	isb	sy
 8000cc4:	f3bf 8f4f 	dsb	sy
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000cca:	bf00      	nop
 8000ccc:	e7fe      	b.n	8000ccc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d103      	bne.n	8000cdc <xQueueGenericSend+0x40>
 8000cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d101      	bne.n	8000ce0 <xQueueGenericSend+0x44>
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e000      	b.n	8000ce2 <xQueueGenericSend+0x46>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d10a      	bne.n	8000cfc <xQueueGenericSend+0x60>
	__asm volatile
 8000ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cea:	f383 8811 	msr	BASEPRI, r3
 8000cee:	f3bf 8f6f 	isb	sy
 8000cf2:	f3bf 8f4f 	dsb	sy
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000cf8:	bf00      	nop
 8000cfa:	e7fe      	b.n	8000cfa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d103      	bne.n	8000d0a <xQueueGenericSend+0x6e>
 8000d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d101      	bne.n	8000d0e <xQueueGenericSend+0x72>
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e000      	b.n	8000d10 <xQueueGenericSend+0x74>
 8000d0e:	2300      	movs	r3, #0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d10a      	bne.n	8000d2a <xQueueGenericSend+0x8e>
	__asm volatile
 8000d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d18:	f383 8811 	msr	BASEPRI, r3
 8000d1c:	f3bf 8f6f 	isb	sy
 8000d20:	f3bf 8f4f 	dsb	sy
 8000d24:	623b      	str	r3, [r7, #32]
}
 8000d26:	bf00      	nop
 8000d28:	e7fe      	b.n	8000d28 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000d2a:	f001 fb6d 	bl	8002408 <xTaskGetSchedulerState>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d102      	bne.n	8000d3a <xQueueGenericSend+0x9e>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d101      	bne.n	8000d3e <xQueueGenericSend+0xa2>
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e000      	b.n	8000d40 <xQueueGenericSend+0xa4>
 8000d3e:	2300      	movs	r3, #0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d10a      	bne.n	8000d5a <xQueueGenericSend+0xbe>
	__asm volatile
 8000d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d48:	f383 8811 	msr	BASEPRI, r3
 8000d4c:	f3bf 8f6f 	isb	sy
 8000d50:	f3bf 8f4f 	dsb	sy
 8000d54:	61fb      	str	r3, [r7, #28]
}
 8000d56:	bf00      	nop
 8000d58:	e7fe      	b.n	8000d58 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000d5a:	f002 f9ab 	bl	80030b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d302      	bcc.n	8000d70 <xQueueGenericSend+0xd4>
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d129      	bne.n	8000dc4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000d70:	683a      	ldr	r2, [r7, #0]
 8000d72:	68b9      	ldr	r1, [r7, #8]
 8000d74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d76:	f000 fbbb 	bl	80014f0 <prvCopyDataToQueue>
 8000d7a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d010      	beq.n	8000da6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d86:	3324      	adds	r3, #36	; 0x24
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f001 f97f 	bl	800208c <xTaskRemoveFromEventList>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d013      	beq.n	8000dbc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000d94:	4b3f      	ldr	r3, [pc, #252]	; (8000e94 <xQueueGenericSend+0x1f8>)
 8000d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	f3bf 8f4f 	dsb	sy
 8000da0:	f3bf 8f6f 	isb	sy
 8000da4:	e00a      	b.n	8000dbc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d007      	beq.n	8000dbc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000dac:	4b39      	ldr	r3, [pc, #228]	; (8000e94 <xQueueGenericSend+0x1f8>)
 8000dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	f3bf 8f4f 	dsb	sy
 8000db8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000dbc:	f002 f9aa 	bl	8003114 <vPortExitCritical>
				return pdPASS;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	e063      	b.n	8000e8c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d103      	bne.n	8000dd2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000dca:	f002 f9a3 	bl	8003114 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e05c      	b.n	8000e8c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d106      	bne.n	8000de6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f001 f9b9 	bl	8002154 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000de2:	2301      	movs	r3, #1
 8000de4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000de6:	f002 f995 	bl	8003114 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000dea:	f000 ff2b 	bl	8001c44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000dee:	f002 f961 	bl	80030b4 <vPortEnterCritical>
 8000df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000df4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000df8:	b25b      	sxtb	r3, r3
 8000dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dfe:	d103      	bne.n	8000e08 <xQueueGenericSend+0x16c>
 8000e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e02:	2200      	movs	r2, #0
 8000e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e0e:	b25b      	sxtb	r3, r3
 8000e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e14:	d103      	bne.n	8000e1e <xQueueGenericSend+0x182>
 8000e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000e1e:	f002 f979 	bl	8003114 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e22:	1d3a      	adds	r2, r7, #4
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4611      	mov	r1, r2
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f001 f9a8 	bl	8002180 <xTaskCheckForTimeOut>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d124      	bne.n	8000e80 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000e36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e38:	f000 fc52 	bl	80016e0 <prvIsQueueFull>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d018      	beq.n	8000e74 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e44:	3310      	adds	r3, #16
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	4611      	mov	r1, r2
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f001 f8ce 	bl	8001fec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000e50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e52:	f000 fbdd 	bl	8001610 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000e56:	f000 ff03 	bl	8001c60 <xTaskResumeAll>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	f47f af7c 	bne.w	8000d5a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <xQueueGenericSend+0x1f8>)
 8000e64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	f3bf 8f4f 	dsb	sy
 8000e6e:	f3bf 8f6f 	isb	sy
 8000e72:	e772      	b.n	8000d5a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000e74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e76:	f000 fbcb 	bl	8001610 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000e7a:	f000 fef1 	bl	8001c60 <xTaskResumeAll>
 8000e7e:	e76c      	b.n	8000d5a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000e80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e82:	f000 fbc5 	bl	8001610 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000e86:	f000 feeb 	bl	8001c60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000e8a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3738      	adds	r7, #56	; 0x38
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	e000ed04 	.word	0xe000ed04

08000e98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b090      	sub	sp, #64	; 0x40
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
 8000ea4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8000eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d10a      	bne.n	8000ec6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8000eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eb4:	f383 8811 	msr	BASEPRI, r3
 8000eb8:	f3bf 8f6f 	isb	sy
 8000ebc:	f3bf 8f4f 	dsb	sy
 8000ec0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000ec2:	bf00      	nop
 8000ec4:	e7fe      	b.n	8000ec4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d103      	bne.n	8000ed4 <xQueueGenericSendFromISR+0x3c>
 8000ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d101      	bne.n	8000ed8 <xQueueGenericSendFromISR+0x40>
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e000      	b.n	8000eda <xQueueGenericSendFromISR+0x42>
 8000ed8:	2300      	movs	r3, #0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d10a      	bne.n	8000ef4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8000ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ee2:	f383 8811 	msr	BASEPRI, r3
 8000ee6:	f3bf 8f6f 	isb	sy
 8000eea:	f3bf 8f4f 	dsb	sy
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000ef0:	bf00      	nop
 8000ef2:	e7fe      	b.n	8000ef2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d103      	bne.n	8000f02 <xQueueGenericSendFromISR+0x6a>
 8000efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d101      	bne.n	8000f06 <xQueueGenericSendFromISR+0x6e>
 8000f02:	2301      	movs	r3, #1
 8000f04:	e000      	b.n	8000f08 <xQueueGenericSendFromISR+0x70>
 8000f06:	2300      	movs	r3, #0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d10a      	bne.n	8000f22 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8000f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f10:	f383 8811 	msr	BASEPRI, r3
 8000f14:	f3bf 8f6f 	isb	sy
 8000f18:	f3bf 8f4f 	dsb	sy
 8000f1c:	623b      	str	r3, [r7, #32]
}
 8000f1e:	bf00      	nop
 8000f20:	e7fe      	b.n	8000f20 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000f22:	f002 f9a9 	bl	8003278 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000f26:	f3ef 8211 	mrs	r2, BASEPRI
 8000f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f2e:	f383 8811 	msr	BASEPRI, r3
 8000f32:	f3bf 8f6f 	isb	sy
 8000f36:	f3bf 8f4f 	dsb	sy
 8000f3a:	61fa      	str	r2, [r7, #28]
 8000f3c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000f3e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000f40:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d302      	bcc.n	8000f54 <xQueueGenericSendFromISR+0xbc>
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d12f      	bne.n	8000fb4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000f64:	683a      	ldr	r2, [r7, #0]
 8000f66:	68b9      	ldr	r1, [r7, #8]
 8000f68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000f6a:	f000 fac1 	bl	80014f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000f6e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f76:	d112      	bne.n	8000f9e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d016      	beq.n	8000fae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f82:	3324      	adds	r3, #36	; 0x24
 8000f84:	4618      	mov	r0, r3
 8000f86:	f001 f881 	bl	800208c <xTaskRemoveFromEventList>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d00e      	beq.n	8000fae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d00b      	beq.n	8000fae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	e007      	b.n	8000fae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000f9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	b25a      	sxtb	r2, r3
 8000fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000faa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8000fb2:	e001      	b.n	8000fb8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8000fc2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3740      	adds	r7, #64	; 0x40
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b08e      	sub	sp, #56	; 0x38
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
 8000fd6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8000fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d10a      	bne.n	8000ff8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8000fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fe6:	f383 8811 	msr	BASEPRI, r3
 8000fea:	f3bf 8f6f 	isb	sy
 8000fee:	f3bf 8f4f 	dsb	sy
 8000ff2:	623b      	str	r3, [r7, #32]
}
 8000ff4:	bf00      	nop
 8000ff6:	e7fe      	b.n	8000ff6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8000ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d00a      	beq.n	8001016 <xQueueGiveFromISR+0x48>
	__asm volatile
 8001000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001004:	f383 8811 	msr	BASEPRI, r3
 8001008:	f3bf 8f6f 	isb	sy
 800100c:	f3bf 8f4f 	dsb	sy
 8001010:	61fb      	str	r3, [r7, #28]
}
 8001012:	bf00      	nop
 8001014:	e7fe      	b.n	8001014 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8001016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d103      	bne.n	8001026 <xQueueGiveFromISR+0x58>
 800101e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <xQueueGiveFromISR+0x5c>
 8001026:	2301      	movs	r3, #1
 8001028:	e000      	b.n	800102c <xQueueGiveFromISR+0x5e>
 800102a:	2300      	movs	r3, #0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d10a      	bne.n	8001046 <xQueueGiveFromISR+0x78>
	__asm volatile
 8001030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001034:	f383 8811 	msr	BASEPRI, r3
 8001038:	f3bf 8f6f 	isb	sy
 800103c:	f3bf 8f4f 	dsb	sy
 8001040:	61bb      	str	r3, [r7, #24]
}
 8001042:	bf00      	nop
 8001044:	e7fe      	b.n	8001044 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001046:	f002 f917 	bl	8003278 <vPortValidateInterruptPriority>
	__asm volatile
 800104a:	f3ef 8211 	mrs	r2, BASEPRI
 800104e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001052:	f383 8811 	msr	BASEPRI, r3
 8001056:	f3bf 8f6f 	isb	sy
 800105a:	f3bf 8f4f 	dsb	sy
 800105e:	617a      	str	r2, [r7, #20]
 8001060:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8001062:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800106c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800106e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001070:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001072:	429a      	cmp	r2, r3
 8001074:	d22b      	bcs.n	80010ce <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001078:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800107c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001082:	1c5a      	adds	r2, r3, #1
 8001084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001086:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001088:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800108c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001090:	d112      	bne.n	80010b8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001096:	2b00      	cmp	r3, #0
 8001098:	d016      	beq.n	80010c8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800109a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800109c:	3324      	adds	r3, #36	; 0x24
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 fff4 	bl	800208c <xTaskRemoveFromEventList>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d00e      	beq.n	80010c8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d00b      	beq.n	80010c8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	2201      	movs	r2, #1
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	e007      	b.n	80010c8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80010b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010bc:	3301      	adds	r3, #1
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	b25a      	sxtb	r2, r3
 80010c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80010c8:	2301      	movs	r3, #1
 80010ca:	637b      	str	r3, [r7, #52]	; 0x34
 80010cc:	e001      	b.n	80010d2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	637b      	str	r3, [r7, #52]	; 0x34
 80010d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f383 8811 	msr	BASEPRI, r3
}
 80010dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80010de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3738      	adds	r7, #56	; 0x38
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08c      	sub	sp, #48	; 0x30
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80010fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d10a      	bne.n	8001118 <xQueueReceive+0x30>
	__asm volatile
 8001102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001106:	f383 8811 	msr	BASEPRI, r3
 800110a:	f3bf 8f6f 	isb	sy
 800110e:	f3bf 8f4f 	dsb	sy
 8001112:	623b      	str	r3, [r7, #32]
}
 8001114:	bf00      	nop
 8001116:	e7fe      	b.n	8001116 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d103      	bne.n	8001126 <xQueueReceive+0x3e>
 800111e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <xQueueReceive+0x42>
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <xQueueReceive+0x44>
 800112a:	2300      	movs	r3, #0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d10a      	bne.n	8001146 <xQueueReceive+0x5e>
	__asm volatile
 8001130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001134:	f383 8811 	msr	BASEPRI, r3
 8001138:	f3bf 8f6f 	isb	sy
 800113c:	f3bf 8f4f 	dsb	sy
 8001140:	61fb      	str	r3, [r7, #28]
}
 8001142:	bf00      	nop
 8001144:	e7fe      	b.n	8001144 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001146:	f001 f95f 	bl	8002408 <xTaskGetSchedulerState>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d102      	bne.n	8001156 <xQueueReceive+0x6e>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <xQueueReceive+0x72>
 8001156:	2301      	movs	r3, #1
 8001158:	e000      	b.n	800115c <xQueueReceive+0x74>
 800115a:	2300      	movs	r3, #0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d10a      	bne.n	8001176 <xQueueReceive+0x8e>
	__asm volatile
 8001160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001164:	f383 8811 	msr	BASEPRI, r3
 8001168:	f3bf 8f6f 	isb	sy
 800116c:	f3bf 8f4f 	dsb	sy
 8001170:	61bb      	str	r3, [r7, #24]
}
 8001172:	bf00      	nop
 8001174:	e7fe      	b.n	8001174 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001176:	f001 ff9d 	bl	80030b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800117a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800117c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800117e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001182:	2b00      	cmp	r3, #0
 8001184:	d01f      	beq.n	80011c6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001186:	68b9      	ldr	r1, [r7, #8]
 8001188:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800118a:	f000 fa1b 	bl	80015c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	1e5a      	subs	r2, r3, #1
 8001192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001194:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00f      	beq.n	80011be <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800119e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a0:	3310      	adds	r3, #16
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 ff72 	bl	800208c <xTaskRemoveFromEventList>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d007      	beq.n	80011be <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80011ae:	4b3d      	ldr	r3, [pc, #244]	; (80012a4 <xQueueReceive+0x1bc>)
 80011b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	f3bf 8f4f 	dsb	sy
 80011ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80011be:	f001 ffa9 	bl	8003114 <vPortExitCritical>
				return pdPASS;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e069      	b.n	800129a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d103      	bne.n	80011d4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80011cc:	f001 ffa2 	bl	8003114 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80011d0:	2300      	movs	r3, #0
 80011d2:	e062      	b.n	800129a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80011d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d106      	bne.n	80011e8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80011da:	f107 0310 	add.w	r3, r7, #16
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 ffb8 	bl	8002154 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80011e4:	2301      	movs	r3, #1
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80011e8:	f001 ff94 	bl	8003114 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80011ec:	f000 fd2a 	bl	8001c44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80011f0:	f001 ff60 	bl	80030b4 <vPortEnterCritical>
 80011f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011fa:	b25b      	sxtb	r3, r3
 80011fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001200:	d103      	bne.n	800120a <xQueueReceive+0x122>
 8001202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800120a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800120c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001210:	b25b      	sxtb	r3, r3
 8001212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001216:	d103      	bne.n	8001220 <xQueueReceive+0x138>
 8001218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001220:	f001 ff78 	bl	8003114 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001224:	1d3a      	adds	r2, r7, #4
 8001226:	f107 0310 	add.w	r3, r7, #16
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f000 ffa7 	bl	8002180 <xTaskCheckForTimeOut>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d123      	bne.n	8001280 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800123a:	f000 fa3b 	bl	80016b4 <prvIsQueueEmpty>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d017      	beq.n	8001274 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001246:	3324      	adds	r3, #36	; 0x24
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	4611      	mov	r1, r2
 800124c:	4618      	mov	r0, r3
 800124e:	f000 fecd 	bl	8001fec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001252:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001254:	f000 f9dc 	bl	8001610 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001258:	f000 fd02 	bl	8001c60 <xTaskResumeAll>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d189      	bne.n	8001176 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <xQueueReceive+0x1bc>)
 8001264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	f3bf 8f4f 	dsb	sy
 800126e:	f3bf 8f6f 	isb	sy
 8001272:	e780      	b.n	8001176 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001276:	f000 f9cb 	bl	8001610 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800127a:	f000 fcf1 	bl	8001c60 <xTaskResumeAll>
 800127e:	e77a      	b.n	8001176 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001280:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001282:	f000 f9c5 	bl	8001610 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001286:	f000 fceb 	bl	8001c60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800128a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800128c:	f000 fa12 	bl	80016b4 <prvIsQueueEmpty>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	f43f af6f 	beq.w	8001176 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001298:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800129a:	4618      	mov	r0, r3
 800129c:	3730      	adds	r7, #48	; 0x30
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	e000ed04 	.word	0xe000ed04

080012a8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08e      	sub	sp, #56	; 0x38
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80012be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d10a      	bne.n	80012da <xQueueSemaphoreTake+0x32>
	__asm volatile
 80012c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012c8:	f383 8811 	msr	BASEPRI, r3
 80012cc:	f3bf 8f6f 	isb	sy
 80012d0:	f3bf 8f4f 	dsb	sy
 80012d4:	623b      	str	r3, [r7, #32]
}
 80012d6:	bf00      	nop
 80012d8:	e7fe      	b.n	80012d8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80012da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00a      	beq.n	80012f8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80012e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012e6:	f383 8811 	msr	BASEPRI, r3
 80012ea:	f3bf 8f6f 	isb	sy
 80012ee:	f3bf 8f4f 	dsb	sy
 80012f2:	61fb      	str	r3, [r7, #28]
}
 80012f4:	bf00      	nop
 80012f6:	e7fe      	b.n	80012f6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80012f8:	f001 f886 	bl	8002408 <xTaskGetSchedulerState>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d102      	bne.n	8001308 <xQueueSemaphoreTake+0x60>
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d101      	bne.n	800130c <xQueueSemaphoreTake+0x64>
 8001308:	2301      	movs	r3, #1
 800130a:	e000      	b.n	800130e <xQueueSemaphoreTake+0x66>
 800130c:	2300      	movs	r3, #0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d10a      	bne.n	8001328 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8001312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001316:	f383 8811 	msr	BASEPRI, r3
 800131a:	f3bf 8f6f 	isb	sy
 800131e:	f3bf 8f4f 	dsb	sy
 8001322:	61bb      	str	r3, [r7, #24]
}
 8001324:	bf00      	nop
 8001326:	e7fe      	b.n	8001326 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001328:	f001 fec4 	bl	80030b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800132c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800132e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001330:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8001332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001334:	2b00      	cmp	r3, #0
 8001336:	d024      	beq.n	8001382 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8001338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800133a:	1e5a      	subs	r2, r3, #1
 800133c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800133e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d104      	bne.n	8001352 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8001348:	f001 f9d4 	bl	80026f4 <pvTaskIncrementMutexHeldCount>
 800134c:	4602      	mov	r2, r0
 800134e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001350:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00f      	beq.n	800137a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800135a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800135c:	3310      	adds	r3, #16
 800135e:	4618      	mov	r0, r3
 8001360:	f000 fe94 	bl	800208c <xTaskRemoveFromEventList>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d007      	beq.n	800137a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800136a:	4b54      	ldr	r3, [pc, #336]	; (80014bc <xQueueSemaphoreTake+0x214>)
 800136c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	f3bf 8f4f 	dsb	sy
 8001376:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800137a:	f001 fecb 	bl	8003114 <vPortExitCritical>
				return pdPASS;
 800137e:	2301      	movs	r3, #1
 8001380:	e097      	b.n	80014b2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d111      	bne.n	80013ac <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8001388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00a      	beq.n	80013a4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800138e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001392:	f383 8811 	msr	BASEPRI, r3
 8001396:	f3bf 8f6f 	isb	sy
 800139a:	f3bf 8f4f 	dsb	sy
 800139e:	617b      	str	r3, [r7, #20]
}
 80013a0:	bf00      	nop
 80013a2:	e7fe      	b.n	80013a2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80013a4:	f001 feb6 	bl	8003114 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80013a8:	2300      	movs	r3, #0
 80013aa:	e082      	b.n	80014b2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80013ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d106      	bne.n	80013c0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80013b2:	f107 030c 	add.w	r3, r7, #12
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 fecc 	bl	8002154 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80013bc:	2301      	movs	r3, #1
 80013be:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80013c0:	f001 fea8 	bl	8003114 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80013c4:	f000 fc3e 	bl	8001c44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80013c8:	f001 fe74 	bl	80030b4 <vPortEnterCritical>
 80013cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013d2:	b25b      	sxtb	r3, r3
 80013d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d8:	d103      	bne.n	80013e2 <xQueueSemaphoreTake+0x13a>
 80013da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80013e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ee:	d103      	bne.n	80013f8 <xQueueSemaphoreTake+0x150>
 80013f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80013f8:	f001 fe8c 	bl	8003114 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80013fc:	463a      	mov	r2, r7
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	4611      	mov	r1, r2
 8001404:	4618      	mov	r0, r3
 8001406:	f000 febb 	bl	8002180 <xTaskCheckForTimeOut>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d132      	bne.n	8001476 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001410:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001412:	f000 f94f 	bl	80016b4 <prvIsQueueEmpty>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d026      	beq.n	800146a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800141c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d109      	bne.n	8001438 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8001424:	f001 fe46 	bl	80030b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	4618      	mov	r0, r3
 800142e:	f001 f809 	bl	8002444 <xTaskPriorityInherit>
 8001432:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8001434:	f001 fe6e 	bl	8003114 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800143a:	3324      	adds	r3, #36	; 0x24
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f000 fdd3 	bl	8001fec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001446:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001448:	f000 f8e2 	bl	8001610 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800144c:	f000 fc08 	bl	8001c60 <xTaskResumeAll>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	f47f af68 	bne.w	8001328 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8001458:	4b18      	ldr	r3, [pc, #96]	; (80014bc <xQueueSemaphoreTake+0x214>)
 800145a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	f3bf 8f4f 	dsb	sy
 8001464:	f3bf 8f6f 	isb	sy
 8001468:	e75e      	b.n	8001328 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800146a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800146c:	f000 f8d0 	bl	8001610 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001470:	f000 fbf6 	bl	8001c60 <xTaskResumeAll>
 8001474:	e758      	b.n	8001328 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8001476:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001478:	f000 f8ca 	bl	8001610 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800147c:	f000 fbf0 	bl	8001c60 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001480:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001482:	f000 f917 	bl	80016b4 <prvIsQueueEmpty>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	f43f af4d 	beq.w	8001328 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800148e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00d      	beq.n	80014b0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8001494:	f001 fe0e 	bl	80030b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8001498:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800149a:	f000 f811 	bl	80014c0 <prvGetDisinheritPriorityAfterTimeout>
 800149e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80014a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014a6:	4618      	mov	r0, r3
 80014a8:	f001 f8a2 	bl	80025f0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80014ac:	f001 fe32 	bl	8003114 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80014b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3738      	adds	r7, #56	; 0x38
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	e000ed04 	.word	0xe000ed04

080014c0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d006      	beq.n	80014de <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	e001      	b.n	80014e2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80014e2:	68fb      	ldr	r3, [r7, #12]
	}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001504:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10d      	bne.n	800152a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d14d      	bne.n	80015b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	4618      	mov	r0, r3
 800151c:	f000 fffa 	bl	8002514 <xTaskPriorityDisinherit>
 8001520:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	e043      	b.n	80015b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d119      	bne.n	8001564 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	6858      	ldr	r0, [r3, #4]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	461a      	mov	r2, r3
 800153a:	68b9      	ldr	r1, [r7, #8]
 800153c:	f002 f8ea 	bl	8003714 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	441a      	add	r2, r3
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	429a      	cmp	r2, r3
 8001558:	d32b      	bcc.n	80015b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	e026      	b.n	80015b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	68d8      	ldr	r0, [r3, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	461a      	mov	r2, r3
 800156e:	68b9      	ldr	r1, [r7, #8]
 8001570:	f002 f8d0 	bl	8003714 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	68da      	ldr	r2, [r3, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	425b      	negs	r3, r3
 800157e:	441a      	add	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	68da      	ldr	r2, [r3, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d207      	bcs.n	80015a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	425b      	negs	r3, r3
 800159a:	441a      	add	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d105      	bne.n	80015b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d002      	beq.n	80015b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1c5a      	adds	r2, r3, #1
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80015ba:	697b      	ldr	r3, [r7, #20]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d018      	beq.n	8001608 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	68da      	ldr	r2, [r3, #12]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	441a      	add	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d303      	bcc.n	80015f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68d9      	ldr	r1, [r3, #12]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	461a      	mov	r2, r3
 8001602:	6838      	ldr	r0, [r7, #0]
 8001604:	f002 f886 	bl	8003714 <memcpy>
	}
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001618:	f001 fd4c 	bl	80030b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001622:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001624:	e011      	b.n	800164a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	2b00      	cmp	r3, #0
 800162c:	d012      	beq.n	8001654 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3324      	adds	r3, #36	; 0x24
 8001632:	4618      	mov	r0, r3
 8001634:	f000 fd2a 	bl	800208c <xTaskRemoveFromEventList>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800163e:	f000 fe01 	bl	8002244 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	3b01      	subs	r3, #1
 8001646:	b2db      	uxtb	r3, r3
 8001648:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800164a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800164e:	2b00      	cmp	r3, #0
 8001650:	dce9      	bgt.n	8001626 <prvUnlockQueue+0x16>
 8001652:	e000      	b.n	8001656 <prvUnlockQueue+0x46>
					break;
 8001654:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	22ff      	movs	r2, #255	; 0xff
 800165a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800165e:	f001 fd59 	bl	8003114 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001662:	f001 fd27 	bl	80030b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800166c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800166e:	e011      	b.n	8001694 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d012      	beq.n	800169e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3310      	adds	r3, #16
 800167c:	4618      	mov	r0, r3
 800167e:	f000 fd05 	bl	800208c <xTaskRemoveFromEventList>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001688:	f000 fddc 	bl	8002244 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800168c:	7bbb      	ldrb	r3, [r7, #14]
 800168e:	3b01      	subs	r3, #1
 8001690:	b2db      	uxtb	r3, r3
 8001692:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001694:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001698:	2b00      	cmp	r3, #0
 800169a:	dce9      	bgt.n	8001670 <prvUnlockQueue+0x60>
 800169c:	e000      	b.n	80016a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800169e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	22ff      	movs	r2, #255	; 0xff
 80016a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80016a8:	f001 fd34 	bl	8003114 <vPortExitCritical>
}
 80016ac:	bf00      	nop
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80016bc:	f001 fcfa 	bl	80030b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d102      	bne.n	80016ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80016c8:	2301      	movs	r3, #1
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	e001      	b.n	80016d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80016d2:	f001 fd1f 	bl	8003114 <vPortExitCritical>

	return xReturn;
 80016d6:	68fb      	ldr	r3, [r7, #12]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80016e8:	f001 fce4 	bl	80030b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d102      	bne.n	80016fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80016f8:	2301      	movs	r3, #1
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	e001      	b.n	8001702 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001702:	f001 fd07 	bl	8003114 <vPortExitCritical>

	return xReturn;
 8001706:	68fb      	ldr	r3, [r7, #12]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	e014      	b.n	800174a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001720:	4a0f      	ldr	r2, [pc, #60]	; (8001760 <vQueueAddToRegistry+0x50>)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d10b      	bne.n	8001744 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800172c:	490c      	ldr	r1, [pc, #48]	; (8001760 <vQueueAddToRegistry+0x50>)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001736:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <vQueueAddToRegistry+0x50>)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	4413      	add	r3, r2
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001742:	e006      	b.n	8001752 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	3301      	adds	r3, #1
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2b07      	cmp	r3, #7
 800174e:	d9e7      	bls.n	8001720 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000728 	.word	0x20000728

08001764 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001774:	f001 fc9e 	bl	80030b4 <vPortEnterCritical>
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800177e:	b25b      	sxtb	r3, r3
 8001780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001784:	d103      	bne.n	800178e <vQueueWaitForMessageRestricted+0x2a>
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001794:	b25b      	sxtb	r3, r3
 8001796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179a:	d103      	bne.n	80017a4 <vQueueWaitForMessageRestricted+0x40>
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80017a4:	f001 fcb6 	bl	8003114 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d106      	bne.n	80017be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	3324      	adds	r3, #36	; 0x24
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	68b9      	ldr	r1, [r7, #8]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 fc3b 	bl	8002034 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80017be:	6978      	ldr	r0, [r7, #20]
 80017c0:	f7ff ff26 	bl	8001610 <prvUnlockQueue>
	}
 80017c4:	bf00      	nop
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08e      	sub	sp, #56	; 0x38
 80017d0:	af04      	add	r7, sp, #16
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80017da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d10a      	bne.n	80017f6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80017e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017e4:	f383 8811 	msr	BASEPRI, r3
 80017e8:	f3bf 8f6f 	isb	sy
 80017ec:	f3bf 8f4f 	dsb	sy
 80017f0:	623b      	str	r3, [r7, #32]
}
 80017f2:	bf00      	nop
 80017f4:	e7fe      	b.n	80017f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80017f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d10a      	bne.n	8001812 <xTaskCreateStatic+0x46>
	__asm volatile
 80017fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001800:	f383 8811 	msr	BASEPRI, r3
 8001804:	f3bf 8f6f 	isb	sy
 8001808:	f3bf 8f4f 	dsb	sy
 800180c:	61fb      	str	r3, [r7, #28]
}
 800180e:	bf00      	nop
 8001810:	e7fe      	b.n	8001810 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001812:	235c      	movs	r3, #92	; 0x5c
 8001814:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	2b5c      	cmp	r3, #92	; 0x5c
 800181a:	d00a      	beq.n	8001832 <xTaskCreateStatic+0x66>
	__asm volatile
 800181c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001820:	f383 8811 	msr	BASEPRI, r3
 8001824:	f3bf 8f6f 	isb	sy
 8001828:	f3bf 8f4f 	dsb	sy
 800182c:	61bb      	str	r3, [r7, #24]
}
 800182e:	bf00      	nop
 8001830:	e7fe      	b.n	8001830 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001832:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001836:	2b00      	cmp	r3, #0
 8001838:	d01e      	beq.n	8001878 <xTaskCreateStatic+0xac>
 800183a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800183c:	2b00      	cmp	r3, #0
 800183e:	d01b      	beq.n	8001878 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001846:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001848:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	2202      	movs	r2, #2
 800184e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001852:	2300      	movs	r3, #0
 8001854:	9303      	str	r3, [sp, #12]
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	9302      	str	r3, [sp, #8]
 800185a:	f107 0314 	add.w	r3, r7, #20
 800185e:	9301      	str	r3, [sp, #4]
 8001860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	68b9      	ldr	r1, [r7, #8]
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f000 f850 	bl	8001910 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001870:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001872:	f000 f8dd 	bl	8001a30 <prvAddNewTaskToReadyList>
 8001876:	e001      	b.n	800187c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800187c:	697b      	ldr	r3, [r7, #20]
	}
 800187e:	4618      	mov	r0, r3
 8001880:	3728      	adds	r7, #40	; 0x28
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001886:	b580      	push	{r7, lr}
 8001888:	b08c      	sub	sp, #48	; 0x30
 800188a:	af04      	add	r7, sp, #16
 800188c:	60f8      	str	r0, [r7, #12]
 800188e:	60b9      	str	r1, [r7, #8]
 8001890:	603b      	str	r3, [r7, #0]
 8001892:	4613      	mov	r3, r2
 8001894:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001896:	88fb      	ldrh	r3, [r7, #6]
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4618      	mov	r0, r3
 800189c:	f001 fd2c 	bl	80032f8 <pvPortMalloc>
 80018a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d00e      	beq.n	80018c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80018a8:	205c      	movs	r0, #92	; 0x5c
 80018aa:	f001 fd25 	bl	80032f8 <pvPortMalloc>
 80018ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	631a      	str	r2, [r3, #48]	; 0x30
 80018bc:	e005      	b.n	80018ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80018be:	6978      	ldr	r0, [r7, #20]
 80018c0:	f001 fde6 	bl	8003490 <vPortFree>
 80018c4:	e001      	b.n	80018ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d017      	beq.n	8001900 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80018d8:	88fa      	ldrh	r2, [r7, #6]
 80018da:	2300      	movs	r3, #0
 80018dc:	9303      	str	r3, [sp, #12]
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	9302      	str	r3, [sp, #8]
 80018e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e4:	9301      	str	r3, [sp, #4]
 80018e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	68b9      	ldr	r1, [r7, #8]
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f000 f80e 	bl	8001910 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80018f4:	69f8      	ldr	r0, [r7, #28]
 80018f6:	f000 f89b 	bl	8001a30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80018fa:	2301      	movs	r3, #1
 80018fc:	61bb      	str	r3, [r7, #24]
 80018fe:	e002      	b.n	8001906 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001900:	f04f 33ff 	mov.w	r3, #4294967295
 8001904:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001906:	69bb      	ldr	r3, [r7, #24]
	}
 8001908:	4618      	mov	r0, r3
 800190a:	3720      	adds	r7, #32
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
 800191c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800191e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001920:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	461a      	mov	r2, r3
 8001928:	21a5      	movs	r1, #165	; 0xa5
 800192a:	f001 ff01 	bl	8003730 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800192e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001938:	3b01      	subs	r3, #1
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	f023 0307 	bic.w	r3, r3, #7
 8001946:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00a      	beq.n	8001968 <prvInitialiseNewTask+0x58>
	__asm volatile
 8001952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001956:	f383 8811 	msr	BASEPRI, r3
 800195a:	f3bf 8f6f 	isb	sy
 800195e:	f3bf 8f4f 	dsb	sy
 8001962:	617b      	str	r3, [r7, #20]
}
 8001964:	bf00      	nop
 8001966:	e7fe      	b.n	8001966 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d01f      	beq.n	80019ae <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
 8001972:	e012      	b.n	800199a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001974:	68ba      	ldr	r2, [r7, #8]
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	4413      	add	r3, r2
 800197a:	7819      	ldrb	r1, [r3, #0]
 800197c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	4413      	add	r3, r2
 8001982:	3334      	adds	r3, #52	; 0x34
 8001984:	460a      	mov	r2, r1
 8001986:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001988:	68ba      	ldr	r2, [r7, #8]
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	4413      	add	r3, r2
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d006      	beq.n	80019a2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	3301      	adds	r3, #1
 8001998:	61fb      	str	r3, [r7, #28]
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	2b0f      	cmp	r3, #15
 800199e:	d9e9      	bls.n	8001974 <prvInitialiseNewTask+0x64>
 80019a0:	e000      	b.n	80019a4 <prvInitialiseNewTask+0x94>
			{
				break;
 80019a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80019a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80019ac:	e003      	b.n	80019b6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80019ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80019b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b8:	2b37      	cmp	r3, #55	; 0x37
 80019ba:	d901      	bls.n	80019c0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80019bc:	2337      	movs	r3, #55	; 0x37
 80019be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80019c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80019c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019ca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80019cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ce:	2200      	movs	r2, #0
 80019d0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80019d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d4:	3304      	adds	r3, #4
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe ffc8 	bl	800096c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80019dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019de:	3318      	adds	r3, #24
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe ffc3 	bl	800096c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80019e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80019f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80019f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80019fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019fe:	2200      	movs	r2, #0
 8001a00:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	68f9      	ldr	r1, [r7, #12]
 8001a0e:	69b8      	ldr	r0, [r7, #24]
 8001a10:	f001 fa26 	bl	8002e60 <pxPortInitialiseStack>
 8001a14:	4602      	mov	r2, r0
 8001a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a18:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d002      	beq.n	8001a26 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001a26:	bf00      	nop
 8001a28:	3720      	adds	r7, #32
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001a38:	f001 fb3c 	bl	80030b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001a3c:	4b2d      	ldr	r3, [pc, #180]	; (8001af4 <prvAddNewTaskToReadyList+0xc4>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	3301      	adds	r3, #1
 8001a42:	4a2c      	ldr	r2, [pc, #176]	; (8001af4 <prvAddNewTaskToReadyList+0xc4>)
 8001a44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001a46:	4b2c      	ldr	r3, [pc, #176]	; (8001af8 <prvAddNewTaskToReadyList+0xc8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d109      	bne.n	8001a62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001a4e:	4a2a      	ldr	r2, [pc, #168]	; (8001af8 <prvAddNewTaskToReadyList+0xc8>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001a54:	4b27      	ldr	r3, [pc, #156]	; (8001af4 <prvAddNewTaskToReadyList+0xc4>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d110      	bne.n	8001a7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001a5c:	f000 fc16 	bl	800228c <prvInitialiseTaskLists>
 8001a60:	e00d      	b.n	8001a7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001a62:	4b26      	ldr	r3, [pc, #152]	; (8001afc <prvAddNewTaskToReadyList+0xcc>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d109      	bne.n	8001a7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001a6a:	4b23      	ldr	r3, [pc, #140]	; (8001af8 <prvAddNewTaskToReadyList+0xc8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d802      	bhi.n	8001a7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001a78:	4a1f      	ldr	r2, [pc, #124]	; (8001af8 <prvAddNewTaskToReadyList+0xc8>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001a7e:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <prvAddNewTaskToReadyList+0xd0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	3301      	adds	r3, #1
 8001a84:	4a1e      	ldr	r2, [pc, #120]	; (8001b00 <prvAddNewTaskToReadyList+0xd0>)
 8001a86:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001a88:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <prvAddNewTaskToReadyList+0xd0>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a94:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <prvAddNewTaskToReadyList+0xd4>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d903      	bls.n	8001aa4 <prvAddNewTaskToReadyList+0x74>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa0:	4a18      	ldr	r2, [pc, #96]	; (8001b04 <prvAddNewTaskToReadyList+0xd4>)
 8001aa2:	6013      	str	r3, [r2, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4a15      	ldr	r2, [pc, #84]	; (8001b08 <prvAddNewTaskToReadyList+0xd8>)
 8001ab2:	441a      	add	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3304      	adds	r3, #4
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4610      	mov	r0, r2
 8001abc:	f7fe ff63 	bl	8000986 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001ac0:	f001 fb28 	bl	8003114 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001ac4:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <prvAddNewTaskToReadyList+0xcc>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d00e      	beq.n	8001aea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001acc:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <prvAddNewTaskToReadyList+0xc8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d207      	bcs.n	8001aea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001ada:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <prvAddNewTaskToReadyList+0xdc>)
 8001adc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	f3bf 8f4f 	dsb	sy
 8001ae6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000c3c 	.word	0x20000c3c
 8001af8:	20000768 	.word	0x20000768
 8001afc:	20000c48 	.word	0x20000c48
 8001b00:	20000c58 	.word	0x20000c58
 8001b04:	20000c44 	.word	0x20000c44
 8001b08:	2000076c 	.word	0x2000076c
 8001b0c:	e000ed04 	.word	0xe000ed04

08001b10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d017      	beq.n	8001b52 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001b22:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <vTaskDelay+0x60>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00a      	beq.n	8001b40 <vTaskDelay+0x30>
	__asm volatile
 8001b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b2e:	f383 8811 	msr	BASEPRI, r3
 8001b32:	f3bf 8f6f 	isb	sy
 8001b36:	f3bf 8f4f 	dsb	sy
 8001b3a:	60bb      	str	r3, [r7, #8]
}
 8001b3c:	bf00      	nop
 8001b3e:	e7fe      	b.n	8001b3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001b40:	f000 f880 	bl	8001c44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001b44:	2100      	movs	r1, #0
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 fde8 	bl	800271c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001b4c:	f000 f888 	bl	8001c60 <xTaskResumeAll>
 8001b50:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d107      	bne.n	8001b68 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <vTaskDelay+0x64>)
 8001b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	f3bf 8f4f 	dsb	sy
 8001b64:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001b68:	bf00      	nop
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000c64 	.word	0x20000c64
 8001b74:	e000ed04 	.word	0xe000ed04

08001b78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08a      	sub	sp, #40	; 0x28
 8001b7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001b86:	463a      	mov	r2, r7
 8001b88:	1d39      	adds	r1, r7, #4
 8001b8a:	f107 0308 	add.w	r3, r7, #8
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fe98 	bl	80008c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001b94:	6839      	ldr	r1, [r7, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68ba      	ldr	r2, [r7, #8]
 8001b9a:	9202      	str	r2, [sp, #8]
 8001b9c:	9301      	str	r3, [sp, #4]
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	460a      	mov	r2, r1
 8001ba6:	4921      	ldr	r1, [pc, #132]	; (8001c2c <vTaskStartScheduler+0xb4>)
 8001ba8:	4821      	ldr	r0, [pc, #132]	; (8001c30 <vTaskStartScheduler+0xb8>)
 8001baa:	f7ff fe0f 	bl	80017cc <xTaskCreateStatic>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4a20      	ldr	r2, [pc, #128]	; (8001c34 <vTaskStartScheduler+0xbc>)
 8001bb2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001bb4:	4b1f      	ldr	r3, [pc, #124]	; (8001c34 <vTaskStartScheduler+0xbc>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d002      	beq.n	8001bc2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	e001      	b.n	8001bc6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d102      	bne.n	8001bd2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8001bcc:	f000 fdfa 	bl	80027c4 <xTimerCreateTimerTask>
 8001bd0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d116      	bne.n	8001c06 <vTaskStartScheduler+0x8e>
	__asm volatile
 8001bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bdc:	f383 8811 	msr	BASEPRI, r3
 8001be0:	f3bf 8f6f 	isb	sy
 8001be4:	f3bf 8f4f 	dsb	sy
 8001be8:	613b      	str	r3, [r7, #16]
}
 8001bea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001bec:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <vTaskStartScheduler+0xc0>)
 8001bee:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <vTaskStartScheduler+0xc4>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001bfa:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <vTaskStartScheduler+0xc8>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001c00:	f001 f9b6 	bl	8002f70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001c04:	e00e      	b.n	8001c24 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0c:	d10a      	bne.n	8001c24 <vTaskStartScheduler+0xac>
	__asm volatile
 8001c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c12:	f383 8811 	msr	BASEPRI, r3
 8001c16:	f3bf 8f6f 	isb	sy
 8001c1a:	f3bf 8f4f 	dsb	sy
 8001c1e:	60fb      	str	r3, [r7, #12]
}
 8001c20:	bf00      	nop
 8001c22:	e7fe      	b.n	8001c22 <vTaskStartScheduler+0xaa>
}
 8001c24:	bf00      	nop
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	0800380c 	.word	0x0800380c
 8001c30:	0800225d 	.word	0x0800225d
 8001c34:	20000c60 	.word	0x20000c60
 8001c38:	20000c5c 	.word	0x20000c5c
 8001c3c:	20000c48 	.word	0x20000c48
 8001c40:	20000c40 	.word	0x20000c40

08001c44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001c48:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <vTaskSuspendAll+0x18>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	4a03      	ldr	r2, [pc, #12]	; (8001c5c <vTaskSuspendAll+0x18>)
 8001c50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001c52:	bf00      	nop
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	20000c64 	.word	0x20000c64

08001c60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001c6e:	4b42      	ldr	r3, [pc, #264]	; (8001d78 <xTaskResumeAll+0x118>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10a      	bne.n	8001c8c <xTaskResumeAll+0x2c>
	__asm volatile
 8001c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c7a:	f383 8811 	msr	BASEPRI, r3
 8001c7e:	f3bf 8f6f 	isb	sy
 8001c82:	f3bf 8f4f 	dsb	sy
 8001c86:	603b      	str	r3, [r7, #0]
}
 8001c88:	bf00      	nop
 8001c8a:	e7fe      	b.n	8001c8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001c8c:	f001 fa12 	bl	80030b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001c90:	4b39      	ldr	r3, [pc, #228]	; (8001d78 <xTaskResumeAll+0x118>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	3b01      	subs	r3, #1
 8001c96:	4a38      	ldr	r2, [pc, #224]	; (8001d78 <xTaskResumeAll+0x118>)
 8001c98:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c9a:	4b37      	ldr	r3, [pc, #220]	; (8001d78 <xTaskResumeAll+0x118>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d162      	bne.n	8001d68 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001ca2:	4b36      	ldr	r3, [pc, #216]	; (8001d7c <xTaskResumeAll+0x11c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d05e      	beq.n	8001d68 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001caa:	e02f      	b.n	8001d0c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001cac:	4b34      	ldr	r3, [pc, #208]	; (8001d80 <xTaskResumeAll+0x120>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	3318      	adds	r3, #24
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe fec1 	bl	8000a40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe febc 	bl	8000a40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ccc:	4b2d      	ldr	r3, [pc, #180]	; (8001d84 <xTaskResumeAll+0x124>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d903      	bls.n	8001cdc <xTaskResumeAll+0x7c>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd8:	4a2a      	ldr	r2, [pc, #168]	; (8001d84 <xTaskResumeAll+0x124>)
 8001cda:	6013      	str	r3, [r2, #0]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4a27      	ldr	r2, [pc, #156]	; (8001d88 <xTaskResumeAll+0x128>)
 8001cea:	441a      	add	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	3304      	adds	r3, #4
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	f7fe fe47 	bl	8000986 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cfc:	4b23      	ldr	r3, [pc, #140]	; (8001d8c <xTaskResumeAll+0x12c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d302      	bcc.n	8001d0c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8001d06:	4b22      	ldr	r3, [pc, #136]	; (8001d90 <xTaskResumeAll+0x130>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001d0c:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <xTaskResumeAll+0x120>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1cb      	bne.n	8001cac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001d1a:	f000 fb55 	bl	80023c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001d1e:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <xTaskResumeAll+0x134>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d010      	beq.n	8001d4c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001d2a:	f000 f847 	bl	8001dbc <xTaskIncrementTick>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d002      	beq.n	8001d3a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8001d34:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <xTaskResumeAll+0x130>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f1      	bne.n	8001d2a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8001d46:	4b13      	ldr	r3, [pc, #76]	; (8001d94 <xTaskResumeAll+0x134>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001d4c:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <xTaskResumeAll+0x130>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d009      	beq.n	8001d68 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001d54:	2301      	movs	r3, #1
 8001d56:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001d58:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <xTaskResumeAll+0x138>)
 8001d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	f3bf 8f4f 	dsb	sy
 8001d64:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001d68:	f001 f9d4 	bl	8003114 <vPortExitCritical>

	return xAlreadyYielded;
 8001d6c:	68bb      	ldr	r3, [r7, #8]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000c64 	.word	0x20000c64
 8001d7c:	20000c3c 	.word	0x20000c3c
 8001d80:	20000bfc 	.word	0x20000bfc
 8001d84:	20000c44 	.word	0x20000c44
 8001d88:	2000076c 	.word	0x2000076c
 8001d8c:	20000768 	.word	0x20000768
 8001d90:	20000c50 	.word	0x20000c50
 8001d94:	20000c4c 	.word	0x20000c4c
 8001d98:	e000ed04 	.word	0xe000ed04

08001d9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001da2:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <xTaskGetTickCount+0x1c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001da8:	687b      	ldr	r3, [r7, #4]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20000c40 	.word	0x20000c40

08001dbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001dc6:	4b4f      	ldr	r3, [pc, #316]	; (8001f04 <xTaskIncrementTick+0x148>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f040 808f 	bne.w	8001eee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001dd0:	4b4d      	ldr	r3, [pc, #308]	; (8001f08 <xTaskIncrementTick+0x14c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001dd8:	4a4b      	ldr	r2, [pc, #300]	; (8001f08 <xTaskIncrementTick+0x14c>)
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d120      	bne.n	8001e26 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001de4:	4b49      	ldr	r3, [pc, #292]	; (8001f0c <xTaskIncrementTick+0x150>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00a      	beq.n	8001e04 <xTaskIncrementTick+0x48>
	__asm volatile
 8001dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df2:	f383 8811 	msr	BASEPRI, r3
 8001df6:	f3bf 8f6f 	isb	sy
 8001dfa:	f3bf 8f4f 	dsb	sy
 8001dfe:	603b      	str	r3, [r7, #0]
}
 8001e00:	bf00      	nop
 8001e02:	e7fe      	b.n	8001e02 <xTaskIncrementTick+0x46>
 8001e04:	4b41      	ldr	r3, [pc, #260]	; (8001f0c <xTaskIncrementTick+0x150>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	4b41      	ldr	r3, [pc, #260]	; (8001f10 <xTaskIncrementTick+0x154>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a3f      	ldr	r2, [pc, #252]	; (8001f0c <xTaskIncrementTick+0x150>)
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	4a3f      	ldr	r2, [pc, #252]	; (8001f10 <xTaskIncrementTick+0x154>)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	4b3e      	ldr	r3, [pc, #248]	; (8001f14 <xTaskIncrementTick+0x158>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	4a3d      	ldr	r2, [pc, #244]	; (8001f14 <xTaskIncrementTick+0x158>)
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	f000 fad1 	bl	80023c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001e26:	4b3c      	ldr	r3, [pc, #240]	; (8001f18 <xTaskIncrementTick+0x15c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d349      	bcc.n	8001ec4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e30:	4b36      	ldr	r3, [pc, #216]	; (8001f0c <xTaskIncrementTick+0x150>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d104      	bne.n	8001e44 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e3a:	4b37      	ldr	r3, [pc, #220]	; (8001f18 <xTaskIncrementTick+0x15c>)
 8001e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e40:	601a      	str	r2, [r3, #0]
					break;
 8001e42:	e03f      	b.n	8001ec4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e44:	4b31      	ldr	r3, [pc, #196]	; (8001f0c <xTaskIncrementTick+0x150>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d203      	bcs.n	8001e64 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001e5c:	4a2e      	ldr	r2, [pc, #184]	; (8001f18 <xTaskIncrementTick+0x15c>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001e62:	e02f      	b.n	8001ec4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	3304      	adds	r3, #4
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe fde9 	bl	8000a40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d004      	beq.n	8001e80 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	3318      	adds	r3, #24
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe fde0 	bl	8000a40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e84:	4b25      	ldr	r3, [pc, #148]	; (8001f1c <xTaskIncrementTick+0x160>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d903      	bls.n	8001e94 <xTaskIncrementTick+0xd8>
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e90:	4a22      	ldr	r2, [pc, #136]	; (8001f1c <xTaskIncrementTick+0x160>)
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4a1f      	ldr	r2, [pc, #124]	; (8001f20 <xTaskIncrementTick+0x164>)
 8001ea2:	441a      	add	r2, r3
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	3304      	adds	r3, #4
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4610      	mov	r0, r2
 8001eac:	f7fe fd6b 	bl	8000986 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eb4:	4b1b      	ldr	r3, [pc, #108]	; (8001f24 <xTaskIncrementTick+0x168>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d3b8      	bcc.n	8001e30 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ec2:	e7b5      	b.n	8001e30 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001ec4:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <xTaskIncrementTick+0x168>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eca:	4915      	ldr	r1, [pc, #84]	; (8001f20 <xTaskIncrementTick+0x164>)
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d901      	bls.n	8001ee0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8001edc:	2301      	movs	r3, #1
 8001ede:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <xTaskIncrementTick+0x16c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d007      	beq.n	8001ef8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	e004      	b.n	8001ef8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001eee:	4b0f      	ldr	r3, [pc, #60]	; (8001f2c <xTaskIncrementTick+0x170>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	4a0d      	ldr	r2, [pc, #52]	; (8001f2c <xTaskIncrementTick+0x170>)
 8001ef6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001ef8:	697b      	ldr	r3, [r7, #20]
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000c64 	.word	0x20000c64
 8001f08:	20000c40 	.word	0x20000c40
 8001f0c:	20000bf4 	.word	0x20000bf4
 8001f10:	20000bf8 	.word	0x20000bf8
 8001f14:	20000c54 	.word	0x20000c54
 8001f18:	20000c5c 	.word	0x20000c5c
 8001f1c:	20000c44 	.word	0x20000c44
 8001f20:	2000076c 	.word	0x2000076c
 8001f24:	20000768 	.word	0x20000768
 8001f28:	20000c50 	.word	0x20000c50
 8001f2c:	20000c4c 	.word	0x20000c4c

08001f30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001f36:	4b28      	ldr	r3, [pc, #160]	; (8001fd8 <vTaskSwitchContext+0xa8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001f3e:	4b27      	ldr	r3, [pc, #156]	; (8001fdc <vTaskSwitchContext+0xac>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001f44:	e041      	b.n	8001fca <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8001f46:	4b25      	ldr	r3, [pc, #148]	; (8001fdc <vTaskSwitchContext+0xac>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f4c:	4b24      	ldr	r3, [pc, #144]	; (8001fe0 <vTaskSwitchContext+0xb0>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	e010      	b.n	8001f76 <vTaskSwitchContext+0x46>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10a      	bne.n	8001f70 <vTaskSwitchContext+0x40>
	__asm volatile
 8001f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f5e:	f383 8811 	msr	BASEPRI, r3
 8001f62:	f3bf 8f6f 	isb	sy
 8001f66:	f3bf 8f4f 	dsb	sy
 8001f6a:	607b      	str	r3, [r7, #4]
}
 8001f6c:	bf00      	nop
 8001f6e:	e7fe      	b.n	8001f6e <vTaskSwitchContext+0x3e>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	491b      	ldr	r1, [pc, #108]	; (8001fe4 <vTaskSwitchContext+0xb4>)
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4413      	add	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	440b      	add	r3, r1
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0e4      	beq.n	8001f54 <vTaskSwitchContext+0x24>
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4a13      	ldr	r2, [pc, #76]	; (8001fe4 <vTaskSwitchContext+0xb4>)
 8001f96:	4413      	add	r3, r2
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	605a      	str	r2, [r3, #4]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	3308      	adds	r3, #8
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d104      	bne.n	8001fba <vTaskSwitchContext+0x8a>
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	4a09      	ldr	r2, [pc, #36]	; (8001fe8 <vTaskSwitchContext+0xb8>)
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	4a06      	ldr	r2, [pc, #24]	; (8001fe0 <vTaskSwitchContext+0xb0>)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6013      	str	r3, [r2, #0]
}
 8001fca:	bf00      	nop
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	20000c64 	.word	0x20000c64
 8001fdc:	20000c50 	.word	0x20000c50
 8001fe0:	20000c44 	.word	0x20000c44
 8001fe4:	2000076c 	.word	0x2000076c
 8001fe8:	20000768 	.word	0x20000768

08001fec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10a      	bne.n	8002012 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8001ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002000:	f383 8811 	msr	BASEPRI, r3
 8002004:	f3bf 8f6f 	isb	sy
 8002008:	f3bf 8f4f 	dsb	sy
 800200c:	60fb      	str	r3, [r7, #12]
}
 800200e:	bf00      	nop
 8002010:	e7fe      	b.n	8002010 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002012:	4b07      	ldr	r3, [pc, #28]	; (8002030 <vTaskPlaceOnEventList+0x44>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	3318      	adds	r3, #24
 8002018:	4619      	mov	r1, r3
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7fe fcd7 	bl	80009ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002020:	2101      	movs	r1, #1
 8002022:	6838      	ldr	r0, [r7, #0]
 8002024:	f000 fb7a 	bl	800271c <prvAddCurrentTaskToDelayedList>
}
 8002028:	bf00      	nop
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20000768 	.word	0x20000768

08002034 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10a      	bne.n	800205c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8002046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800204a:	f383 8811 	msr	BASEPRI, r3
 800204e:	f3bf 8f6f 	isb	sy
 8002052:	f3bf 8f4f 	dsb	sy
 8002056:	617b      	str	r3, [r7, #20]
}
 8002058:	bf00      	nop
 800205a:	e7fe      	b.n	800205a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800205c:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <vTaskPlaceOnEventListRestricted+0x54>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	3318      	adds	r3, #24
 8002062:	4619      	mov	r1, r3
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f7fe fc8e 	bl	8000986 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d002      	beq.n	8002076 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8002070:	f04f 33ff 	mov.w	r3, #4294967295
 8002074:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	68b8      	ldr	r0, [r7, #8]
 800207a:	f000 fb4f 	bl	800271c <prvAddCurrentTaskToDelayedList>
	}
 800207e:	bf00      	nop
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000768 	.word	0x20000768

0800208c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10a      	bne.n	80020b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80020a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020a6:	f383 8811 	msr	BASEPRI, r3
 80020aa:	f3bf 8f6f 	isb	sy
 80020ae:	f3bf 8f4f 	dsb	sy
 80020b2:	60fb      	str	r3, [r7, #12]
}
 80020b4:	bf00      	nop
 80020b6:	e7fe      	b.n	80020b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	3318      	adds	r3, #24
 80020bc:	4618      	mov	r0, r3
 80020be:	f7fe fcbf 	bl	8000a40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020c2:	4b1e      	ldr	r3, [pc, #120]	; (800213c <xTaskRemoveFromEventList+0xb0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d11d      	bne.n	8002106 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	3304      	adds	r3, #4
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fcb6 	bl	8000a40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d8:	4b19      	ldr	r3, [pc, #100]	; (8002140 <xTaskRemoveFromEventList+0xb4>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d903      	bls.n	80020e8 <xTaskRemoveFromEventList+0x5c>
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e4:	4a16      	ldr	r2, [pc, #88]	; (8002140 <xTaskRemoveFromEventList+0xb4>)
 80020e6:	6013      	str	r3, [r2, #0]
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4a13      	ldr	r2, [pc, #76]	; (8002144 <xTaskRemoveFromEventList+0xb8>)
 80020f6:	441a      	add	r2, r3
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	3304      	adds	r3, #4
 80020fc:	4619      	mov	r1, r3
 80020fe:	4610      	mov	r0, r2
 8002100:	f7fe fc41 	bl	8000986 <vListInsertEnd>
 8002104:	e005      	b.n	8002112 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	3318      	adds	r3, #24
 800210a:	4619      	mov	r1, r3
 800210c:	480e      	ldr	r0, [pc, #56]	; (8002148 <xTaskRemoveFromEventList+0xbc>)
 800210e:	f7fe fc3a 	bl	8000986 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002116:	4b0d      	ldr	r3, [pc, #52]	; (800214c <xTaskRemoveFromEventList+0xc0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211c:	429a      	cmp	r2, r3
 800211e:	d905      	bls.n	800212c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002120:	2301      	movs	r3, #1
 8002122:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002124:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <xTaskRemoveFromEventList+0xc4>)
 8002126:	2201      	movs	r2, #1
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	e001      	b.n	8002130 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002130:	697b      	ldr	r3, [r7, #20]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000c64 	.word	0x20000c64
 8002140:	20000c44 	.word	0x20000c44
 8002144:	2000076c 	.word	0x2000076c
 8002148:	20000bfc 	.word	0x20000bfc
 800214c:	20000768 	.word	0x20000768
 8002150:	20000c50 	.word	0x20000c50

08002154 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <vTaskInternalSetTimeOutState+0x24>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002164:	4b05      	ldr	r3, [pc, #20]	; (800217c <vTaskInternalSetTimeOutState+0x28>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	605a      	str	r2, [r3, #4]
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	20000c54 	.word	0x20000c54
 800217c:	20000c40 	.word	0x20000c40

08002180 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10a      	bne.n	80021a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002194:	f383 8811 	msr	BASEPRI, r3
 8002198:	f3bf 8f6f 	isb	sy
 800219c:	f3bf 8f4f 	dsb	sy
 80021a0:	613b      	str	r3, [r7, #16]
}
 80021a2:	bf00      	nop
 80021a4:	e7fe      	b.n	80021a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10a      	bne.n	80021c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80021ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b0:	f383 8811 	msr	BASEPRI, r3
 80021b4:	f3bf 8f6f 	isb	sy
 80021b8:	f3bf 8f4f 	dsb	sy
 80021bc:	60fb      	str	r3, [r7, #12]
}
 80021be:	bf00      	nop
 80021c0:	e7fe      	b.n	80021c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80021c2:	f000 ff77 	bl	80030b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80021c6:	4b1d      	ldr	r3, [pc, #116]	; (800223c <xTaskCheckForTimeOut+0xbc>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021de:	d102      	bne.n	80021e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80021e0:	2300      	movs	r3, #0
 80021e2:	61fb      	str	r3, [r7, #28]
 80021e4:	e023      	b.n	800222e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <xTaskCheckForTimeOut+0xc0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d007      	beq.n	8002202 <xTaskCheckForTimeOut+0x82>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d302      	bcc.n	8002202 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80021fc:	2301      	movs	r3, #1
 80021fe:	61fb      	str	r3, [r7, #28]
 8002200:	e015      	b.n	800222e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	429a      	cmp	r2, r3
 800220a:	d20b      	bcs.n	8002224 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	1ad2      	subs	r2, r2, r3
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7ff ff9b 	bl	8002154 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
 8002222:	e004      	b.n	800222e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800222a:	2301      	movs	r3, #1
 800222c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800222e:	f000 ff71 	bl	8003114 <vPortExitCritical>

	return xReturn;
 8002232:	69fb      	ldr	r3, [r7, #28]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3720      	adds	r7, #32
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000c40 	.word	0x20000c40
 8002240:	20000c54 	.word	0x20000c54

08002244 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002248:	4b03      	ldr	r3, [pc, #12]	; (8002258 <vTaskMissedYield+0x14>)
 800224a:	2201      	movs	r2, #1
 800224c:	601a      	str	r2, [r3, #0]
}
 800224e:	bf00      	nop
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	20000c50 	.word	0x20000c50

0800225c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002264:	f000 f852 	bl	800230c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <prvIdleTask+0x28>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d9f9      	bls.n	8002264 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002270:	4b05      	ldr	r3, [pc, #20]	; (8002288 <prvIdleTask+0x2c>)
 8002272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	f3bf 8f4f 	dsb	sy
 800227c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002280:	e7f0      	b.n	8002264 <prvIdleTask+0x8>
 8002282:	bf00      	nop
 8002284:	2000076c 	.word	0x2000076c
 8002288:	e000ed04 	.word	0xe000ed04

0800228c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002292:	2300      	movs	r3, #0
 8002294:	607b      	str	r3, [r7, #4]
 8002296:	e00c      	b.n	80022b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4a12      	ldr	r2, [pc, #72]	; (80022ec <prvInitialiseTaskLists+0x60>)
 80022a4:	4413      	add	r3, r2
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe fb40 	bl	800092c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3301      	adds	r3, #1
 80022b0:	607b      	str	r3, [r7, #4]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b37      	cmp	r3, #55	; 0x37
 80022b6:	d9ef      	bls.n	8002298 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80022b8:	480d      	ldr	r0, [pc, #52]	; (80022f0 <prvInitialiseTaskLists+0x64>)
 80022ba:	f7fe fb37 	bl	800092c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80022be:	480d      	ldr	r0, [pc, #52]	; (80022f4 <prvInitialiseTaskLists+0x68>)
 80022c0:	f7fe fb34 	bl	800092c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80022c4:	480c      	ldr	r0, [pc, #48]	; (80022f8 <prvInitialiseTaskLists+0x6c>)
 80022c6:	f7fe fb31 	bl	800092c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80022ca:	480c      	ldr	r0, [pc, #48]	; (80022fc <prvInitialiseTaskLists+0x70>)
 80022cc:	f7fe fb2e 	bl	800092c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80022d0:	480b      	ldr	r0, [pc, #44]	; (8002300 <prvInitialiseTaskLists+0x74>)
 80022d2:	f7fe fb2b 	bl	800092c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80022d6:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <prvInitialiseTaskLists+0x78>)
 80022d8:	4a05      	ldr	r2, [pc, #20]	; (80022f0 <prvInitialiseTaskLists+0x64>)
 80022da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80022dc:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <prvInitialiseTaskLists+0x7c>)
 80022de:	4a05      	ldr	r2, [pc, #20]	; (80022f4 <prvInitialiseTaskLists+0x68>)
 80022e0:	601a      	str	r2, [r3, #0]
}
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	2000076c 	.word	0x2000076c
 80022f0:	20000bcc 	.word	0x20000bcc
 80022f4:	20000be0 	.word	0x20000be0
 80022f8:	20000bfc 	.word	0x20000bfc
 80022fc:	20000c10 	.word	0x20000c10
 8002300:	20000c28 	.word	0x20000c28
 8002304:	20000bf4 	.word	0x20000bf4
 8002308:	20000bf8 	.word	0x20000bf8

0800230c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002312:	e019      	b.n	8002348 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002314:	f000 fece 	bl	80030b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002318:	4b10      	ldr	r3, [pc, #64]	; (800235c <prvCheckTasksWaitingTermination+0x50>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3304      	adds	r3, #4
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe fb8b 	bl	8000a40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800232a:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <prvCheckTasksWaitingTermination+0x54>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	3b01      	subs	r3, #1
 8002330:	4a0b      	ldr	r2, [pc, #44]	; (8002360 <prvCheckTasksWaitingTermination+0x54>)
 8002332:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002334:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <prvCheckTasksWaitingTermination+0x58>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	3b01      	subs	r3, #1
 800233a:	4a0a      	ldr	r2, [pc, #40]	; (8002364 <prvCheckTasksWaitingTermination+0x58>)
 800233c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800233e:	f000 fee9 	bl	8003114 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f810 	bl	8002368 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <prvCheckTasksWaitingTermination+0x58>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1e1      	bne.n	8002314 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002350:	bf00      	nop
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20000c10 	.word	0x20000c10
 8002360:	20000c3c 	.word	0x20000c3c
 8002364:	20000c24 	.word	0x20000c24

08002368 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002376:	2b00      	cmp	r3, #0
 8002378:	d108      	bne.n	800238c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	4618      	mov	r0, r3
 8002380:	f001 f886 	bl	8003490 <vPortFree>
				vPortFree( pxTCB );
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f001 f883 	bl	8003490 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800238a:	e018      	b.n	80023be <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002392:	2b01      	cmp	r3, #1
 8002394:	d103      	bne.n	800239e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f001 f87a 	bl	8003490 <vPortFree>
	}
 800239c:	e00f      	b.n	80023be <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d00a      	beq.n	80023be <prvDeleteTCB+0x56>
	__asm volatile
 80023a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ac:	f383 8811 	msr	BASEPRI, r3
 80023b0:	f3bf 8f6f 	isb	sy
 80023b4:	f3bf 8f4f 	dsb	sy
 80023b8:	60fb      	str	r3, [r7, #12]
}
 80023ba:	bf00      	nop
 80023bc:	e7fe      	b.n	80023bc <prvDeleteTCB+0x54>
	}
 80023be:	bf00      	nop
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
	...

080023c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80023ce:	4b0c      	ldr	r3, [pc, #48]	; (8002400 <prvResetNextTaskUnblockTime+0x38>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d104      	bne.n	80023e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80023d8:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <prvResetNextTaskUnblockTime+0x3c>)
 80023da:	f04f 32ff 	mov.w	r2, #4294967295
 80023de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80023e0:	e008      	b.n	80023f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80023e2:	4b07      	ldr	r3, [pc, #28]	; (8002400 <prvResetNextTaskUnblockTime+0x38>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	4a04      	ldr	r2, [pc, #16]	; (8002404 <prvResetNextTaskUnblockTime+0x3c>)
 80023f2:	6013      	str	r3, [r2, #0]
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	20000bf4 	.word	0x20000bf4
 8002404:	20000c5c 	.word	0x20000c5c

08002408 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800240e:	4b0b      	ldr	r3, [pc, #44]	; (800243c <xTaskGetSchedulerState+0x34>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d102      	bne.n	800241c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002416:	2301      	movs	r3, #1
 8002418:	607b      	str	r3, [r7, #4]
 800241a:	e008      	b.n	800242e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800241c:	4b08      	ldr	r3, [pc, #32]	; (8002440 <xTaskGetSchedulerState+0x38>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d102      	bne.n	800242a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002424:	2302      	movs	r3, #2
 8002426:	607b      	str	r3, [r7, #4]
 8002428:	e001      	b.n	800242e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800242a:	2300      	movs	r3, #0
 800242c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800242e:	687b      	ldr	r3, [r7, #4]
	}
 8002430:	4618      	mov	r0, r3
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	20000c48 	.word	0x20000c48
 8002440:	20000c64 	.word	0x20000c64

08002444 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8002450:	2300      	movs	r3, #0
 8002452:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d051      	beq.n	80024fe <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800245e:	4b2a      	ldr	r3, [pc, #168]	; (8002508 <xTaskPriorityInherit+0xc4>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002464:	429a      	cmp	r2, r3
 8002466:	d241      	bcs.n	80024ec <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	2b00      	cmp	r3, #0
 800246e:	db06      	blt.n	800247e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002470:	4b25      	ldr	r3, [pc, #148]	; (8002508 <xTaskPriorityInherit+0xc4>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002476:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	6959      	ldr	r1, [r3, #20]
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4a1f      	ldr	r2, [pc, #124]	; (800250c <xTaskPriorityInherit+0xc8>)
 8002490:	4413      	add	r3, r2
 8002492:	4299      	cmp	r1, r3
 8002494:	d122      	bne.n	80024dc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	3304      	adds	r3, #4
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe fad0 	bl	8000a40 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80024a0:	4b19      	ldr	r3, [pc, #100]	; (8002508 <xTaskPriorityInherit+0xc4>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ae:	4b18      	ldr	r3, [pc, #96]	; (8002510 <xTaskPriorityInherit+0xcc>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d903      	bls.n	80024be <xTaskPriorityInherit+0x7a>
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ba:	4a15      	ldr	r2, [pc, #84]	; (8002510 <xTaskPriorityInherit+0xcc>)
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4a10      	ldr	r2, [pc, #64]	; (800250c <xTaskPriorityInherit+0xc8>)
 80024cc:	441a      	add	r2, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	3304      	adds	r3, #4
 80024d2:	4619      	mov	r1, r3
 80024d4:	4610      	mov	r0, r2
 80024d6:	f7fe fa56 	bl	8000986 <vListInsertEnd>
 80024da:	e004      	b.n	80024e6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80024dc:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <xTaskPriorityInherit+0xc4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80024e6:	2301      	movs	r3, #1
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	e008      	b.n	80024fe <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024f0:	4b05      	ldr	r3, [pc, #20]	; (8002508 <xTaskPriorityInherit+0xc4>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d201      	bcs.n	80024fe <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80024fa:	2301      	movs	r3, #1
 80024fc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80024fe:	68fb      	ldr	r3, [r7, #12]
	}
 8002500:	4618      	mov	r0, r3
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20000768 	.word	0x20000768
 800250c:	2000076c 	.word	0x2000076c
 8002510:	20000c44 	.word	0x20000c44

08002514 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d056      	beq.n	80025d8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800252a:	4b2e      	ldr	r3, [pc, #184]	; (80025e4 <xTaskPriorityDisinherit+0xd0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	429a      	cmp	r2, r3
 8002532:	d00a      	beq.n	800254a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8002534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002538:	f383 8811 	msr	BASEPRI, r3
 800253c:	f3bf 8f6f 	isb	sy
 8002540:	f3bf 8f4f 	dsb	sy
 8002544:	60fb      	str	r3, [r7, #12]
}
 8002546:	bf00      	nop
 8002548:	e7fe      	b.n	8002548 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10a      	bne.n	8002568 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8002552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002556:	f383 8811 	msr	BASEPRI, r3
 800255a:	f3bf 8f6f 	isb	sy
 800255e:	f3bf 8f4f 	dsb	sy
 8002562:	60bb      	str	r3, [r7, #8]
}
 8002564:	bf00      	nop
 8002566:	e7fe      	b.n	8002566 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800256c:	1e5a      	subs	r2, r3, #1
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257a:	429a      	cmp	r2, r3
 800257c:	d02c      	beq.n	80025d8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002582:	2b00      	cmp	r3, #0
 8002584:	d128      	bne.n	80025d8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	3304      	adds	r3, #4
 800258a:	4618      	mov	r0, r3
 800258c:	f7fe fa58 	bl	8000a40 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025a8:	4b0f      	ldr	r3, [pc, #60]	; (80025e8 <xTaskPriorityDisinherit+0xd4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d903      	bls.n	80025b8 <xTaskPriorityDisinherit+0xa4>
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b4:	4a0c      	ldr	r2, [pc, #48]	; (80025e8 <xTaskPriorityDisinherit+0xd4>)
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4a09      	ldr	r2, [pc, #36]	; (80025ec <xTaskPriorityDisinherit+0xd8>)
 80025c6:	441a      	add	r2, r3
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	3304      	adds	r3, #4
 80025cc:	4619      	mov	r1, r3
 80025ce:	4610      	mov	r0, r2
 80025d0:	f7fe f9d9 	bl	8000986 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80025d4:	2301      	movs	r3, #1
 80025d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80025d8:	697b      	ldr	r3, [r7, #20]
	}
 80025da:	4618      	mov	r0, r3
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000768 	.word	0x20000768
 80025e8:	20000c44 	.word	0x20000c44
 80025ec:	2000076c 	.word	0x2000076c

080025f0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80025fe:	2301      	movs	r3, #1
 8002600:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d06a      	beq.n	80026de <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10a      	bne.n	8002626 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8002610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002614:	f383 8811 	msr	BASEPRI, r3
 8002618:	f3bf 8f6f 	isb	sy
 800261c:	f3bf 8f4f 	dsb	sy
 8002620:	60fb      	str	r3, [r7, #12]
}
 8002622:	bf00      	nop
 8002624:	e7fe      	b.n	8002624 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d902      	bls.n	8002636 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	61fb      	str	r3, [r7, #28]
 8002634:	e002      	b.n	800263c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002640:	69fa      	ldr	r2, [r7, #28]
 8002642:	429a      	cmp	r2, r3
 8002644:	d04b      	beq.n	80026de <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	429a      	cmp	r2, r3
 800264e:	d146      	bne.n	80026de <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8002650:	4b25      	ldr	r3, [pc, #148]	; (80026e8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	429a      	cmp	r2, r3
 8002658:	d10a      	bne.n	8002670 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800265a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800265e:	f383 8811 	msr	BASEPRI, r3
 8002662:	f3bf 8f6f 	isb	sy
 8002666:	f3bf 8f4f 	dsb	sy
 800266a:	60bb      	str	r3, [r7, #8]
}
 800266c:	bf00      	nop
 800266e:	e7fe      	b.n	800266e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002674:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	69fa      	ldr	r2, [r7, #28]
 800267a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	2b00      	cmp	r3, #0
 8002682:	db04      	blt.n	800268e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	6959      	ldr	r1, [r3, #20]
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4a13      	ldr	r2, [pc, #76]	; (80026ec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800269e:	4413      	add	r3, r2
 80026a0:	4299      	cmp	r1, r3
 80026a2:	d11c      	bne.n	80026de <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	3304      	adds	r3, #4
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fe f9c9 	bl	8000a40 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b2:	4b0f      	ldr	r3, [pc, #60]	; (80026f0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d903      	bls.n	80026c2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026be:	4a0c      	ldr	r2, [pc, #48]	; (80026f0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c6:	4613      	mov	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4a07      	ldr	r2, [pc, #28]	; (80026ec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80026d0:	441a      	add	r2, r3
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	3304      	adds	r3, #4
 80026d6:	4619      	mov	r1, r3
 80026d8:	4610      	mov	r0, r2
 80026da:	f7fe f954 	bl	8000986 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80026de:	bf00      	nop
 80026e0:	3720      	adds	r7, #32
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000768 	.word	0x20000768
 80026ec:	2000076c 	.word	0x2000076c
 80026f0:	20000c44 	.word	0x20000c44

080026f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80026f8:	4b07      	ldr	r3, [pc, #28]	; (8002718 <pvTaskIncrementMutexHeldCount+0x24>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d004      	beq.n	800270a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8002700:	4b05      	ldr	r3, [pc, #20]	; (8002718 <pvTaskIncrementMutexHeldCount+0x24>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002706:	3201      	adds	r2, #1
 8002708:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800270a:	4b03      	ldr	r3, [pc, #12]	; (8002718 <pvTaskIncrementMutexHeldCount+0x24>)
 800270c:	681b      	ldr	r3, [r3, #0]
	}
 800270e:	4618      	mov	r0, r3
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	20000768 	.word	0x20000768

0800271c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002726:	4b21      	ldr	r3, [pc, #132]	; (80027ac <prvAddCurrentTaskToDelayedList+0x90>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800272c:	4b20      	ldr	r3, [pc, #128]	; (80027b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	3304      	adds	r3, #4
 8002732:	4618      	mov	r0, r3
 8002734:	f7fe f984 	bl	8000a40 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273e:	d10a      	bne.n	8002756 <prvAddCurrentTaskToDelayedList+0x3a>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d007      	beq.n	8002756 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002746:	4b1a      	ldr	r3, [pc, #104]	; (80027b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	3304      	adds	r3, #4
 800274c:	4619      	mov	r1, r3
 800274e:	4819      	ldr	r0, [pc, #100]	; (80027b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8002750:	f7fe f919 	bl	8000986 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002754:	e026      	b.n	80027a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4413      	add	r3, r2
 800275c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800275e:	4b14      	ldr	r3, [pc, #80]	; (80027b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	429a      	cmp	r2, r3
 800276c:	d209      	bcs.n	8002782 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800276e:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	3304      	adds	r3, #4
 8002778:	4619      	mov	r1, r3
 800277a:	4610      	mov	r0, r2
 800277c:	f7fe f927 	bl	80009ce <vListInsert>
}
 8002780:	e010      	b.n	80027a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002782:	4b0e      	ldr	r3, [pc, #56]	; (80027bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	4b0a      	ldr	r3, [pc, #40]	; (80027b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	3304      	adds	r3, #4
 800278c:	4619      	mov	r1, r3
 800278e:	4610      	mov	r0, r2
 8002790:	f7fe f91d 	bl	80009ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002794:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	429a      	cmp	r2, r3
 800279c:	d202      	bcs.n	80027a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800279e:	4a08      	ldr	r2, [pc, #32]	; (80027c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	6013      	str	r3, [r2, #0]
}
 80027a4:	bf00      	nop
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	20000c40 	.word	0x20000c40
 80027b0:	20000768 	.word	0x20000768
 80027b4:	20000c28 	.word	0x20000c28
 80027b8:	20000bf8 	.word	0x20000bf8
 80027bc:	20000bf4 	.word	0x20000bf4
 80027c0:	20000c5c 	.word	0x20000c5c

080027c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08a      	sub	sp, #40	; 0x28
 80027c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80027ce:	f000 fb07 	bl	8002de0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80027d2:	4b1c      	ldr	r3, [pc, #112]	; (8002844 <xTimerCreateTimerTask+0x80>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d021      	beq.n	800281e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80027e2:	1d3a      	adds	r2, r7, #4
 80027e4:	f107 0108 	add.w	r1, r7, #8
 80027e8:	f107 030c 	add.w	r3, r7, #12
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fe f883 	bl	80008f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	9202      	str	r2, [sp, #8]
 80027fa:	9301      	str	r3, [sp, #4]
 80027fc:	2302      	movs	r3, #2
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	2300      	movs	r3, #0
 8002802:	460a      	mov	r2, r1
 8002804:	4910      	ldr	r1, [pc, #64]	; (8002848 <xTimerCreateTimerTask+0x84>)
 8002806:	4811      	ldr	r0, [pc, #68]	; (800284c <xTimerCreateTimerTask+0x88>)
 8002808:	f7fe ffe0 	bl	80017cc <xTaskCreateStatic>
 800280c:	4603      	mov	r3, r0
 800280e:	4a10      	ldr	r2, [pc, #64]	; (8002850 <xTimerCreateTimerTask+0x8c>)
 8002810:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8002812:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <xTimerCreateTimerTask+0x8c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800281a:	2301      	movs	r3, #1
 800281c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10a      	bne.n	800283a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8002824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002828:	f383 8811 	msr	BASEPRI, r3
 800282c:	f3bf 8f6f 	isb	sy
 8002830:	f3bf 8f4f 	dsb	sy
 8002834:	613b      	str	r3, [r7, #16]
}
 8002836:	bf00      	nop
 8002838:	e7fe      	b.n	8002838 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800283a:	697b      	ldr	r3, [r7, #20]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20000c98 	.word	0x20000c98
 8002848:	08003814 	.word	0x08003814
 800284c:	08002989 	.word	0x08002989
 8002850:	20000c9c 	.word	0x20000c9c

08002854 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b08a      	sub	sp, #40	; 0x28
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
 8002860:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002862:	2300      	movs	r3, #0
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10a      	bne.n	8002882 <xTimerGenericCommand+0x2e>
	__asm volatile
 800286c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002870:	f383 8811 	msr	BASEPRI, r3
 8002874:	f3bf 8f6f 	isb	sy
 8002878:	f3bf 8f4f 	dsb	sy
 800287c:	623b      	str	r3, [r7, #32]
}
 800287e:	bf00      	nop
 8002880:	e7fe      	b.n	8002880 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002882:	4b1a      	ldr	r3, [pc, #104]	; (80028ec <xTimerGenericCommand+0x98>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d02a      	beq.n	80028e0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	2b05      	cmp	r3, #5
 800289a:	dc18      	bgt.n	80028ce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800289c:	f7ff fdb4 	bl	8002408 <xTaskGetSchedulerState>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d109      	bne.n	80028ba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80028a6:	4b11      	ldr	r3, [pc, #68]	; (80028ec <xTimerGenericCommand+0x98>)
 80028a8:	6818      	ldr	r0, [r3, #0]
 80028aa:	f107 0110 	add.w	r1, r7, #16
 80028ae:	2300      	movs	r3, #0
 80028b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028b2:	f7fe f9f3 	bl	8000c9c <xQueueGenericSend>
 80028b6:	6278      	str	r0, [r7, #36]	; 0x24
 80028b8:	e012      	b.n	80028e0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80028ba:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <xTimerGenericCommand+0x98>)
 80028bc:	6818      	ldr	r0, [r3, #0]
 80028be:	f107 0110 	add.w	r1, r7, #16
 80028c2:	2300      	movs	r3, #0
 80028c4:	2200      	movs	r2, #0
 80028c6:	f7fe f9e9 	bl	8000c9c <xQueueGenericSend>
 80028ca:	6278      	str	r0, [r7, #36]	; 0x24
 80028cc:	e008      	b.n	80028e0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80028ce:	4b07      	ldr	r3, [pc, #28]	; (80028ec <xTimerGenericCommand+0x98>)
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	f107 0110 	add.w	r1, r7, #16
 80028d6:	2300      	movs	r3, #0
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	f7fe fadd 	bl	8000e98 <xQueueGenericSendFromISR>
 80028de:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3728      	adds	r7, #40	; 0x28
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	20000c98 	.word	0x20000c98

080028f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af02      	add	r7, sp, #8
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028fa:	4b22      	ldr	r3, [pc, #136]	; (8002984 <prvProcessExpiredTimer+0x94>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	3304      	adds	r3, #4
 8002908:	4618      	mov	r0, r3
 800290a:	f7fe f899 	bl	8000a40 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d022      	beq.n	8002962 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	699a      	ldr	r2, [r3, #24]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	18d1      	adds	r1, r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	6978      	ldr	r0, [r7, #20]
 800292a:	f000 f8d1 	bl	8002ad0 <prvInsertTimerInActiveList>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d01f      	beq.n	8002974 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002934:	2300      	movs	r3, #0
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	2300      	movs	r3, #0
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	2100      	movs	r1, #0
 800293e:	6978      	ldr	r0, [r7, #20]
 8002940:	f7ff ff88 	bl	8002854 <xTimerGenericCommand>
 8002944:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d113      	bne.n	8002974 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800294c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002950:	f383 8811 	msr	BASEPRI, r3
 8002954:	f3bf 8f6f 	isb	sy
 8002958:	f3bf 8f4f 	dsb	sy
 800295c:	60fb      	str	r3, [r7, #12]
}
 800295e:	bf00      	nop
 8002960:	e7fe      	b.n	8002960 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002968:	f023 0301 	bic.w	r3, r3, #1
 800296c:	b2da      	uxtb	r2, r3
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	6978      	ldr	r0, [r7, #20]
 800297a:	4798      	blx	r3
}
 800297c:	bf00      	nop
 800297e:	3718      	adds	r7, #24
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	20000c90 	.word	0x20000c90

08002988 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002990:	f107 0308 	add.w	r3, r7, #8
 8002994:	4618      	mov	r0, r3
 8002996:	f000 f857 	bl	8002a48 <prvGetNextExpireTime>
 800299a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	4619      	mov	r1, r3
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 f803 	bl	80029ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80029a6:	f000 f8d5 	bl	8002b54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80029aa:	e7f1      	b.n	8002990 <prvTimerTask+0x8>

080029ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80029b6:	f7ff f945 	bl	8001c44 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80029ba:	f107 0308 	add.w	r3, r7, #8
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 f866 	bl	8002a90 <prvSampleTimeNow>
 80029c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d130      	bne.n	8002a2e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10a      	bne.n	80029e8 <prvProcessTimerOrBlockTask+0x3c>
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d806      	bhi.n	80029e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80029da:	f7ff f941 	bl	8001c60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80029de:	68f9      	ldr	r1, [r7, #12]
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7ff ff85 	bl	80028f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80029e6:	e024      	b.n	8002a32 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d008      	beq.n	8002a00 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80029ee:	4b13      	ldr	r3, [pc, #76]	; (8002a3c <prvProcessTimerOrBlockTask+0x90>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <prvProcessTimerOrBlockTask+0x50>
 80029f8:	2301      	movs	r3, #1
 80029fa:	e000      	b.n	80029fe <prvProcessTimerOrBlockTask+0x52>
 80029fc:	2300      	movs	r3, #0
 80029fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002a00:	4b0f      	ldr	r3, [pc, #60]	; (8002a40 <prvProcessTimerOrBlockTask+0x94>)
 8002a02:	6818      	ldr	r0, [r3, #0]
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	f7fe fea9 	bl	8001764 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002a12:	f7ff f925 	bl	8001c60 <xTaskResumeAll>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10a      	bne.n	8002a32 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002a1c:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <prvProcessTimerOrBlockTask+0x98>)
 8002a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	f3bf 8f4f 	dsb	sy
 8002a28:	f3bf 8f6f 	isb	sy
}
 8002a2c:	e001      	b.n	8002a32 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002a2e:	f7ff f917 	bl	8001c60 <xTaskResumeAll>
}
 8002a32:	bf00      	nop
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	20000c94 	.word	0x20000c94
 8002a40:	20000c98 	.word	0x20000c98
 8002a44:	e000ed04 	.word	0xe000ed04

08002a48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002a50:	4b0e      	ldr	r3, [pc, #56]	; (8002a8c <prvGetNextExpireTime+0x44>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <prvGetNextExpireTime+0x16>
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	e000      	b.n	8002a60 <prvGetNextExpireTime+0x18>
 8002a5e:	2200      	movs	r2, #0
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d105      	bne.n	8002a78 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002a6c:	4b07      	ldr	r3, [pc, #28]	; (8002a8c <prvGetNextExpireTime+0x44>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	e001      	b.n	8002a7c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	20000c90 	.word	0x20000c90

08002a90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002a98:	f7ff f980 	bl	8001d9c <xTaskGetTickCount>
 8002a9c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002a9e:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <prvSampleTimeNow+0x3c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d205      	bcs.n	8002ab4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002aa8:	f000 f936 	bl	8002d18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	e002      	b.n	8002aba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002aba:	4a04      	ldr	r2, [pc, #16]	; (8002acc <prvSampleTimeNow+0x3c>)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20000ca0 	.word	0x20000ca0

08002ad0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
 8002adc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d812      	bhi.n	8002b1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	1ad2      	subs	r2, r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d302      	bcc.n	8002b0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002b04:	2301      	movs	r3, #1
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	e01b      	b.n	8002b42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002b0a:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <prvInsertTimerInActiveList+0x7c>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	3304      	adds	r3, #4
 8002b12:	4619      	mov	r1, r3
 8002b14:	4610      	mov	r0, r2
 8002b16:	f7fd ff5a 	bl	80009ce <vListInsert>
 8002b1a:	e012      	b.n	8002b42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d206      	bcs.n	8002b32 <prvInsertTimerInActiveList+0x62>
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d302      	bcc.n	8002b32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	e007      	b.n	8002b42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002b32:	4b07      	ldr	r3, [pc, #28]	; (8002b50 <prvInsertTimerInActiveList+0x80>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	3304      	adds	r3, #4
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	f7fd ff46 	bl	80009ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002b42:	697b      	ldr	r3, [r7, #20]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	20000c94 	.word	0x20000c94
 8002b50:	20000c90 	.word	0x20000c90

08002b54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08e      	sub	sp, #56	; 0x38
 8002b58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002b5a:	e0ca      	b.n	8002cf2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	da18      	bge.n	8002b94 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8002b62:	1d3b      	adds	r3, r7, #4
 8002b64:	3304      	adds	r3, #4
 8002b66:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8002b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10a      	bne.n	8002b84 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8002b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b72:	f383 8811 	msr	BASEPRI, r3
 8002b76:	f3bf 8f6f 	isb	sy
 8002b7a:	f3bf 8f4f 	dsb	sy
 8002b7e:	61fb      	str	r3, [r7, #28]
}
 8002b80:	bf00      	nop
 8002b82:	e7fe      	b.n	8002b82 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8002b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b8a:	6850      	ldr	r0, [r2, #4]
 8002b8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b8e:	6892      	ldr	r2, [r2, #8]
 8002b90:	4611      	mov	r1, r2
 8002b92:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f2c0 80aa 	blt.w	8002cf0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d004      	beq.n	8002bb2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002baa:	3304      	adds	r3, #4
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7fd ff47 	bl	8000a40 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002bb2:	463b      	mov	r3, r7
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff ff6b 	bl	8002a90 <prvSampleTimeNow>
 8002bba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b09      	cmp	r3, #9
 8002bc0:	f200 8097 	bhi.w	8002cf2 <prvProcessReceivedCommands+0x19e>
 8002bc4:	a201      	add	r2, pc, #4	; (adr r2, 8002bcc <prvProcessReceivedCommands+0x78>)
 8002bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bca:	bf00      	nop
 8002bcc:	08002bf5 	.word	0x08002bf5
 8002bd0:	08002bf5 	.word	0x08002bf5
 8002bd4:	08002bf5 	.word	0x08002bf5
 8002bd8:	08002c69 	.word	0x08002c69
 8002bdc:	08002c7d 	.word	0x08002c7d
 8002be0:	08002cc7 	.word	0x08002cc7
 8002be4:	08002bf5 	.word	0x08002bf5
 8002be8:	08002bf5 	.word	0x08002bf5
 8002bec:	08002c69 	.word	0x08002c69
 8002bf0:	08002c7d 	.word	0x08002c7d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002bfa:	f043 0301 	orr.w	r3, r3, #1
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	18d1      	adds	r1, r2, r3
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c14:	f7ff ff5c 	bl	8002ad0 <prvInsertTimerInActiveList>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d069      	beq.n	8002cf2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d05e      	beq.n	8002cf2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	441a      	add	r2, r3
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	2300      	movs	r3, #0
 8002c42:	2100      	movs	r1, #0
 8002c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c46:	f7ff fe05 	bl	8002854 <xTimerGenericCommand>
 8002c4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d14f      	bne.n	8002cf2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8002c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c56:	f383 8811 	msr	BASEPRI, r3
 8002c5a:	f3bf 8f6f 	isb	sy
 8002c5e:	f3bf 8f4f 	dsb	sy
 8002c62:	61bb      	str	r3, [r7, #24]
}
 8002c64:	bf00      	nop
 8002c66:	e7fe      	b.n	8002c66 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c6e:	f023 0301 	bic.w	r3, r3, #1
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8002c7a:	e03a      	b.n	8002cf2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c82:	f043 0301 	orr.w	r3, r3, #1
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c92:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10a      	bne.n	8002cb2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8002c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca0:	f383 8811 	msr	BASEPRI, r3
 8002ca4:	f3bf 8f6f 	isb	sy
 8002ca8:	f3bf 8f4f 	dsb	sy
 8002cac:	617b      	str	r3, [r7, #20]
}
 8002cae:	bf00      	nop
 8002cb0:	e7fe      	b.n	8002cb0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb4:	699a      	ldr	r2, [r3, #24]
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	18d1      	adds	r1, r2, r3
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cc0:	f7ff ff06 	bl	8002ad0 <prvInsertTimerInActiveList>
					break;
 8002cc4:	e015      	b.n	8002cf2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d103      	bne.n	8002cdc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8002cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cd6:	f000 fbdb 	bl	8003490 <vPortFree>
 8002cda:	e00a      	b.n	8002cf2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ce2:	f023 0301 	bic.w	r3, r3, #1
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002cee:	e000      	b.n	8002cf2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8002cf0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002cf2:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <prvProcessReceivedCommands+0x1c0>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	1d39      	adds	r1, r7, #4
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fe f9f4 	bl	80010e8 <xQueueReceive>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f47f af2a 	bne.w	8002b5c <prvProcessReceivedCommands+0x8>
	}
}
 8002d08:	bf00      	nop
 8002d0a:	bf00      	nop
 8002d0c:	3730      	adds	r7, #48	; 0x30
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20000c98 	.word	0x20000c98

08002d18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b088      	sub	sp, #32
 8002d1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002d1e:	e048      	b.n	8002db2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002d20:	4b2d      	ldr	r3, [pc, #180]	; (8002dd8 <prvSwitchTimerLists+0xc0>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d2a:	4b2b      	ldr	r3, [pc, #172]	; (8002dd8 <prvSwitchTimerLists+0xc0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	3304      	adds	r3, #4
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fd fe81 	bl	8000a40 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d02e      	beq.n	8002db2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d90e      	bls.n	8002d84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002d72:	4b19      	ldr	r3, [pc, #100]	; (8002dd8 <prvSwitchTimerLists+0xc0>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	3304      	adds	r3, #4
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4610      	mov	r0, r2
 8002d7e:	f7fd fe26 	bl	80009ce <vListInsert>
 8002d82:	e016      	b.n	8002db2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002d84:	2300      	movs	r3, #0
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	2300      	movs	r3, #0
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f7ff fd60 	bl	8002854 <xTimerGenericCommand>
 8002d94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10a      	bne.n	8002db2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8002d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da0:	f383 8811 	msr	BASEPRI, r3
 8002da4:	f3bf 8f6f 	isb	sy
 8002da8:	f3bf 8f4f 	dsb	sy
 8002dac:	603b      	str	r3, [r7, #0]
}
 8002dae:	bf00      	nop
 8002db0:	e7fe      	b.n	8002db0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002db2:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <prvSwitchTimerLists+0xc0>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1b1      	bne.n	8002d20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002dbc:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <prvSwitchTimerLists+0xc0>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8002dc2:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <prvSwitchTimerLists+0xc4>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a04      	ldr	r2, [pc, #16]	; (8002dd8 <prvSwitchTimerLists+0xc0>)
 8002dc8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002dca:	4a04      	ldr	r2, [pc, #16]	; (8002ddc <prvSwitchTimerLists+0xc4>)
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	6013      	str	r3, [r2, #0]
}
 8002dd0:	bf00      	nop
 8002dd2:	3718      	adds	r7, #24
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	20000c90 	.word	0x20000c90
 8002ddc:	20000c94 	.word	0x20000c94

08002de0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002de6:	f000 f965 	bl	80030b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002dea:	4b15      	ldr	r3, [pc, #84]	; (8002e40 <prvCheckForValidListAndQueue+0x60>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d120      	bne.n	8002e34 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8002df2:	4814      	ldr	r0, [pc, #80]	; (8002e44 <prvCheckForValidListAndQueue+0x64>)
 8002df4:	f7fd fd9a 	bl	800092c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002df8:	4813      	ldr	r0, [pc, #76]	; (8002e48 <prvCheckForValidListAndQueue+0x68>)
 8002dfa:	f7fd fd97 	bl	800092c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002dfe:	4b13      	ldr	r3, [pc, #76]	; (8002e4c <prvCheckForValidListAndQueue+0x6c>)
 8002e00:	4a10      	ldr	r2, [pc, #64]	; (8002e44 <prvCheckForValidListAndQueue+0x64>)
 8002e02:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002e04:	4b12      	ldr	r3, [pc, #72]	; (8002e50 <prvCheckForValidListAndQueue+0x70>)
 8002e06:	4a10      	ldr	r2, [pc, #64]	; (8002e48 <prvCheckForValidListAndQueue+0x68>)
 8002e08:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	4b11      	ldr	r3, [pc, #68]	; (8002e54 <prvCheckForValidListAndQueue+0x74>)
 8002e10:	4a11      	ldr	r2, [pc, #68]	; (8002e58 <prvCheckForValidListAndQueue+0x78>)
 8002e12:	2110      	movs	r1, #16
 8002e14:	200a      	movs	r0, #10
 8002e16:	f7fd fea5 	bl	8000b64 <xQueueGenericCreateStatic>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	4a08      	ldr	r2, [pc, #32]	; (8002e40 <prvCheckForValidListAndQueue+0x60>)
 8002e1e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002e20:	4b07      	ldr	r3, [pc, #28]	; (8002e40 <prvCheckForValidListAndQueue+0x60>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d005      	beq.n	8002e34 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002e28:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <prvCheckForValidListAndQueue+0x60>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	490b      	ldr	r1, [pc, #44]	; (8002e5c <prvCheckForValidListAndQueue+0x7c>)
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe fc6e 	bl	8001710 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002e34:	f000 f96e 	bl	8003114 <vPortExitCritical>
}
 8002e38:	bf00      	nop
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20000c98 	.word	0x20000c98
 8002e44:	20000c68 	.word	0x20000c68
 8002e48:	20000c7c 	.word	0x20000c7c
 8002e4c:	20000c90 	.word	0x20000c90
 8002e50:	20000c94 	.word	0x20000c94
 8002e54:	20000d44 	.word	0x20000d44
 8002e58:	20000ca4 	.word	0x20000ca4
 8002e5c:	0800381c 	.word	0x0800381c

08002e60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	3b04      	subs	r3, #4
 8002e70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	3b04      	subs	r3, #4
 8002e7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	f023 0201 	bic.w	r2, r3, #1
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	3b04      	subs	r3, #4
 8002e8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002e90:	4a0c      	ldr	r2, [pc, #48]	; (8002ec4 <pxPortInitialiseStack+0x64>)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	3b14      	subs	r3, #20
 8002e9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	3b04      	subs	r3, #4
 8002ea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f06f 0202 	mvn.w	r2, #2
 8002eae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	3b20      	subs	r3, #32
 8002eb4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	08002ec9 	.word	0x08002ec9

08002ec8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002ed2:	4b12      	ldr	r3, [pc, #72]	; (8002f1c <prvTaskExitError+0x54>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eda:	d00a      	beq.n	8002ef2 <prvTaskExitError+0x2a>
	__asm volatile
 8002edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee0:	f383 8811 	msr	BASEPRI, r3
 8002ee4:	f3bf 8f6f 	isb	sy
 8002ee8:	f3bf 8f4f 	dsb	sy
 8002eec:	60fb      	str	r3, [r7, #12]
}
 8002eee:	bf00      	nop
 8002ef0:	e7fe      	b.n	8002ef0 <prvTaskExitError+0x28>
	__asm volatile
 8002ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef6:	f383 8811 	msr	BASEPRI, r3
 8002efa:	f3bf 8f6f 	isb	sy
 8002efe:	f3bf 8f4f 	dsb	sy
 8002f02:	60bb      	str	r3, [r7, #8]
}
 8002f04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002f06:	bf00      	nop
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0fc      	beq.n	8002f08 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002f0e:	bf00      	nop
 8002f10:	bf00      	nop
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	20000004 	.word	0x20000004

08002f20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002f20:	4b07      	ldr	r3, [pc, #28]	; (8002f40 <pxCurrentTCBConst2>)
 8002f22:	6819      	ldr	r1, [r3, #0]
 8002f24:	6808      	ldr	r0, [r1, #0]
 8002f26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f2a:	f380 8809 	msr	PSP, r0
 8002f2e:	f3bf 8f6f 	isb	sy
 8002f32:	f04f 0000 	mov.w	r0, #0
 8002f36:	f380 8811 	msr	BASEPRI, r0
 8002f3a:	4770      	bx	lr
 8002f3c:	f3af 8000 	nop.w

08002f40 <pxCurrentTCBConst2>:
 8002f40:	20000768 	.word	0x20000768
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002f44:	bf00      	nop
 8002f46:	bf00      	nop

08002f48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002f48:	4808      	ldr	r0, [pc, #32]	; (8002f6c <prvPortStartFirstTask+0x24>)
 8002f4a:	6800      	ldr	r0, [r0, #0]
 8002f4c:	6800      	ldr	r0, [r0, #0]
 8002f4e:	f380 8808 	msr	MSP, r0
 8002f52:	f04f 0000 	mov.w	r0, #0
 8002f56:	f380 8814 	msr	CONTROL, r0
 8002f5a:	b662      	cpsie	i
 8002f5c:	b661      	cpsie	f
 8002f5e:	f3bf 8f4f 	dsb	sy
 8002f62:	f3bf 8f6f 	isb	sy
 8002f66:	df00      	svc	0
 8002f68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002f6a:	bf00      	nop
 8002f6c:	e000ed08 	.word	0xe000ed08

08002f70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002f76:	4b46      	ldr	r3, [pc, #280]	; (8003090 <xPortStartScheduler+0x120>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a46      	ldr	r2, [pc, #280]	; (8003094 <xPortStartScheduler+0x124>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d10a      	bne.n	8002f96 <xPortStartScheduler+0x26>
	__asm volatile
 8002f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f84:	f383 8811 	msr	BASEPRI, r3
 8002f88:	f3bf 8f6f 	isb	sy
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	613b      	str	r3, [r7, #16]
}
 8002f92:	bf00      	nop
 8002f94:	e7fe      	b.n	8002f94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002f96:	4b3e      	ldr	r3, [pc, #248]	; (8003090 <xPortStartScheduler+0x120>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a3f      	ldr	r2, [pc, #252]	; (8003098 <xPortStartScheduler+0x128>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d10a      	bne.n	8002fb6 <xPortStartScheduler+0x46>
	__asm volatile
 8002fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa4:	f383 8811 	msr	BASEPRI, r3
 8002fa8:	f3bf 8f6f 	isb	sy
 8002fac:	f3bf 8f4f 	dsb	sy
 8002fb0:	60fb      	str	r3, [r7, #12]
}
 8002fb2:	bf00      	nop
 8002fb4:	e7fe      	b.n	8002fb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002fb6:	4b39      	ldr	r3, [pc, #228]	; (800309c <xPortStartScheduler+0x12c>)
 8002fb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	22ff      	movs	r2, #255	; 0xff
 8002fc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002fd0:	78fb      	ldrb	r3, [r7, #3]
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	4b31      	ldr	r3, [pc, #196]	; (80030a0 <xPortStartScheduler+0x130>)
 8002fdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002fde:	4b31      	ldr	r3, [pc, #196]	; (80030a4 <xPortStartScheduler+0x134>)
 8002fe0:	2207      	movs	r2, #7
 8002fe2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002fe4:	e009      	b.n	8002ffa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002fe6:	4b2f      	ldr	r3, [pc, #188]	; (80030a4 <xPortStartScheduler+0x134>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	4a2d      	ldr	r2, [pc, #180]	; (80030a4 <xPortStartScheduler+0x134>)
 8002fee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ffa:	78fb      	ldrb	r3, [r7, #3]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003002:	2b80      	cmp	r3, #128	; 0x80
 8003004:	d0ef      	beq.n	8002fe6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003006:	4b27      	ldr	r3, [pc, #156]	; (80030a4 <xPortStartScheduler+0x134>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f1c3 0307 	rsb	r3, r3, #7
 800300e:	2b04      	cmp	r3, #4
 8003010:	d00a      	beq.n	8003028 <xPortStartScheduler+0xb8>
	__asm volatile
 8003012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003016:	f383 8811 	msr	BASEPRI, r3
 800301a:	f3bf 8f6f 	isb	sy
 800301e:	f3bf 8f4f 	dsb	sy
 8003022:	60bb      	str	r3, [r7, #8]
}
 8003024:	bf00      	nop
 8003026:	e7fe      	b.n	8003026 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003028:	4b1e      	ldr	r3, [pc, #120]	; (80030a4 <xPortStartScheduler+0x134>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	021b      	lsls	r3, r3, #8
 800302e:	4a1d      	ldr	r2, [pc, #116]	; (80030a4 <xPortStartScheduler+0x134>)
 8003030:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003032:	4b1c      	ldr	r3, [pc, #112]	; (80030a4 <xPortStartScheduler+0x134>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800303a:	4a1a      	ldr	r2, [pc, #104]	; (80030a4 <xPortStartScheduler+0x134>)
 800303c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	b2da      	uxtb	r2, r3
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003046:	4b18      	ldr	r3, [pc, #96]	; (80030a8 <xPortStartScheduler+0x138>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a17      	ldr	r2, [pc, #92]	; (80030a8 <xPortStartScheduler+0x138>)
 800304c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003050:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003052:	4b15      	ldr	r3, [pc, #84]	; (80030a8 <xPortStartScheduler+0x138>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a14      	ldr	r2, [pc, #80]	; (80030a8 <xPortStartScheduler+0x138>)
 8003058:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800305c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800305e:	f000 f8dd 	bl	800321c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003062:	4b12      	ldr	r3, [pc, #72]	; (80030ac <xPortStartScheduler+0x13c>)
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003068:	f000 f8fc 	bl	8003264 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800306c:	4b10      	ldr	r3, [pc, #64]	; (80030b0 <xPortStartScheduler+0x140>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a0f      	ldr	r2, [pc, #60]	; (80030b0 <xPortStartScheduler+0x140>)
 8003072:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003076:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003078:	f7ff ff66 	bl	8002f48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800307c:	f7fe ff58 	bl	8001f30 <vTaskSwitchContext>
	prvTaskExitError();
 8003080:	f7ff ff22 	bl	8002ec8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	e000ed00 	.word	0xe000ed00
 8003094:	410fc271 	.word	0x410fc271
 8003098:	410fc270 	.word	0x410fc270
 800309c:	e000e400 	.word	0xe000e400
 80030a0:	20000d94 	.word	0x20000d94
 80030a4:	20000d98 	.word	0x20000d98
 80030a8:	e000ed20 	.word	0xe000ed20
 80030ac:	20000004 	.word	0x20000004
 80030b0:	e000ef34 	.word	0xe000ef34

080030b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
	__asm volatile
 80030ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030be:	f383 8811 	msr	BASEPRI, r3
 80030c2:	f3bf 8f6f 	isb	sy
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	607b      	str	r3, [r7, #4]
}
 80030cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80030ce:	4b0f      	ldr	r3, [pc, #60]	; (800310c <vPortEnterCritical+0x58>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	3301      	adds	r3, #1
 80030d4:	4a0d      	ldr	r2, [pc, #52]	; (800310c <vPortEnterCritical+0x58>)
 80030d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80030d8:	4b0c      	ldr	r3, [pc, #48]	; (800310c <vPortEnterCritical+0x58>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d10f      	bne.n	8003100 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80030e0:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <vPortEnterCritical+0x5c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00a      	beq.n	8003100 <vPortEnterCritical+0x4c>
	__asm volatile
 80030ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ee:	f383 8811 	msr	BASEPRI, r3
 80030f2:	f3bf 8f6f 	isb	sy
 80030f6:	f3bf 8f4f 	dsb	sy
 80030fa:	603b      	str	r3, [r7, #0]
}
 80030fc:	bf00      	nop
 80030fe:	e7fe      	b.n	80030fe <vPortEnterCritical+0x4a>
	}
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	20000004 	.word	0x20000004
 8003110:	e000ed04 	.word	0xe000ed04

08003114 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800311a:	4b12      	ldr	r3, [pc, #72]	; (8003164 <vPortExitCritical+0x50>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10a      	bne.n	8003138 <vPortExitCritical+0x24>
	__asm volatile
 8003122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003126:	f383 8811 	msr	BASEPRI, r3
 800312a:	f3bf 8f6f 	isb	sy
 800312e:	f3bf 8f4f 	dsb	sy
 8003132:	607b      	str	r3, [r7, #4]
}
 8003134:	bf00      	nop
 8003136:	e7fe      	b.n	8003136 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003138:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <vPortExitCritical+0x50>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	3b01      	subs	r3, #1
 800313e:	4a09      	ldr	r2, [pc, #36]	; (8003164 <vPortExitCritical+0x50>)
 8003140:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003142:	4b08      	ldr	r3, [pc, #32]	; (8003164 <vPortExitCritical+0x50>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d105      	bne.n	8003156 <vPortExitCritical+0x42>
 800314a:	2300      	movs	r3, #0
 800314c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	f383 8811 	msr	BASEPRI, r3
}
 8003154:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	20000004 	.word	0x20000004
	...

08003170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003170:	f3ef 8009 	mrs	r0, PSP
 8003174:	f3bf 8f6f 	isb	sy
 8003178:	4b15      	ldr	r3, [pc, #84]	; (80031d0 <pxCurrentTCBConst>)
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	f01e 0f10 	tst.w	lr, #16
 8003180:	bf08      	it	eq
 8003182:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003186:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800318a:	6010      	str	r0, [r2, #0]
 800318c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003190:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003194:	f380 8811 	msr	BASEPRI, r0
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	f3bf 8f6f 	isb	sy
 80031a0:	f7fe fec6 	bl	8001f30 <vTaskSwitchContext>
 80031a4:	f04f 0000 	mov.w	r0, #0
 80031a8:	f380 8811 	msr	BASEPRI, r0
 80031ac:	bc09      	pop	{r0, r3}
 80031ae:	6819      	ldr	r1, [r3, #0]
 80031b0:	6808      	ldr	r0, [r1, #0]
 80031b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031b6:	f01e 0f10 	tst.w	lr, #16
 80031ba:	bf08      	it	eq
 80031bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80031c0:	f380 8809 	msr	PSP, r0
 80031c4:	f3bf 8f6f 	isb	sy
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	f3af 8000 	nop.w

080031d0 <pxCurrentTCBConst>:
 80031d0:	20000768 	.word	0x20000768
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80031d4:	bf00      	nop
 80031d6:	bf00      	nop

080031d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
	__asm volatile
 80031de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e2:	f383 8811 	msr	BASEPRI, r3
 80031e6:	f3bf 8f6f 	isb	sy
 80031ea:	f3bf 8f4f 	dsb	sy
 80031ee:	607b      	str	r3, [r7, #4]
}
 80031f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80031f2:	f7fe fde3 	bl	8001dbc <xTaskIncrementTick>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80031fc:	4b06      	ldr	r3, [pc, #24]	; (8003218 <xPortSysTickHandler+0x40>)
 80031fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	2300      	movs	r3, #0
 8003206:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	f383 8811 	msr	BASEPRI, r3
}
 800320e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003210:	bf00      	nop
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	e000ed04 	.word	0xe000ed04

0800321c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003220:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <vPortSetupTimerInterrupt+0x34>)
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003226:	4b0b      	ldr	r3, [pc, #44]	; (8003254 <vPortSetupTimerInterrupt+0x38>)
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800322c:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <vPortSetupTimerInterrupt+0x3c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a0a      	ldr	r2, [pc, #40]	; (800325c <vPortSetupTimerInterrupt+0x40>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	099b      	lsrs	r3, r3, #6
 8003238:	4a09      	ldr	r2, [pc, #36]	; (8003260 <vPortSetupTimerInterrupt+0x44>)
 800323a:	3b01      	subs	r3, #1
 800323c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800323e:	4b04      	ldr	r3, [pc, #16]	; (8003250 <vPortSetupTimerInterrupt+0x34>)
 8003240:	2207      	movs	r2, #7
 8003242:	601a      	str	r2, [r3, #0]
}
 8003244:	bf00      	nop
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	e000e010 	.word	0xe000e010
 8003254:	e000e018 	.word	0xe000e018
 8003258:	20000000 	.word	0x20000000
 800325c:	10624dd3 	.word	0x10624dd3
 8003260:	e000e014 	.word	0xe000e014

08003264 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003264:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003274 <vPortEnableVFP+0x10>
 8003268:	6801      	ldr	r1, [r0, #0]
 800326a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800326e:	6001      	str	r1, [r0, #0]
 8003270:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003272:	bf00      	nop
 8003274:	e000ed88 	.word	0xe000ed88

08003278 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800327e:	f3ef 8305 	mrs	r3, IPSR
 8003282:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2b0f      	cmp	r3, #15
 8003288:	d914      	bls.n	80032b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800328a:	4a17      	ldr	r2, [pc, #92]	; (80032e8 <vPortValidateInterruptPriority+0x70>)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4413      	add	r3, r2
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003294:	4b15      	ldr	r3, [pc, #84]	; (80032ec <vPortValidateInterruptPriority+0x74>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	7afa      	ldrb	r2, [r7, #11]
 800329a:	429a      	cmp	r2, r3
 800329c:	d20a      	bcs.n	80032b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800329e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a2:	f383 8811 	msr	BASEPRI, r3
 80032a6:	f3bf 8f6f 	isb	sy
 80032aa:	f3bf 8f4f 	dsb	sy
 80032ae:	607b      	str	r3, [r7, #4]
}
 80032b0:	bf00      	nop
 80032b2:	e7fe      	b.n	80032b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80032b4:	4b0e      	ldr	r3, [pc, #56]	; (80032f0 <vPortValidateInterruptPriority+0x78>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80032bc:	4b0d      	ldr	r3, [pc, #52]	; (80032f4 <vPortValidateInterruptPriority+0x7c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d90a      	bls.n	80032da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80032c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c8:	f383 8811 	msr	BASEPRI, r3
 80032cc:	f3bf 8f6f 	isb	sy
 80032d0:	f3bf 8f4f 	dsb	sy
 80032d4:	603b      	str	r3, [r7, #0]
}
 80032d6:	bf00      	nop
 80032d8:	e7fe      	b.n	80032d8 <vPortValidateInterruptPriority+0x60>
	}
 80032da:	bf00      	nop
 80032dc:	3714      	adds	r7, #20
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	e000e3f0 	.word	0xe000e3f0
 80032ec:	20000d94 	.word	0x20000d94
 80032f0:	e000ed0c 	.word	0xe000ed0c
 80032f4:	20000d98 	.word	0x20000d98

080032f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08a      	sub	sp, #40	; 0x28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003300:	2300      	movs	r3, #0
 8003302:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003304:	f7fe fc9e 	bl	8001c44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003308:	4b5b      	ldr	r3, [pc, #364]	; (8003478 <pvPortMalloc+0x180>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003310:	f000 f920 	bl	8003554 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003314:	4b59      	ldr	r3, [pc, #356]	; (800347c <pvPortMalloc+0x184>)
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4013      	ands	r3, r2
 800331c:	2b00      	cmp	r3, #0
 800331e:	f040 8093 	bne.w	8003448 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d01d      	beq.n	8003364 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003328:	2208      	movs	r2, #8
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4413      	add	r3, r2
 800332e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	2b00      	cmp	r3, #0
 8003338:	d014      	beq.n	8003364 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f023 0307 	bic.w	r3, r3, #7
 8003340:	3308      	adds	r3, #8
 8003342:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00a      	beq.n	8003364 <pvPortMalloc+0x6c>
	__asm volatile
 800334e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003352:	f383 8811 	msr	BASEPRI, r3
 8003356:	f3bf 8f6f 	isb	sy
 800335a:	f3bf 8f4f 	dsb	sy
 800335e:	617b      	str	r3, [r7, #20]
}
 8003360:	bf00      	nop
 8003362:	e7fe      	b.n	8003362 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d06e      	beq.n	8003448 <pvPortMalloc+0x150>
 800336a:	4b45      	ldr	r3, [pc, #276]	; (8003480 <pvPortMalloc+0x188>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	429a      	cmp	r2, r3
 8003372:	d869      	bhi.n	8003448 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003374:	4b43      	ldr	r3, [pc, #268]	; (8003484 <pvPortMalloc+0x18c>)
 8003376:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003378:	4b42      	ldr	r3, [pc, #264]	; (8003484 <pvPortMalloc+0x18c>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800337e:	e004      	b.n	800338a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003382:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	429a      	cmp	r2, r3
 8003392:	d903      	bls.n	800339c <pvPortMalloc+0xa4>
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1f1      	bne.n	8003380 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800339c:	4b36      	ldr	r3, [pc, #216]	; (8003478 <pvPortMalloc+0x180>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d050      	beq.n	8003448 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2208      	movs	r2, #8
 80033ac:	4413      	add	r3, r2
 80033ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	1ad2      	subs	r2, r2, r3
 80033c0:	2308      	movs	r3, #8
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d91f      	bls.n	8003408 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80033c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4413      	add	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	f003 0307 	and.w	r3, r3, #7
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <pvPortMalloc+0xf8>
	__asm volatile
 80033da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033de:	f383 8811 	msr	BASEPRI, r3
 80033e2:	f3bf 8f6f 	isb	sy
 80033e6:	f3bf 8f4f 	dsb	sy
 80033ea:	613b      	str	r3, [r7, #16]
}
 80033ec:	bf00      	nop
 80033ee:	e7fe      	b.n	80033ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	1ad2      	subs	r2, r2, r3
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003402:	69b8      	ldr	r0, [r7, #24]
 8003404:	f000 f908 	bl	8003618 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003408:	4b1d      	ldr	r3, [pc, #116]	; (8003480 <pvPortMalloc+0x188>)
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	4a1b      	ldr	r2, [pc, #108]	; (8003480 <pvPortMalloc+0x188>)
 8003414:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003416:	4b1a      	ldr	r3, [pc, #104]	; (8003480 <pvPortMalloc+0x188>)
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	4b1b      	ldr	r3, [pc, #108]	; (8003488 <pvPortMalloc+0x190>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	429a      	cmp	r2, r3
 8003420:	d203      	bcs.n	800342a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003422:	4b17      	ldr	r3, [pc, #92]	; (8003480 <pvPortMalloc+0x188>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a18      	ldr	r2, [pc, #96]	; (8003488 <pvPortMalloc+0x190>)
 8003428:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	4b13      	ldr	r3, [pc, #76]	; (800347c <pvPortMalloc+0x184>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	431a      	orrs	r2, r3
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800343e:	4b13      	ldr	r3, [pc, #76]	; (800348c <pvPortMalloc+0x194>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	3301      	adds	r3, #1
 8003444:	4a11      	ldr	r2, [pc, #68]	; (800348c <pvPortMalloc+0x194>)
 8003446:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003448:	f7fe fc0a 	bl	8001c60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <pvPortMalloc+0x174>
	__asm volatile
 8003456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345a:	f383 8811 	msr	BASEPRI, r3
 800345e:	f3bf 8f6f 	isb	sy
 8003462:	f3bf 8f4f 	dsb	sy
 8003466:	60fb      	str	r3, [r7, #12]
}
 8003468:	bf00      	nop
 800346a:	e7fe      	b.n	800346a <pvPortMalloc+0x172>
	return pvReturn;
 800346c:	69fb      	ldr	r3, [r7, #28]
}
 800346e:	4618      	mov	r0, r3
 8003470:	3728      	adds	r7, #40	; 0x28
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	200049a4 	.word	0x200049a4
 800347c:	200049b8 	.word	0x200049b8
 8003480:	200049a8 	.word	0x200049a8
 8003484:	2000499c 	.word	0x2000499c
 8003488:	200049ac 	.word	0x200049ac
 800348c:	200049b0 	.word	0x200049b0

08003490 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d04d      	beq.n	800353e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80034a2:	2308      	movs	r3, #8
 80034a4:	425b      	negs	r3, r3
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	4413      	add	r3, r2
 80034aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	4b24      	ldr	r3, [pc, #144]	; (8003548 <vPortFree+0xb8>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4013      	ands	r3, r2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10a      	bne.n	80034d4 <vPortFree+0x44>
	__asm volatile
 80034be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c2:	f383 8811 	msr	BASEPRI, r3
 80034c6:	f3bf 8f6f 	isb	sy
 80034ca:	f3bf 8f4f 	dsb	sy
 80034ce:	60fb      	str	r3, [r7, #12]
}
 80034d0:	bf00      	nop
 80034d2:	e7fe      	b.n	80034d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00a      	beq.n	80034f2 <vPortFree+0x62>
	__asm volatile
 80034dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e0:	f383 8811 	msr	BASEPRI, r3
 80034e4:	f3bf 8f6f 	isb	sy
 80034e8:	f3bf 8f4f 	dsb	sy
 80034ec:	60bb      	str	r3, [r7, #8]
}
 80034ee:	bf00      	nop
 80034f0:	e7fe      	b.n	80034f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	4b14      	ldr	r3, [pc, #80]	; (8003548 <vPortFree+0xb8>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4013      	ands	r3, r2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d01e      	beq.n	800353e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d11a      	bne.n	800353e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	4b0e      	ldr	r3, [pc, #56]	; (8003548 <vPortFree+0xb8>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	43db      	mvns	r3, r3
 8003512:	401a      	ands	r2, r3
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003518:	f7fe fb94 	bl	8001c44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	4b0a      	ldr	r3, [pc, #40]	; (800354c <vPortFree+0xbc>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4413      	add	r3, r2
 8003526:	4a09      	ldr	r2, [pc, #36]	; (800354c <vPortFree+0xbc>)
 8003528:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800352a:	6938      	ldr	r0, [r7, #16]
 800352c:	f000 f874 	bl	8003618 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003530:	4b07      	ldr	r3, [pc, #28]	; (8003550 <vPortFree+0xc0>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	3301      	adds	r3, #1
 8003536:	4a06      	ldr	r2, [pc, #24]	; (8003550 <vPortFree+0xc0>)
 8003538:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800353a:	f7fe fb91 	bl	8001c60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800353e:	bf00      	nop
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	200049b8 	.word	0x200049b8
 800354c:	200049a8 	.word	0x200049a8
 8003550:	200049b4 	.word	0x200049b4

08003554 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800355a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800355e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003560:	4b27      	ldr	r3, [pc, #156]	; (8003600 <prvHeapInit+0xac>)
 8003562:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00c      	beq.n	8003588 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	3307      	adds	r3, #7
 8003572:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0307 	bic.w	r3, r3, #7
 800357a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	4a1f      	ldr	r2, [pc, #124]	; (8003600 <prvHeapInit+0xac>)
 8003584:	4413      	add	r3, r2
 8003586:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800358c:	4a1d      	ldr	r2, [pc, #116]	; (8003604 <prvHeapInit+0xb0>)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003592:	4b1c      	ldr	r3, [pc, #112]	; (8003604 <prvHeapInit+0xb0>)
 8003594:	2200      	movs	r2, #0
 8003596:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	4413      	add	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80035a0:	2208      	movs	r2, #8
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	1a9b      	subs	r3, r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f023 0307 	bic.w	r3, r3, #7
 80035ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4a15      	ldr	r2, [pc, #84]	; (8003608 <prvHeapInit+0xb4>)
 80035b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80035b6:	4b14      	ldr	r3, [pc, #80]	; (8003608 <prvHeapInit+0xb4>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2200      	movs	r2, #0
 80035bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80035be:	4b12      	ldr	r3, [pc, #72]	; (8003608 <prvHeapInit+0xb4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2200      	movs	r2, #0
 80035c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	1ad2      	subs	r2, r2, r3
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80035d4:	4b0c      	ldr	r3, [pc, #48]	; (8003608 <prvHeapInit+0xb4>)
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	4a0a      	ldr	r2, [pc, #40]	; (800360c <prvHeapInit+0xb8>)
 80035e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	4a09      	ldr	r2, [pc, #36]	; (8003610 <prvHeapInit+0xbc>)
 80035ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80035ec:	4b09      	ldr	r3, [pc, #36]	; (8003614 <prvHeapInit+0xc0>)
 80035ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80035f2:	601a      	str	r2, [r3, #0]
}
 80035f4:	bf00      	nop
 80035f6:	3714      	adds	r7, #20
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	20000d9c 	.word	0x20000d9c
 8003604:	2000499c 	.word	0x2000499c
 8003608:	200049a4 	.word	0x200049a4
 800360c:	200049ac 	.word	0x200049ac
 8003610:	200049a8 	.word	0x200049a8
 8003614:	200049b8 	.word	0x200049b8

08003618 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003620:	4b28      	ldr	r3, [pc, #160]	; (80036c4 <prvInsertBlockIntoFreeList+0xac>)
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	e002      	b.n	800362c <prvInsertBlockIntoFreeList+0x14>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	429a      	cmp	r2, r3
 8003634:	d8f7      	bhi.n	8003626 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	4413      	add	r3, r2
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	429a      	cmp	r2, r3
 8003646:	d108      	bne.n	800365a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	441a      	add	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	441a      	add	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	429a      	cmp	r2, r3
 800366c:	d118      	bne.n	80036a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	4b15      	ldr	r3, [pc, #84]	; (80036c8 <prvInsertBlockIntoFreeList+0xb0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	429a      	cmp	r2, r3
 8003678:	d00d      	beq.n	8003696 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	441a      	add	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	e008      	b.n	80036a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003696:	4b0c      	ldr	r3, [pc, #48]	; (80036c8 <prvInsertBlockIntoFreeList+0xb0>)
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	e003      	b.n	80036a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d002      	beq.n	80036b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036b6:	bf00      	nop
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	2000499c 	.word	0x2000499c
 80036c8:	200049a4 	.word	0x200049a4

080036cc <__libc_init_array>:
 80036cc:	b570      	push	{r4, r5, r6, lr}
 80036ce:	4d0d      	ldr	r5, [pc, #52]	; (8003704 <__libc_init_array+0x38>)
 80036d0:	4c0d      	ldr	r4, [pc, #52]	; (8003708 <__libc_init_array+0x3c>)
 80036d2:	1b64      	subs	r4, r4, r5
 80036d4:	10a4      	asrs	r4, r4, #2
 80036d6:	2600      	movs	r6, #0
 80036d8:	42a6      	cmp	r6, r4
 80036da:	d109      	bne.n	80036f0 <__libc_init_array+0x24>
 80036dc:	4d0b      	ldr	r5, [pc, #44]	; (800370c <__libc_init_array+0x40>)
 80036de:	4c0c      	ldr	r4, [pc, #48]	; (8003710 <__libc_init_array+0x44>)
 80036e0:	f000 f82e 	bl	8003740 <_init>
 80036e4:	1b64      	subs	r4, r4, r5
 80036e6:	10a4      	asrs	r4, r4, #2
 80036e8:	2600      	movs	r6, #0
 80036ea:	42a6      	cmp	r6, r4
 80036ec:	d105      	bne.n	80036fa <__libc_init_array+0x2e>
 80036ee:	bd70      	pop	{r4, r5, r6, pc}
 80036f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80036f4:	4798      	blx	r3
 80036f6:	3601      	adds	r6, #1
 80036f8:	e7ee      	b.n	80036d8 <__libc_init_array+0xc>
 80036fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80036fe:	4798      	blx	r3
 8003700:	3601      	adds	r6, #1
 8003702:	e7f2      	b.n	80036ea <__libc_init_array+0x1e>
 8003704:	08003824 	.word	0x08003824
 8003708:	08003824 	.word	0x08003824
 800370c:	08003824 	.word	0x08003824
 8003710:	08003828 	.word	0x08003828

08003714 <memcpy>:
 8003714:	440a      	add	r2, r1
 8003716:	4291      	cmp	r1, r2
 8003718:	f100 33ff 	add.w	r3, r0, #4294967295
 800371c:	d100      	bne.n	8003720 <memcpy+0xc>
 800371e:	4770      	bx	lr
 8003720:	b510      	push	{r4, lr}
 8003722:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003726:	f803 4f01 	strb.w	r4, [r3, #1]!
 800372a:	4291      	cmp	r1, r2
 800372c:	d1f9      	bne.n	8003722 <memcpy+0xe>
 800372e:	bd10      	pop	{r4, pc}

08003730 <memset>:
 8003730:	4402      	add	r2, r0
 8003732:	4603      	mov	r3, r0
 8003734:	4293      	cmp	r3, r2
 8003736:	d100      	bne.n	800373a <memset+0xa>
 8003738:	4770      	bx	lr
 800373a:	f803 1b01 	strb.w	r1, [r3], #1
 800373e:	e7f9      	b.n	8003734 <memset+0x4>

08003740 <_init>:
 8003740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003742:	bf00      	nop
 8003744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003746:	bc08      	pop	{r3}
 8003748:	469e      	mov	lr, r3
 800374a:	4770      	bx	lr

0800374c <_fini>:
 800374c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800374e:	bf00      	nop
 8003750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003752:	bc08      	pop	{r3}
 8003754:	469e      	mov	lr, r3
 8003756:	4770      	bx	lr
