
27_FreeRtos_Mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004014  08004014  00014014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800409c  0800409c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  0800409c  0800409c  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800409c  0800409c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800409c  0800409c  0001409c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040a0  080040a0  000140a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080040a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          000049c8  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004a34  20004a34  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000105a1  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000229b  00000000  00000000  0003063d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee8  00000000  00000000  000328d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000de0  00000000  00000000  000337c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002882  00000000  00000000  000345a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fe0e  00000000  00000000  00036e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2ad9  00000000  00000000  00046c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00119709  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000424c  00000000  00000000  0011975c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003ffc 	.word	0x08003ffc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08003ffc 	.word	0x08003ffc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <led_init>:
#include "stm32f4xx.h"
#include "led.h"

void led_init()
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIODEN;
 8000274:	4b11      	ldr	r3, [pc, #68]	; (80002bc <led_init+0x4c>)
 8000276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000278:	4a10      	ldr	r2, [pc, #64]	; (80002bc <led_init+0x4c>)
 800027a:	f043 0308 	orr.w	r3, r3, #8
 800027e:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOD->MODER |= (1U<<24);
 8000280:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <led_init+0x50>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a0e      	ldr	r2, [pc, #56]	; (80002c0 <led_init+0x50>)
 8000286:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800028a:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1U<<25);
 800028c:	4b0c      	ldr	r3, [pc, #48]	; (80002c0 <led_init+0x50>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a0b      	ldr	r2, [pc, #44]	; (80002c0 <led_init+0x50>)
 8000292:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000296:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1U<<26);
 8000298:	4b09      	ldr	r3, [pc, #36]	; (80002c0 <led_init+0x50>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a08      	ldr	r2, [pc, #32]	; (80002c0 <led_init+0x50>)
 800029e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80002a2:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1U<<27);
 80002a4:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <led_init+0x50>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a05      	ldr	r2, [pc, #20]	; (80002c0 <led_init+0x50>)
 80002aa:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80002ae:	6013      	str	r3, [r2, #0]
}
 80002b0:	bf00      	nop
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	40023800 	.word	0x40023800
 80002c0:	40020c00 	.word	0x40020c00

080002c4 <Task1Function>:
#include "uart.h"

SemaphoreHandle_t UartMutex;

void Task1Function(void* argument)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b090      	sub	sp, #64	; 0x40
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
	char message[50];
	int i= 0;
 80002cc:	2300      	movs	r3, #0
 80002ce:	63fb      	str	r3, [r7, #60]	; 0x3c

	for(;;)
	{
		sprintf(message, "Task1 is running: %d\r\n", i);
 80002d0:	f107 0308 	add.w	r3, r7, #8
 80002d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80002d6:	490f      	ldr	r1, [pc, #60]	; (8000314 <Task1Function+0x50>)
 80002d8:	4618      	mov	r0, r3
 80002da:	f003 fa2f 	bl	800373c <siprintf>
		xSemaphoreTake(UartMutex, portMAX_DELAY);
 80002de:	4b0e      	ldr	r3, [pc, #56]	; (8000318 <Task1Function+0x54>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	f04f 31ff 	mov.w	r1, #4294967295
 80002e6:	4618      	mov	r0, r3
 80002e8:	f000 ffd4 	bl	8001294 <xQueueSemaphoreTake>
		uart2_write_string(message);
 80002ec:	f107 0308 	add.w	r3, r7, #8
 80002f0:	4618      	mov	r0, r3
 80002f2:	f000 f93b 	bl	800056c <uart2_write_string>
		xSemaphoreGive(UartMutex);
 80002f6:	4b08      	ldr	r3, [pc, #32]	; (8000318 <Task1Function+0x54>)
 80002f8:	6818      	ldr	r0, [r3, #0]
 80002fa:	2300      	movs	r3, #0
 80002fc:	2200      	movs	r2, #0
 80002fe:	2100      	movs	r1, #0
 8000300:	f000 fd4e 	bl	8000da0 <xQueueGenericSend>
		i++;
 8000304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000306:	3301      	adds	r3, #1
 8000308:	63fb      	str	r3, [r7, #60]	; 0x3c
		vTaskDelay(pdMS_TO_TICKS(1000));
 800030a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800030e:	f001 fbf5 	bl	8001afc <vTaskDelay>
	{
 8000312:	e7dd      	b.n	80002d0 <Task1Function+0xc>
 8000314:	08004014 	.word	0x08004014
 8000318:	20000088 	.word	0x20000088

0800031c <Task2Function>:
	}
}

void Task2Function(void * argument)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b090      	sub	sp, #64	; 0x40
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
	char message[50];
	int i = 0;
 8000324:	2300      	movs	r3, #0
 8000326:	63fb      	str	r3, [r7, #60]	; 0x3c

	for(;;)
	{
		sprintf(message, "Task2 is running: %d\r\n", i);
 8000328:	f107 0308 	add.w	r3, r7, #8
 800032c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800032e:	490f      	ldr	r1, [pc, #60]	; (800036c <Task2Function+0x50>)
 8000330:	4618      	mov	r0, r3
 8000332:	f003 fa03 	bl	800373c <siprintf>
		xSemaphoreTake(UartMutex, portMAX_DELAY);
 8000336:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <Task2Function+0x54>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f04f 31ff 	mov.w	r1, #4294967295
 800033e:	4618      	mov	r0, r3
 8000340:	f000 ffa8 	bl	8001294 <xQueueSemaphoreTake>
		uart2_write_string(message);
 8000344:	f107 0308 	add.w	r3, r7, #8
 8000348:	4618      	mov	r0, r3
 800034a:	f000 f90f 	bl	800056c <uart2_write_string>
		xSemaphoreGive(UartMutex);
 800034e:	4b08      	ldr	r3, [pc, #32]	; (8000370 <Task2Function+0x54>)
 8000350:	6818      	ldr	r0, [r3, #0]
 8000352:	2300      	movs	r3, #0
 8000354:	2200      	movs	r2, #0
 8000356:	2100      	movs	r1, #0
 8000358:	f000 fd22 	bl	8000da0 <xQueueGenericSend>
		i++;
 800035c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800035e:	3301      	adds	r3, #1
 8000360:	63fb      	str	r3, [r7, #60]	; 0x3c
		vTaskDelay(1000);
 8000362:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000366:	f001 fbc9 	bl	8001afc <vTaskDelay>
	{
 800036a:	e7dd      	b.n	8000328 <Task2Function+0xc>
 800036c:	0800402c 	.word	0x0800402c
 8000370:	20000088 	.word	0x20000088

08000374 <main>:
	}
}

int main(int argc, char **argv)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b084      	sub	sp, #16
 8000378:	af02      	add	r7, sp, #8
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	6039      	str	r1, [r7, #0]
	uart2_tx_init();
 800037e:	f000 f891 	bl	80004a4 <uart2_tx_init>
	led_init();
 8000382:	f7ff ff75 	bl	8000270 <led_init>

	UartMutex = xSemaphoreCreateMutex();
 8000386:	2001      	movs	r0, #1
 8000388:	f000 fcf1 	bl	8000d6e <xQueueCreateMutex>
 800038c:	4603      	mov	r3, r0
 800038e:	4a0c      	ldr	r2, [pc, #48]	; (80003c0 <main+0x4c>)
 8000390:	6013      	str	r3, [r2, #0]

	xTaskCreate(Task1Function, "Task1", configMINIMAL_STACK_SIZE, NULL, 0, NULL);
 8000392:	2300      	movs	r3, #0
 8000394:	9301      	str	r3, [sp, #4]
 8000396:	2300      	movs	r3, #0
 8000398:	9300      	str	r3, [sp, #0]
 800039a:	2300      	movs	r3, #0
 800039c:	2280      	movs	r2, #128	; 0x80
 800039e:	4909      	ldr	r1, [pc, #36]	; (80003c4 <main+0x50>)
 80003a0:	4809      	ldr	r0, [pc, #36]	; (80003c8 <main+0x54>)
 80003a2:	f001 fa66 	bl	8001872 <xTaskCreate>
	xTaskCreate(Task2Function, "Task2", configMINIMAL_STACK_SIZE, NULL, 0, NULL);
 80003a6:	2300      	movs	r3, #0
 80003a8:	9301      	str	r3, [sp, #4]
 80003aa:	2300      	movs	r3, #0
 80003ac:	9300      	str	r3, [sp, #0]
 80003ae:	2300      	movs	r3, #0
 80003b0:	2280      	movs	r2, #128	; 0x80
 80003b2:	4906      	ldr	r1, [pc, #24]	; (80003cc <main+0x58>)
 80003b4:	4806      	ldr	r0, [pc, #24]	; (80003d0 <main+0x5c>)
 80003b6:	f001 fa5c 	bl	8001872 <xTaskCreate>

	vTaskStartScheduler();
 80003ba:	f001 fbd3 	bl	8001b64 <vTaskStartScheduler>


	while(1)
 80003be:	e7fe      	b.n	80003be <main+0x4a>
 80003c0:	20000088 	.word	0x20000088
 80003c4:	08004044 	.word	0x08004044
 80003c8:	080002c5 	.word	0x080002c5
 80003cc:	0800404c 	.word	0x0800404c
 80003d0:	0800031d 	.word	0x0800031d

080003d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003d8:	e7fe      	b.n	80003d8 <NMI_Handler+0x4>

080003da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003da:	b480      	push	{r7}
 80003dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003de:	e7fe      	b.n	80003de <HardFault_Handler+0x4>

080003e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003e4:	e7fe      	b.n	80003e4 <MemManage_Handler+0x4>

080003e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003e6:	b480      	push	{r7}
 80003e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003ea:	e7fe      	b.n	80003ea <BusFault_Handler+0x4>

080003ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003f0:	e7fe      	b.n	80003f0 <UsageFault_Handler+0x4>

080003f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003f2:	b480      	push	{r7}
 80003f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003f6:	bf00      	nop
 80003f8:	46bd      	mov	sp, r7
 80003fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fe:	4770      	bx	lr

08000400 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000404:	4802      	ldr	r0, [pc, #8]	; (8000410 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000406:	f000 f914 	bl	8000632 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	2000008c 	.word	0x2000008c

08000414 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b086      	sub	sp, #24
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800041c:	4a14      	ldr	r2, [pc, #80]	; (8000470 <_sbrk+0x5c>)
 800041e:	4b15      	ldr	r3, [pc, #84]	; (8000474 <_sbrk+0x60>)
 8000420:	1ad3      	subs	r3, r2, r3
 8000422:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000424:	697b      	ldr	r3, [r7, #20]
 8000426:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000428:	4b13      	ldr	r3, [pc, #76]	; (8000478 <_sbrk+0x64>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d102      	bne.n	8000436 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000430:	4b11      	ldr	r3, [pc, #68]	; (8000478 <_sbrk+0x64>)
 8000432:	4a12      	ldr	r2, [pc, #72]	; (800047c <_sbrk+0x68>)
 8000434:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000436:	4b10      	ldr	r3, [pc, #64]	; (8000478 <_sbrk+0x64>)
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4413      	add	r3, r2
 800043e:	693a      	ldr	r2, [r7, #16]
 8000440:	429a      	cmp	r2, r3
 8000442:	d207      	bcs.n	8000454 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000444:	f003 f93a 	bl	80036bc <__errno>
 8000448:	4603      	mov	r3, r0
 800044a:	220c      	movs	r2, #12
 800044c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800044e:	f04f 33ff 	mov.w	r3, #4294967295
 8000452:	e009      	b.n	8000468 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000454:	4b08      	ldr	r3, [pc, #32]	; (8000478 <_sbrk+0x64>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800045a:	4b07      	ldr	r3, [pc, #28]	; (8000478 <_sbrk+0x64>)
 800045c:	681a      	ldr	r2, [r3, #0]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4413      	add	r3, r2
 8000462:	4a05      	ldr	r2, [pc, #20]	; (8000478 <_sbrk+0x64>)
 8000464:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000466:	68fb      	ldr	r3, [r7, #12]
}
 8000468:	4618      	mov	r0, r3
 800046a:	3718      	adds	r7, #24
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	20020000 	.word	0x20020000
 8000474:	00000400 	.word	0x00000400
 8000478:	200000d4 	.word	0x200000d4
 800047c:	20004a38 	.word	0x20004a38

08000480 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <SystemInit+0x20>)
 8000486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800048a:	4a05      	ldr	r2, [pc, #20]	; (80004a0 <SystemInit+0x20>)
 800048c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000490:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	e000ed00 	.word	0xe000ed00

080004a4 <uart2_tx_init>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t Baudrate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t Baudrate);


void uart2_tx_init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOAEN;
 80004a8:	4b20      	ldr	r3, [pc, #128]	; (800052c <uart2_tx_init+0x88>)
 80004aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ac:	4a1f      	ldr	r2, [pc, #124]	; (800052c <uart2_tx_init+0x88>)
 80004ae:	f043 0301 	orr.w	r3, r3, #1
 80004b2:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER &=~(1U<<4);
 80004b4:	4b1e      	ldr	r3, [pc, #120]	; (8000530 <uart2_tx_init+0x8c>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a1d      	ldr	r2, [pc, #116]	; (8000530 <uart2_tx_init+0x8c>)
 80004ba:	f023 0310 	bic.w	r3, r3, #16
 80004be:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80004c0:	4b1b      	ldr	r3, [pc, #108]	; (8000530 <uart2_tx_init+0x8c>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a1a      	ldr	r2, [pc, #104]	; (8000530 <uart2_tx_init+0x8c>)
 80004c6:	f043 0320 	orr.w	r3, r3, #32
 80004ca:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] |= (1U<<8);
 80004cc:	4b18      	ldr	r3, [pc, #96]	; (8000530 <uart2_tx_init+0x8c>)
 80004ce:	6a1b      	ldr	r3, [r3, #32]
 80004d0:	4a17      	ldr	r2, [pc, #92]	; (8000530 <uart2_tx_init+0x8c>)
 80004d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004d6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 80004d8:	4b15      	ldr	r3, [pc, #84]	; (8000530 <uart2_tx_init+0x8c>)
 80004da:	6a1b      	ldr	r3, [r3, #32]
 80004dc:	4a14      	ldr	r2, [pc, #80]	; (8000530 <uart2_tx_init+0x8c>)
 80004de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 80004e4:	4b12      	ldr	r3, [pc, #72]	; (8000530 <uart2_tx_init+0x8c>)
 80004e6:	6a1b      	ldr	r3, [r3, #32]
 80004e8:	4a11      	ldr	r2, [pc, #68]	; (8000530 <uart2_tx_init+0x8c>)
 80004ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004ee:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 80004f0:	4b0f      	ldr	r3, [pc, #60]	; (8000530 <uart2_tx_init+0x8c>)
 80004f2:	6a1b      	ldr	r3, [r3, #32]
 80004f4:	4a0e      	ldr	r2, [pc, #56]	; (8000530 <uart2_tx_init+0x8c>)
 80004f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80004fa:	6213      	str	r3, [r2, #32]

	RCC->APB1ENR |= UART2EN;
 80004fc:	4b0b      	ldr	r3, [pc, #44]	; (800052c <uart2_tx_init+0x88>)
 80004fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000500:	4a0a      	ldr	r2, [pc, #40]	; (800052c <uart2_tx_init+0x88>)
 8000502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000506:	6413      	str	r3, [r2, #64]	; 0x40

	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000508:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800050c:	4909      	ldr	r1, [pc, #36]	; (8000534 <uart2_tx_init+0x90>)
 800050e:	480a      	ldr	r0, [pc, #40]	; (8000538 <uart2_tx_init+0x94>)
 8000510:	f000 f841 	bl	8000596 <uart_set_baudrate>

	USART2->CR1 = CR1_TE;
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <uart2_tx_init+0x94>)
 8000516:	2208      	movs	r2, #8
 8000518:	60da      	str	r2, [r3, #12]

	USART2->CR1 |= CR1_UE;
 800051a:	4b07      	ldr	r3, [pc, #28]	; (8000538 <uart2_tx_init+0x94>)
 800051c:	68db      	ldr	r3, [r3, #12]
 800051e:	4a06      	ldr	r2, [pc, #24]	; (8000538 <uart2_tx_init+0x94>)
 8000520:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000524:	60d3      	str	r3, [r2, #12]
}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40023800 	.word	0x40023800
 8000530:	40020000 	.word	0x40020000
 8000534:	00f42400 	.word	0x00f42400
 8000538:	40004400 	.word	0x40004400

0800053c <uart2_write_char>:

void uart2_write_char(char ch)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	71fb      	strb	r3, [r7, #7]
	while(! (USART2->SR & SR_TXE)) { }
 8000546:	bf00      	nop
 8000548:	4b07      	ldr	r3, [pc, #28]	; (8000568 <uart2_write_char+0x2c>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000550:	2b00      	cmp	r3, #0
 8000552:	d0f9      	beq.n	8000548 <uart2_write_char+0xc>

	USART2->DR = (ch & 0xFF);
 8000554:	4a04      	ldr	r2, [pc, #16]	; (8000568 <uart2_write_char+0x2c>)
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	6053      	str	r3, [r2, #4]
}
 800055a:	bf00      	nop
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	40004400 	.word	0x40004400

0800056c <uart2_write_string>:

void uart2_write_string(const char* str) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000574:	e006      	b.n	8000584 <uart2_write_string+0x18>
    	uart2_write_char(*str++);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	1c5a      	adds	r2, r3, #1
 800057a:	607a      	str	r2, [r7, #4]
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff ffdc 	bl	800053c <uart2_write_char>
    while (*str) {
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d1f4      	bne.n	8000576 <uart2_write_string+0xa>
    }
}
 800058c:	bf00      	nop
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}

08000596 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t Baudrate)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	b084      	sub	sp, #16
 800059a:	af00      	add	r7, sp, #0
 800059c:	60f8      	str	r0, [r7, #12]
 800059e:	60b9      	str	r1, [r7, #8]
 80005a0:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, Baudrate);
 80005a2:	6879      	ldr	r1, [r7, #4]
 80005a4:	68b8      	ldr	r0, [r7, #8]
 80005a6:	f000 f808 	bl	80005ba <compute_uart_bd>
 80005aa:	4603      	mov	r3, r0
 80005ac:	461a      	mov	r2, r3
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	609a      	str	r2, [r3, #8]
}
 80005b2:	bf00      	nop
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}

080005ba <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t Baudrate)
{
 80005ba:	b480      	push	{r7}
 80005bc:	b083      	sub	sp, #12
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
 80005c2:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (Baudrate/2U))/Baudrate);
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	085a      	lsrs	r2, r3, #1
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	441a      	add	r2, r3
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d2:	b29b      	uxth	r3, r3

}
 80005d4:	4618      	mov	r0, r3
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80005e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000618 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005e4:	480d      	ldr	r0, [pc, #52]	; (800061c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80005e6:	490e      	ldr	r1, [pc, #56]	; (8000620 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80005e8:	4a0e      	ldr	r2, [pc, #56]	; (8000624 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005ec:	e002      	b.n	80005f4 <LoopCopyDataInit>

080005ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f2:	3304      	adds	r3, #4

080005f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f8:	d3f9      	bcc.n	80005ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fa:	4a0b      	ldr	r2, [pc, #44]	; (8000628 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80005fc:	4c0b      	ldr	r4, [pc, #44]	; (800062c <LoopFillZerobss+0x26>)
  movs r3, #0
 80005fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000600:	e001      	b.n	8000606 <LoopFillZerobss>

08000602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000604:	3204      	adds	r2, #4

08000606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000608:	d3fb      	bcc.n	8000602 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800060a:	f7ff ff39 	bl	8000480 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800060e:	f003 f85b 	bl	80036c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000612:	f7ff feaf 	bl	8000374 <main>
  bx  lr    
 8000616:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000618:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800061c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000620:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000624:	080040a4 	.word	0x080040a4
  ldr r2, =_sbss
 8000628:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800062c:	20004a34 	.word	0x20004a34

08000630 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000630:	e7fe      	b.n	8000630 <ADC_IRQHandler>

08000632 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	b082      	sub	sp, #8
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	691b      	ldr	r3, [r3, #16]
 8000640:	f003 0302 	and.w	r3, r3, #2
 8000644:	2b02      	cmp	r3, #2
 8000646:	d122      	bne.n	800068e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	68db      	ldr	r3, [r3, #12]
 800064e:	f003 0302 	and.w	r3, r3, #2
 8000652:	2b02      	cmp	r3, #2
 8000654:	d11b      	bne.n	800068e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f06f 0202 	mvn.w	r2, #2
 800065e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2201      	movs	r2, #1
 8000664:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f003 0303 	and.w	r3, r3, #3
 8000670:	2b00      	cmp	r3, #0
 8000672:	d003      	beq.n	800067c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f000 f8f8 	bl	800086a <HAL_TIM_IC_CaptureCallback>
 800067a:	e005      	b.n	8000688 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f000 f8ea 	bl	8000856 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f000 f8fb 	bl	800087e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2200      	movs	r2, #0
 800068c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	691b      	ldr	r3, [r3, #16]
 8000694:	f003 0304 	and.w	r3, r3, #4
 8000698:	2b04      	cmp	r3, #4
 800069a:	d122      	bne.n	80006e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	68db      	ldr	r3, [r3, #12]
 80006a2:	f003 0304 	and.w	r3, r3, #4
 80006a6:	2b04      	cmp	r3, #4
 80006a8:	d11b      	bne.n	80006e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f06f 0204 	mvn.w	r2, #4
 80006b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2202      	movs	r2, #2
 80006b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d003      	beq.n	80006d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f000 f8ce 	bl	800086a <HAL_TIM_IC_CaptureCallback>
 80006ce:	e005      	b.n	80006dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f000 f8c0 	bl	8000856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f000 f8d1 	bl	800087e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2200      	movs	r2, #0
 80006e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	691b      	ldr	r3, [r3, #16]
 80006e8:	f003 0308 	and.w	r3, r3, #8
 80006ec:	2b08      	cmp	r3, #8
 80006ee:	d122      	bne.n	8000736 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	68db      	ldr	r3, [r3, #12]
 80006f6:	f003 0308 	and.w	r3, r3, #8
 80006fa:	2b08      	cmp	r3, #8
 80006fc:	d11b      	bne.n	8000736 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f06f 0208 	mvn.w	r2, #8
 8000706:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2204      	movs	r2, #4
 800070c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	69db      	ldr	r3, [r3, #28]
 8000714:	f003 0303 	and.w	r3, r3, #3
 8000718:	2b00      	cmp	r3, #0
 800071a:	d003      	beq.n	8000724 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f000 f8a4 	bl	800086a <HAL_TIM_IC_CaptureCallback>
 8000722:	e005      	b.n	8000730 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f000 f896 	bl	8000856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f000 f8a7 	bl	800087e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2200      	movs	r2, #0
 8000734:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	691b      	ldr	r3, [r3, #16]
 800073c:	f003 0310 	and.w	r3, r3, #16
 8000740:	2b10      	cmp	r3, #16
 8000742:	d122      	bne.n	800078a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	68db      	ldr	r3, [r3, #12]
 800074a:	f003 0310 	and.w	r3, r3, #16
 800074e:	2b10      	cmp	r3, #16
 8000750:	d11b      	bne.n	800078a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f06f 0210 	mvn.w	r2, #16
 800075a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2208      	movs	r2, #8
 8000760:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	69db      	ldr	r3, [r3, #28]
 8000768:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800076c:	2b00      	cmp	r3, #0
 800076e:	d003      	beq.n	8000778 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f000 f87a 	bl	800086a <HAL_TIM_IC_CaptureCallback>
 8000776:	e005      	b.n	8000784 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f000 f86c 	bl	8000856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f000 f87d 	bl	800087e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2200      	movs	r2, #0
 8000788:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	691b      	ldr	r3, [r3, #16]
 8000790:	f003 0301 	and.w	r3, r3, #1
 8000794:	2b01      	cmp	r3, #1
 8000796:	d10e      	bne.n	80007b6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	68db      	ldr	r3, [r3, #12]
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d107      	bne.n	80007b6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f06f 0201 	mvn.w	r2, #1
 80007ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f000 f846 	bl	8000842 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	691b      	ldr	r3, [r3, #16]
 80007bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c0:	2b80      	cmp	r3, #128	; 0x80
 80007c2:	d10e      	bne.n	80007e2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	68db      	ldr	r3, [r3, #12]
 80007ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ce:	2b80      	cmp	r3, #128	; 0x80
 80007d0:	d107      	bne.n	80007e2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80007da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f000 f86c 	bl	80008ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	691b      	ldr	r3, [r3, #16]
 80007e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ec:	2b40      	cmp	r3, #64	; 0x40
 80007ee:	d10e      	bne.n	800080e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	68db      	ldr	r3, [r3, #12]
 80007f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007fa:	2b40      	cmp	r3, #64	; 0x40
 80007fc:	d107      	bne.n	800080e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f000 f842 	bl	8000892 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	691b      	ldr	r3, [r3, #16]
 8000814:	f003 0320 	and.w	r3, r3, #32
 8000818:	2b20      	cmp	r3, #32
 800081a:	d10e      	bne.n	800083a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	68db      	ldr	r3, [r3, #12]
 8000822:	f003 0320 	and.w	r3, r3, #32
 8000826:	2b20      	cmp	r3, #32
 8000828:	d107      	bne.n	800083a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f06f 0220 	mvn.w	r2, #32
 8000832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f000 f836 	bl	80008a6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000842:	b480      	push	{r7}
 8000844:	b083      	sub	sp, #12
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000856:	b480      	push	{r7}
 8000858:	b083      	sub	sp, #12
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800086a:	b480      	push	{r7}
 800086c:	b083      	sub	sp, #12
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800087e:	b480      	push	{r7}
 8000880:	b083      	sub	sp, #12
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8000892:	b480      	push	{r7}
 8000894:	b083      	sub	sp, #12
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80008a6:	b480      	push	{r7}
 80008a8:	b083      	sub	sp, #12
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr

080008ba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80008ba:	b480      	push	{r7}
 80008bc:	b083      	sub	sp, #12
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
	...

080008d0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80008d4:	4b05      	ldr	r3, [pc, #20]	; (80008ec <SysTick_Handler+0x1c>)
 80008d6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80008d8:	f001 fd8c 	bl	80023f4 <xTaskGetSchedulerState>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d001      	beq.n	80008e6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80008e2:	f002 fc71 	bl	80031c8 <xPortSysTickHandler>
  }
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	e000e010 	.word	0xe000e010

080008f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	4a07      	ldr	r2, [pc, #28]	; (800091c <vApplicationGetIdleTaskMemory+0x2c>)
 8000900:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	4a06      	ldr	r2, [pc, #24]	; (8000920 <vApplicationGetIdleTaskMemory+0x30>)
 8000906:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2280      	movs	r2, #128	; 0x80
 800090c:	601a      	str	r2, [r3, #0]
}
 800090e:	bf00      	nop
 8000910:	3714      	adds	r7, #20
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	200000d8 	.word	0x200000d8
 8000920:	20000134 	.word	0x20000134

08000924 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	4a07      	ldr	r2, [pc, #28]	; (8000950 <vApplicationGetTimerTaskMemory+0x2c>)
 8000934:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	4a06      	ldr	r2, [pc, #24]	; (8000954 <vApplicationGetTimerTaskMemory+0x30>)
 800093a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000942:	601a      	str	r2, [r3, #0]
}
 8000944:	bf00      	nop
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	20000334 	.word	0x20000334
 8000954:	20000390 	.word	0x20000390

08000958 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f103 0208 	add.w	r2, r3, #8
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	f04f 32ff 	mov.w	r2, #4294967295
 8000970:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	f103 0208 	add.w	r2, r3, #8
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f103 0208 	add.w	r2, r3, #8
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80009b2:	b480      	push	{r7}
 80009b4:	b085      	sub	sp, #20
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
 80009ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	68fa      	ldr	r2, [r7, #12]
 80009c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	689a      	ldr	r2, [r3, #8]
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	689b      	ldr	r3, [r3, #8]
 80009d4:	683a      	ldr	r2, [r7, #0]
 80009d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	683a      	ldr	r2, [r7, #0]
 80009dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	687a      	ldr	r2, [r7, #4]
 80009e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	1c5a      	adds	r2, r3, #1
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	601a      	str	r2, [r3, #0]
}
 80009ee:	bf00      	nop
 80009f0:	3714      	adds	r7, #20
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80009fa:	b480      	push	{r7}
 80009fc:	b085      	sub	sp, #20
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
 8000a02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a10:	d103      	bne.n	8000a1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	691b      	ldr	r3, [r3, #16]
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	e00c      	b.n	8000a34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	3308      	adds	r3, #8
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	e002      	b.n	8000a28 <vListInsert+0x2e>
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d2f6      	bcs.n	8000a22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	685a      	ldr	r2, [r3, #4]
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	683a      	ldr	r2, [r7, #0]
 8000a42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	683a      	ldr	r2, [r7, #0]
 8000a4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	1c5a      	adds	r2, r3, #1
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	601a      	str	r2, [r3, #0]
}
 8000a60:	bf00      	nop
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	691b      	ldr	r3, [r3, #16]
 8000a78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	6892      	ldr	r2, [r2, #8]
 8000a82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	6852      	ldr	r2, [r2, #4]
 8000a8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d103      	bne.n	8000aa0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	689a      	ldr	r2, [r3, #8]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	1e5a      	subs	r2, r3, #1
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	681b      	ldr	r3, [r3, #0]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d10a      	bne.n	8000aea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ad8:	f383 8811 	msr	BASEPRI, r3
 8000adc:	f3bf 8f6f 	isb	sy
 8000ae0:	f3bf 8f4f 	dsb	sy
 8000ae4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000ae6:	bf00      	nop
 8000ae8:	e7fe      	b.n	8000ae8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8000aea:	f002 fadb 	bl	80030a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000af6:	68f9      	ldr	r1, [r7, #12]
 8000af8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000afa:	fb01 f303 	mul.w	r3, r1, r3
 8000afe:	441a      	add	r2, r3
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	2200      	movs	r2, #0
 8000b08:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	68f9      	ldr	r1, [r7, #12]
 8000b1e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000b20:	fb01 f303 	mul.w	r3, r1, r3
 8000b24:	441a      	add	r2, r3
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	22ff      	movs	r2, #255	; 0xff
 8000b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	22ff      	movs	r2, #255	; 0xff
 8000b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d114      	bne.n	8000b6a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	691b      	ldr	r3, [r3, #16]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d01a      	beq.n	8000b7e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	3310      	adds	r3, #16
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f001 fa93 	bl	8002078 <xTaskRemoveFromEventList>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d012      	beq.n	8000b7e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <xQueueGenericReset+0xcc>)
 8000b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	f3bf 8f4f 	dsb	sy
 8000b64:	f3bf 8f6f 	isb	sy
 8000b68:	e009      	b.n	8000b7e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	3310      	adds	r3, #16
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fef2 	bl	8000958 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	3324      	adds	r3, #36	; 0x24
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff feed 	bl	8000958 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000b7e:	f002 fac1 	bl	8003104 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000b82:	2301      	movs	r3, #1
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	e000ed04 	.word	0xe000ed04

08000b90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08e      	sub	sp, #56	; 0x38
 8000b94:	af02      	add	r7, sp, #8
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
 8000b9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d10a      	bne.n	8000bba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8000ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ba8:	f383 8811 	msr	BASEPRI, r3
 8000bac:	f3bf 8f6f 	isb	sy
 8000bb0:	f3bf 8f4f 	dsb	sy
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000bb6:	bf00      	nop
 8000bb8:	e7fe      	b.n	8000bb8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d10a      	bne.n	8000bd6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8000bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bc4:	f383 8811 	msr	BASEPRI, r3
 8000bc8:	f3bf 8f6f 	isb	sy
 8000bcc:	f3bf 8f4f 	dsb	sy
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000bd2:	bf00      	nop
 8000bd4:	e7fe      	b.n	8000bd4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d002      	beq.n	8000be2 <xQueueGenericCreateStatic+0x52>
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <xQueueGenericCreateStatic+0x56>
 8000be2:	2301      	movs	r3, #1
 8000be4:	e000      	b.n	8000be8 <xQueueGenericCreateStatic+0x58>
 8000be6:	2300      	movs	r3, #0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d10a      	bne.n	8000c02 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8000bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bf0:	f383 8811 	msr	BASEPRI, r3
 8000bf4:	f3bf 8f6f 	isb	sy
 8000bf8:	f3bf 8f4f 	dsb	sy
 8000bfc:	623b      	str	r3, [r7, #32]
}
 8000bfe:	bf00      	nop
 8000c00:	e7fe      	b.n	8000c00 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d102      	bne.n	8000c0e <xQueueGenericCreateStatic+0x7e>
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d101      	bne.n	8000c12 <xQueueGenericCreateStatic+0x82>
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e000      	b.n	8000c14 <xQueueGenericCreateStatic+0x84>
 8000c12:	2300      	movs	r3, #0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d10a      	bne.n	8000c2e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8000c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c1c:	f383 8811 	msr	BASEPRI, r3
 8000c20:	f3bf 8f6f 	isb	sy
 8000c24:	f3bf 8f4f 	dsb	sy
 8000c28:	61fb      	str	r3, [r7, #28]
}
 8000c2a:	bf00      	nop
 8000c2c:	e7fe      	b.n	8000c2c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8000c2e:	2350      	movs	r3, #80	; 0x50
 8000c30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	2b50      	cmp	r3, #80	; 0x50
 8000c36:	d00a      	beq.n	8000c4e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8000c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c3c:	f383 8811 	msr	BASEPRI, r3
 8000c40:	f3bf 8f6f 	isb	sy
 8000c44:	f3bf 8f4f 	dsb	sy
 8000c48:	61bb      	str	r3, [r7, #24]
}
 8000c4a:	bf00      	nop
 8000c4c:	e7fe      	b.n	8000c4c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8000c4e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8000c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d00d      	beq.n	8000c76 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8000c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000c62:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c68:	9300      	str	r3, [sp, #0]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	68b9      	ldr	r1, [r7, #8]
 8000c70:	68f8      	ldr	r0, [r7, #12]
 8000c72:	f000 f83f 	bl	8000cf4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3730      	adds	r7, #48	; 0x30
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	; 0x28
 8000c84:	af02      	add	r7, sp, #8
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d10a      	bne.n	8000caa <xQueueGenericCreate+0x2a>
	__asm volatile
 8000c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c98:	f383 8811 	msr	BASEPRI, r3
 8000c9c:	f3bf 8f6f 	isb	sy
 8000ca0:	f3bf 8f4f 	dsb	sy
 8000ca4:	613b      	str	r3, [r7, #16]
}
 8000ca6:	bf00      	nop
 8000ca8:	e7fe      	b.n	8000ca8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	68ba      	ldr	r2, [r7, #8]
 8000cae:	fb02 f303 	mul.w	r3, r2, r3
 8000cb2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	3350      	adds	r3, #80	; 0x50
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f002 fb15 	bl	80032e8 <pvPortMalloc>
 8000cbe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d011      	beq.n	8000cea <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	3350      	adds	r3, #80	; 0x50
 8000cce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000cd8:	79fa      	ldrb	r2, [r7, #7]
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	9300      	str	r3, [sp, #0]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	697a      	ldr	r2, [r7, #20]
 8000ce2:	68b9      	ldr	r1, [r7, #8]
 8000ce4:	68f8      	ldr	r0, [r7, #12]
 8000ce6:	f000 f805 	bl	8000cf4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000cea:	69bb      	ldr	r3, [r7, #24]
	}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3720      	adds	r7, #32
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
 8000d00:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d103      	bne.n	8000d10 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	69ba      	ldr	r2, [r7, #24]
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	e002      	b.n	8000d16 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	68fa      	ldr	r2, [r7, #12]
 8000d1a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000d22:	2101      	movs	r1, #1
 8000d24:	69b8      	ldr	r0, [r7, #24]
 8000d26:	f7ff fecb 	bl	8000ac0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	78fa      	ldrb	r2, [r7, #3]
 8000d2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d00e      	beq.n	8000d66 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2100      	movs	r1, #0
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f000 f81d 	bl	8000da0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	461a      	mov	r2, r3
 8000d84:	6939      	ldr	r1, [r7, #16]
 8000d86:	6978      	ldr	r0, [r7, #20]
 8000d88:	f7ff ff7a 	bl	8000c80 <xQueueGenericCreate>
 8000d8c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8000d8e:	68f8      	ldr	r0, [r7, #12]
 8000d90:	f7ff ffd3 	bl	8000d3a <prvInitialiseMutex>

		return xNewQueue;
 8000d94:	68fb      	ldr	r3, [r7, #12]
	}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08e      	sub	sp, #56	; 0x38
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
 8000dac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000dae:	2300      	movs	r3, #0
 8000db0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d10a      	bne.n	8000dd2 <xQueueGenericSend+0x32>
	__asm volatile
 8000dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dc0:	f383 8811 	msr	BASEPRI, r3
 8000dc4:	f3bf 8f6f 	isb	sy
 8000dc8:	f3bf 8f4f 	dsb	sy
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000dce:	bf00      	nop
 8000dd0:	e7fe      	b.n	8000dd0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d103      	bne.n	8000de0 <xQueueGenericSend+0x40>
 8000dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d101      	bne.n	8000de4 <xQueueGenericSend+0x44>
 8000de0:	2301      	movs	r3, #1
 8000de2:	e000      	b.n	8000de6 <xQueueGenericSend+0x46>
 8000de4:	2300      	movs	r3, #0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d10a      	bne.n	8000e00 <xQueueGenericSend+0x60>
	__asm volatile
 8000dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dee:	f383 8811 	msr	BASEPRI, r3
 8000df2:	f3bf 8f6f 	isb	sy
 8000df6:	f3bf 8f4f 	dsb	sy
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000dfc:	bf00      	nop
 8000dfe:	e7fe      	b.n	8000dfe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d103      	bne.n	8000e0e <xQueueGenericSend+0x6e>
 8000e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d101      	bne.n	8000e12 <xQueueGenericSend+0x72>
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e000      	b.n	8000e14 <xQueueGenericSend+0x74>
 8000e12:	2300      	movs	r3, #0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d10a      	bne.n	8000e2e <xQueueGenericSend+0x8e>
	__asm volatile
 8000e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e1c:	f383 8811 	msr	BASEPRI, r3
 8000e20:	f3bf 8f6f 	isb	sy
 8000e24:	f3bf 8f4f 	dsb	sy
 8000e28:	623b      	str	r3, [r7, #32]
}
 8000e2a:	bf00      	nop
 8000e2c:	e7fe      	b.n	8000e2c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000e2e:	f001 fae1 	bl	80023f4 <xTaskGetSchedulerState>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d102      	bne.n	8000e3e <xQueueGenericSend+0x9e>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d101      	bne.n	8000e42 <xQueueGenericSend+0xa2>
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e000      	b.n	8000e44 <xQueueGenericSend+0xa4>
 8000e42:	2300      	movs	r3, #0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d10a      	bne.n	8000e5e <xQueueGenericSend+0xbe>
	__asm volatile
 8000e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e4c:	f383 8811 	msr	BASEPRI, r3
 8000e50:	f3bf 8f6f 	isb	sy
 8000e54:	f3bf 8f4f 	dsb	sy
 8000e58:	61fb      	str	r3, [r7, #28]
}
 8000e5a:	bf00      	nop
 8000e5c:	e7fe      	b.n	8000e5c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000e5e:	f002 f921 	bl	80030a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d302      	bcc.n	8000e74 <xQueueGenericSend+0xd4>
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d129      	bne.n	8000ec8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000e74:	683a      	ldr	r2, [r7, #0]
 8000e76:	68b9      	ldr	r1, [r7, #8]
 8000e78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e7a:	f000 fb2f 	bl	80014dc <prvCopyDataToQueue>
 8000e7e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d010      	beq.n	8000eaa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e8a:	3324      	adds	r3, #36	; 0x24
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f001 f8f3 	bl	8002078 <xTaskRemoveFromEventList>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d013      	beq.n	8000ec0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000e98:	4b3f      	ldr	r3, [pc, #252]	; (8000f98 <xQueueGenericSend+0x1f8>)
 8000e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	f3bf 8f4f 	dsb	sy
 8000ea4:	f3bf 8f6f 	isb	sy
 8000ea8:	e00a      	b.n	8000ec0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d007      	beq.n	8000ec0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000eb0:	4b39      	ldr	r3, [pc, #228]	; (8000f98 <xQueueGenericSend+0x1f8>)
 8000eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	f3bf 8f4f 	dsb	sy
 8000ebc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000ec0:	f002 f920 	bl	8003104 <vPortExitCritical>
				return pdPASS;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e063      	b.n	8000f90 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d103      	bne.n	8000ed6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000ece:	f002 f919 	bl	8003104 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	e05c      	b.n	8000f90 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d106      	bne.n	8000eea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f001 f92d 	bl	8002140 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000eea:	f002 f90b 	bl	8003104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000eee:	f000 fe9f 	bl	8001c30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000ef2:	f002 f8d7 	bl	80030a4 <vPortEnterCritical>
 8000ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ef8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000efc:	b25b      	sxtb	r3, r3
 8000efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f02:	d103      	bne.n	8000f0c <xQueueGenericSend+0x16c>
 8000f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f06:	2200      	movs	r2, #0
 8000f08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f12:	b25b      	sxtb	r3, r3
 8000f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f18:	d103      	bne.n	8000f22 <xQueueGenericSend+0x182>
 8000f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000f22:	f002 f8ef 	bl	8003104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000f26:	1d3a      	adds	r2, r7, #4
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f001 f91c 	bl	800216c <xTaskCheckForTimeOut>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d124      	bne.n	8000f84 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000f3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f3c:	f000 fbc6 	bl	80016cc <prvIsQueueFull>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d018      	beq.n	8000f78 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f48:	3310      	adds	r3, #16
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f001 f842 	bl	8001fd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000f54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f56:	f000 fb51 	bl	80015fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000f5a:	f000 fe77 	bl	8001c4c <xTaskResumeAll>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f47f af7c 	bne.w	8000e5e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8000f66:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <xQueueGenericSend+0x1f8>)
 8000f68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	f3bf 8f4f 	dsb	sy
 8000f72:	f3bf 8f6f 	isb	sy
 8000f76:	e772      	b.n	8000e5e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000f78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f7a:	f000 fb3f 	bl	80015fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000f7e:	f000 fe65 	bl	8001c4c <xTaskResumeAll>
 8000f82:	e76c      	b.n	8000e5e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000f84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f86:	f000 fb39 	bl	80015fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000f8a:	f000 fe5f 	bl	8001c4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000f8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3738      	adds	r7, #56	; 0x38
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	e000ed04 	.word	0xe000ed04

08000f9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b090      	sub	sp, #64	; 0x40
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
 8000fa8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8000fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d10a      	bne.n	8000fca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8000fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fb8:	f383 8811 	msr	BASEPRI, r3
 8000fbc:	f3bf 8f6f 	isb	sy
 8000fc0:	f3bf 8f4f 	dsb	sy
 8000fc4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000fc6:	bf00      	nop
 8000fc8:	e7fe      	b.n	8000fc8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d103      	bne.n	8000fd8 <xQueueGenericSendFromISR+0x3c>
 8000fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d101      	bne.n	8000fdc <xQueueGenericSendFromISR+0x40>
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e000      	b.n	8000fde <xQueueGenericSendFromISR+0x42>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d10a      	bne.n	8000ff8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8000fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fe6:	f383 8811 	msr	BASEPRI, r3
 8000fea:	f3bf 8f6f 	isb	sy
 8000fee:	f3bf 8f4f 	dsb	sy
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000ff4:	bf00      	nop
 8000ff6:	e7fe      	b.n	8000ff6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d103      	bne.n	8001006 <xQueueGenericSendFromISR+0x6a>
 8000ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001002:	2b01      	cmp	r3, #1
 8001004:	d101      	bne.n	800100a <xQueueGenericSendFromISR+0x6e>
 8001006:	2301      	movs	r3, #1
 8001008:	e000      	b.n	800100c <xQueueGenericSendFromISR+0x70>
 800100a:	2300      	movs	r3, #0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d10a      	bne.n	8001026 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8001010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001014:	f383 8811 	msr	BASEPRI, r3
 8001018:	f3bf 8f6f 	isb	sy
 800101c:	f3bf 8f4f 	dsb	sy
 8001020:	623b      	str	r3, [r7, #32]
}
 8001022:	bf00      	nop
 8001024:	e7fe      	b.n	8001024 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001026:	f002 f91f 	bl	8003268 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800102a:	f3ef 8211 	mrs	r2, BASEPRI
 800102e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001032:	f383 8811 	msr	BASEPRI, r3
 8001036:	f3bf 8f6f 	isb	sy
 800103a:	f3bf 8f4f 	dsb	sy
 800103e:	61fa      	str	r2, [r7, #28]
 8001040:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001042:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001044:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800104a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800104c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800104e:	429a      	cmp	r2, r3
 8001050:	d302      	bcc.n	8001058 <xQueueGenericSendFromISR+0xbc>
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	2b02      	cmp	r3, #2
 8001056:	d12f      	bne.n	80010b8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800105a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800105e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001068:	683a      	ldr	r2, [r7, #0]
 800106a:	68b9      	ldr	r1, [r7, #8]
 800106c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800106e:	f000 fa35 	bl	80014dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001072:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800107a:	d112      	bne.n	80010a2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800107c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800107e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001080:	2b00      	cmp	r3, #0
 8001082:	d016      	beq.n	80010b2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001086:	3324      	adds	r3, #36	; 0x24
 8001088:	4618      	mov	r0, r3
 800108a:	f000 fff5 	bl	8002078 <xTaskRemoveFromEventList>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d00e      	beq.n	80010b2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d00b      	beq.n	80010b2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2201      	movs	r2, #1
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	e007      	b.n	80010b2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80010a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010a6:	3301      	adds	r3, #1
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	b25a      	sxtb	r2, r3
 80010ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80010b2:	2301      	movs	r3, #1
 80010b4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80010b6:	e001      	b.n	80010bc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010be:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80010c6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80010c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3740      	adds	r7, #64	; 0x40
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08c      	sub	sp, #48	; 0x30
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80010e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d10a      	bne.n	8001104 <xQueueReceive+0x30>
	__asm volatile
 80010ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010f2:	f383 8811 	msr	BASEPRI, r3
 80010f6:	f3bf 8f6f 	isb	sy
 80010fa:	f3bf 8f4f 	dsb	sy
 80010fe:	623b      	str	r3, [r7, #32]
}
 8001100:	bf00      	nop
 8001102:	e7fe      	b.n	8001102 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d103      	bne.n	8001112 <xQueueReceive+0x3e>
 800110a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <xQueueReceive+0x42>
 8001112:	2301      	movs	r3, #1
 8001114:	e000      	b.n	8001118 <xQueueReceive+0x44>
 8001116:	2300      	movs	r3, #0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d10a      	bne.n	8001132 <xQueueReceive+0x5e>
	__asm volatile
 800111c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001120:	f383 8811 	msr	BASEPRI, r3
 8001124:	f3bf 8f6f 	isb	sy
 8001128:	f3bf 8f4f 	dsb	sy
 800112c:	61fb      	str	r3, [r7, #28]
}
 800112e:	bf00      	nop
 8001130:	e7fe      	b.n	8001130 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001132:	f001 f95f 	bl	80023f4 <xTaskGetSchedulerState>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d102      	bne.n	8001142 <xQueueReceive+0x6e>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <xQueueReceive+0x72>
 8001142:	2301      	movs	r3, #1
 8001144:	e000      	b.n	8001148 <xQueueReceive+0x74>
 8001146:	2300      	movs	r3, #0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d10a      	bne.n	8001162 <xQueueReceive+0x8e>
	__asm volatile
 800114c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001150:	f383 8811 	msr	BASEPRI, r3
 8001154:	f3bf 8f6f 	isb	sy
 8001158:	f3bf 8f4f 	dsb	sy
 800115c:	61bb      	str	r3, [r7, #24]
}
 800115e:	bf00      	nop
 8001160:	e7fe      	b.n	8001160 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001162:	f001 ff9f 	bl	80030a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800116a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800116c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116e:	2b00      	cmp	r3, #0
 8001170:	d01f      	beq.n	80011b2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001172:	68b9      	ldr	r1, [r7, #8]
 8001174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001176:	f000 fa1b 	bl	80015b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	1e5a      	subs	r2, r3, #1
 800117e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001180:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d00f      	beq.n	80011aa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800118a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800118c:	3310      	adds	r3, #16
 800118e:	4618      	mov	r0, r3
 8001190:	f000 ff72 	bl	8002078 <xTaskRemoveFromEventList>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d007      	beq.n	80011aa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800119a:	4b3d      	ldr	r3, [pc, #244]	; (8001290 <xQueueReceive+0x1bc>)
 800119c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	f3bf 8f4f 	dsb	sy
 80011a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80011aa:	f001 ffab 	bl	8003104 <vPortExitCritical>
				return pdPASS;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e069      	b.n	8001286 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d103      	bne.n	80011c0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80011b8:	f001 ffa4 	bl	8003104 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80011bc:	2300      	movs	r3, #0
 80011be:	e062      	b.n	8001286 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80011c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d106      	bne.n	80011d4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80011c6:	f107 0310 	add.w	r3, r7, #16
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 ffb8 	bl	8002140 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80011d0:	2301      	movs	r3, #1
 80011d2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80011d4:	f001 ff96 	bl	8003104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80011d8:	f000 fd2a 	bl	8001c30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80011dc:	f001 ff62 	bl	80030a4 <vPortEnterCritical>
 80011e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011e6:	b25b      	sxtb	r3, r3
 80011e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ec:	d103      	bne.n	80011f6 <xQueueReceive+0x122>
 80011ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80011f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80011fc:	b25b      	sxtb	r3, r3
 80011fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001202:	d103      	bne.n	800120c <xQueueReceive+0x138>
 8001204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800120c:	f001 ff7a 	bl	8003104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001210:	1d3a      	adds	r2, r7, #4
 8001212:	f107 0310 	add.w	r3, r7, #16
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f000 ffa7 	bl	800216c <xTaskCheckForTimeOut>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d123      	bne.n	800126c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001224:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001226:	f000 fa3b 	bl	80016a0 <prvIsQueueEmpty>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d017      	beq.n	8001260 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001232:	3324      	adds	r3, #36	; 0x24
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	4611      	mov	r1, r2
 8001238:	4618      	mov	r0, r3
 800123a:	f000 fecd 	bl	8001fd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800123e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001240:	f000 f9dc 	bl	80015fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001244:	f000 fd02 	bl	8001c4c <xTaskResumeAll>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d189      	bne.n	8001162 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <xQueueReceive+0x1bc>)
 8001250:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	f3bf 8f4f 	dsb	sy
 800125a:	f3bf 8f6f 	isb	sy
 800125e:	e780      	b.n	8001162 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001262:	f000 f9cb 	bl	80015fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001266:	f000 fcf1 	bl	8001c4c <xTaskResumeAll>
 800126a:	e77a      	b.n	8001162 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800126c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800126e:	f000 f9c5 	bl	80015fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001272:	f000 fceb 	bl	8001c4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001276:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001278:	f000 fa12 	bl	80016a0 <prvIsQueueEmpty>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	f43f af6f 	beq.w	8001162 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001284:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001286:	4618      	mov	r0, r3
 8001288:	3730      	adds	r7, #48	; 0x30
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	e000ed04 	.word	0xe000ed04

08001294 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08e      	sub	sp, #56	; 0x38
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800129e:	2300      	movs	r3, #0
 80012a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80012aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d10a      	bne.n	80012c6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80012b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012b4:	f383 8811 	msr	BASEPRI, r3
 80012b8:	f3bf 8f6f 	isb	sy
 80012bc:	f3bf 8f4f 	dsb	sy
 80012c0:	623b      	str	r3, [r7, #32]
}
 80012c2:	bf00      	nop
 80012c4:	e7fe      	b.n	80012c4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80012c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00a      	beq.n	80012e4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80012ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012d2:	f383 8811 	msr	BASEPRI, r3
 80012d6:	f3bf 8f6f 	isb	sy
 80012da:	f3bf 8f4f 	dsb	sy
 80012de:	61fb      	str	r3, [r7, #28]
}
 80012e0:	bf00      	nop
 80012e2:	e7fe      	b.n	80012e2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80012e4:	f001 f886 	bl	80023f4 <xTaskGetSchedulerState>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d102      	bne.n	80012f4 <xQueueSemaphoreTake+0x60>
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d101      	bne.n	80012f8 <xQueueSemaphoreTake+0x64>
 80012f4:	2301      	movs	r3, #1
 80012f6:	e000      	b.n	80012fa <xQueueSemaphoreTake+0x66>
 80012f8:	2300      	movs	r3, #0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10a      	bne.n	8001314 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80012fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001302:	f383 8811 	msr	BASEPRI, r3
 8001306:	f3bf 8f6f 	isb	sy
 800130a:	f3bf 8f4f 	dsb	sy
 800130e:	61bb      	str	r3, [r7, #24]
}
 8001310:	bf00      	nop
 8001312:	e7fe      	b.n	8001312 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001314:	f001 fec6 	bl	80030a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8001318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800131a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800131c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800131e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001320:	2b00      	cmp	r3, #0
 8001322:	d024      	beq.n	800136e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8001324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001326:	1e5a      	subs	r2, r3, #1
 8001328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800132a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800132c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d104      	bne.n	800133e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8001334:	f001 f9d4 	bl	80026e0 <pvTaskIncrementMutexHeldCount>
 8001338:	4602      	mov	r2, r0
 800133a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800133c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800133e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d00f      	beq.n	8001366 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001348:	3310      	adds	r3, #16
 800134a:	4618      	mov	r0, r3
 800134c:	f000 fe94 	bl	8002078 <xTaskRemoveFromEventList>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d007      	beq.n	8001366 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001356:	4b54      	ldr	r3, [pc, #336]	; (80014a8 <xQueueSemaphoreTake+0x214>)
 8001358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	f3bf 8f4f 	dsb	sy
 8001362:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001366:	f001 fecd 	bl	8003104 <vPortExitCritical>
				return pdPASS;
 800136a:	2301      	movs	r3, #1
 800136c:	e097      	b.n	800149e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d111      	bne.n	8001398 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8001374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00a      	beq.n	8001390 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800137a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800137e:	f383 8811 	msr	BASEPRI, r3
 8001382:	f3bf 8f6f 	isb	sy
 8001386:	f3bf 8f4f 	dsb	sy
 800138a:	617b      	str	r3, [r7, #20]
}
 800138c:	bf00      	nop
 800138e:	e7fe      	b.n	800138e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8001390:	f001 feb8 	bl	8003104 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001394:	2300      	movs	r3, #0
 8001396:	e082      	b.n	800149e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800139a:	2b00      	cmp	r3, #0
 800139c:	d106      	bne.n	80013ac <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800139e:	f107 030c 	add.w	r3, r7, #12
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 fecc 	bl	8002140 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80013a8:	2301      	movs	r3, #1
 80013aa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80013ac:	f001 feaa 	bl	8003104 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80013b0:	f000 fc3e 	bl	8001c30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80013b4:	f001 fe76 	bl	80030a4 <vPortEnterCritical>
 80013b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013be:	b25b      	sxtb	r3, r3
 80013c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c4:	d103      	bne.n	80013ce <xQueueSemaphoreTake+0x13a>
 80013c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80013ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013d4:	b25b      	sxtb	r3, r3
 80013d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013da:	d103      	bne.n	80013e4 <xQueueSemaphoreTake+0x150>
 80013dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80013e4:	f001 fe8e 	bl	8003104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80013e8:	463a      	mov	r2, r7
 80013ea:	f107 030c 	add.w	r3, r7, #12
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f000 febb 	bl	800216c <xTaskCheckForTimeOut>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d132      	bne.n	8001462 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80013fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80013fe:	f000 f94f 	bl	80016a0 <prvIsQueueEmpty>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d026      	beq.n	8001456 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d109      	bne.n	8001424 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8001410:	f001 fe48 	bl	80030a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	4618      	mov	r0, r3
 800141a:	f001 f809 	bl	8002430 <xTaskPriorityInherit>
 800141e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8001420:	f001 fe70 	bl	8003104 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001426:	3324      	adds	r3, #36	; 0x24
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	4611      	mov	r1, r2
 800142c:	4618      	mov	r0, r3
 800142e:	f000 fdd3 	bl	8001fd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001432:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001434:	f000 f8e2 	bl	80015fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001438:	f000 fc08 	bl	8001c4c <xTaskResumeAll>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	f47f af68 	bne.w	8001314 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8001444:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <xQueueSemaphoreTake+0x214>)
 8001446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	f3bf 8f4f 	dsb	sy
 8001450:	f3bf 8f6f 	isb	sy
 8001454:	e75e      	b.n	8001314 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8001456:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001458:	f000 f8d0 	bl	80015fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800145c:	f000 fbf6 	bl	8001c4c <xTaskResumeAll>
 8001460:	e758      	b.n	8001314 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8001462:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001464:	f000 f8ca 	bl	80015fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001468:	f000 fbf0 	bl	8001c4c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800146c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800146e:	f000 f917 	bl	80016a0 <prvIsQueueEmpty>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	f43f af4d 	beq.w	8001314 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800147a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800147c:	2b00      	cmp	r3, #0
 800147e:	d00d      	beq.n	800149c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8001480:	f001 fe10 	bl	80030a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8001484:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001486:	f000 f811 	bl	80014ac <prvGetDisinheritPriorityAfterTimeout>
 800148a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800148c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001492:	4618      	mov	r0, r3
 8001494:	f001 f8a2 	bl	80025dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8001498:	f001 fe34 	bl	8003104 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800149c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3738      	adds	r7, #56	; 0x38
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	e000ed04 	.word	0xe000ed04

080014ac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d006      	beq.n	80014ca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	e001      	b.n	80014ce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80014ce:	68fb      	ldr	r3, [r7, #12]
	}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d10d      	bne.n	8001516 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d14d      	bne.n	800159e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	4618      	mov	r0, r3
 8001508:	f000 fffa 	bl	8002500 <xTaskPriorityDisinherit>
 800150c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	e043      	b.n	800159e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d119      	bne.n	8001550 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6858      	ldr	r0, [r3, #4]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001524:	461a      	mov	r2, r3
 8001526:	68b9      	ldr	r1, [r7, #8]
 8001528:	f002 f8f2 	bl	8003710 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	441a      	add	r2, r3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	429a      	cmp	r2, r3
 8001544:	d32b      	bcc.n	800159e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	e026      	b.n	800159e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	68d8      	ldr	r0, [r3, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	461a      	mov	r2, r3
 800155a:	68b9      	ldr	r1, [r7, #8]
 800155c:	f002 f8d8 	bl	8003710 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	425b      	negs	r3, r3
 800156a:	441a      	add	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	68da      	ldr	r2, [r3, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	429a      	cmp	r2, r3
 800157a:	d207      	bcs.n	800158c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	425b      	negs	r3, r3
 8001586:	441a      	add	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d105      	bne.n	800159e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d002      	beq.n	800159e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	3b01      	subs	r3, #1
 800159c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1c5a      	adds	r2, r3, #1
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80015a6:	697b      	ldr	r3, [r7, #20]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d018      	beq.n	80015f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68da      	ldr	r2, [r3, #12]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	441a      	add	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68da      	ldr	r2, [r3, #12]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d303      	bcc.n	80015e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68d9      	ldr	r1, [r3, #12]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	461a      	mov	r2, r3
 80015ee:	6838      	ldr	r0, [r7, #0]
 80015f0:	f002 f88e 	bl	8003710 <memcpy>
	}
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001604:	f001 fd4e 	bl	80030a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800160e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001610:	e011      	b.n	8001636 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001616:	2b00      	cmp	r3, #0
 8001618:	d012      	beq.n	8001640 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3324      	adds	r3, #36	; 0x24
 800161e:	4618      	mov	r0, r3
 8001620:	f000 fd2a 	bl	8002078 <xTaskRemoveFromEventList>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800162a:	f000 fe01 	bl	8002230 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	3b01      	subs	r3, #1
 8001632:	b2db      	uxtb	r3, r3
 8001634:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163a:	2b00      	cmp	r3, #0
 800163c:	dce9      	bgt.n	8001612 <prvUnlockQueue+0x16>
 800163e:	e000      	b.n	8001642 <prvUnlockQueue+0x46>
					break;
 8001640:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	22ff      	movs	r2, #255	; 0xff
 8001646:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800164a:	f001 fd5b 	bl	8003104 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800164e:	f001 fd29 	bl	80030a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001658:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800165a:	e011      	b.n	8001680 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d012      	beq.n	800168a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3310      	adds	r3, #16
 8001668:	4618      	mov	r0, r3
 800166a:	f000 fd05 	bl	8002078 <xTaskRemoveFromEventList>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001674:	f000 fddc 	bl	8002230 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001678:	7bbb      	ldrb	r3, [r7, #14]
 800167a:	3b01      	subs	r3, #1
 800167c:	b2db      	uxtb	r3, r3
 800167e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001680:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001684:	2b00      	cmp	r3, #0
 8001686:	dce9      	bgt.n	800165c <prvUnlockQueue+0x60>
 8001688:	e000      	b.n	800168c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800168a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	22ff      	movs	r2, #255	; 0xff
 8001690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001694:	f001 fd36 	bl	8003104 <vPortExitCritical>
}
 8001698:	bf00      	nop
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80016a8:	f001 fcfc 	bl	80030a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d102      	bne.n	80016ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80016b4:	2301      	movs	r3, #1
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	e001      	b.n	80016be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80016be:	f001 fd21 	bl	8003104 <vPortExitCritical>

	return xReturn;
 80016c2:	68fb      	ldr	r3, [r7, #12]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80016d4:	f001 fce6 	bl	80030a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d102      	bne.n	80016ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80016e4:	2301      	movs	r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	e001      	b.n	80016ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80016ee:	f001 fd09 	bl	8003104 <vPortExitCritical>

	return xReturn;
 80016f2:	68fb      	ldr	r3, [r7, #12]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	e014      	b.n	8001736 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800170c:	4a0f      	ldr	r2, [pc, #60]	; (800174c <vQueueAddToRegistry+0x50>)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d10b      	bne.n	8001730 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001718:	490c      	ldr	r1, [pc, #48]	; (800174c <vQueueAddToRegistry+0x50>)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001722:	4a0a      	ldr	r2, [pc, #40]	; (800174c <vQueueAddToRegistry+0x50>)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	4413      	add	r3, r2
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800172e:	e006      	b.n	800173e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	3301      	adds	r3, #1
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2b07      	cmp	r3, #7
 800173a:	d9e7      	bls.n	800170c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800173c:	bf00      	nop
 800173e:	bf00      	nop
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	20000790 	.word	0x20000790

08001750 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001760:	f001 fca0 	bl	80030a4 <vPortEnterCritical>
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800176a:	b25b      	sxtb	r3, r3
 800176c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001770:	d103      	bne.n	800177a <vQueueWaitForMessageRestricted+0x2a>
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001780:	b25b      	sxtb	r3, r3
 8001782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001786:	d103      	bne.n	8001790 <vQueueWaitForMessageRestricted+0x40>
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001790:	f001 fcb8 	bl	8003104 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001798:	2b00      	cmp	r3, #0
 800179a:	d106      	bne.n	80017aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	3324      	adds	r3, #36	; 0x24
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	68b9      	ldr	r1, [r7, #8]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 fc3b 	bl	8002020 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80017aa:	6978      	ldr	r0, [r7, #20]
 80017ac:	f7ff ff26 	bl	80015fc <prvUnlockQueue>
	}
 80017b0:	bf00      	nop
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08e      	sub	sp, #56	; 0x38
 80017bc:	af04      	add	r7, sp, #16
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
 80017c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80017c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d10a      	bne.n	80017e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80017cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017d0:	f383 8811 	msr	BASEPRI, r3
 80017d4:	f3bf 8f6f 	isb	sy
 80017d8:	f3bf 8f4f 	dsb	sy
 80017dc:	623b      	str	r3, [r7, #32]
}
 80017de:	bf00      	nop
 80017e0:	e7fe      	b.n	80017e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80017e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d10a      	bne.n	80017fe <xTaskCreateStatic+0x46>
	__asm volatile
 80017e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017ec:	f383 8811 	msr	BASEPRI, r3
 80017f0:	f3bf 8f6f 	isb	sy
 80017f4:	f3bf 8f4f 	dsb	sy
 80017f8:	61fb      	str	r3, [r7, #28]
}
 80017fa:	bf00      	nop
 80017fc:	e7fe      	b.n	80017fc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80017fe:	235c      	movs	r3, #92	; 0x5c
 8001800:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	2b5c      	cmp	r3, #92	; 0x5c
 8001806:	d00a      	beq.n	800181e <xTaskCreateStatic+0x66>
	__asm volatile
 8001808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800180c:	f383 8811 	msr	BASEPRI, r3
 8001810:	f3bf 8f6f 	isb	sy
 8001814:	f3bf 8f4f 	dsb	sy
 8001818:	61bb      	str	r3, [r7, #24]
}
 800181a:	bf00      	nop
 800181c:	e7fe      	b.n	800181c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800181e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001822:	2b00      	cmp	r3, #0
 8001824:	d01e      	beq.n	8001864 <xTaskCreateStatic+0xac>
 8001826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001828:	2b00      	cmp	r3, #0
 800182a:	d01b      	beq.n	8001864 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800182c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001834:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	2202      	movs	r2, #2
 800183a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800183e:	2300      	movs	r3, #0
 8001840:	9303      	str	r3, [sp, #12]
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	68b9      	ldr	r1, [r7, #8]
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f000 f850 	bl	80018fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800185c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800185e:	f000 f8dd 	bl	8001a1c <prvAddNewTaskToReadyList>
 8001862:	e001      	b.n	8001868 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001868:	697b      	ldr	r3, [r7, #20]
	}
 800186a:	4618      	mov	r0, r3
 800186c:	3728      	adds	r7, #40	; 0x28
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001872:	b580      	push	{r7, lr}
 8001874:	b08c      	sub	sp, #48	; 0x30
 8001876:	af04      	add	r7, sp, #16
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	603b      	str	r3, [r7, #0]
 800187e:	4613      	mov	r3, r2
 8001880:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001882:	88fb      	ldrh	r3, [r7, #6]
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4618      	mov	r0, r3
 8001888:	f001 fd2e 	bl	80032e8 <pvPortMalloc>
 800188c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d00e      	beq.n	80018b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001894:	205c      	movs	r0, #92	; 0x5c
 8001896:	f001 fd27 	bl	80032e8 <pvPortMalloc>
 800189a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	631a      	str	r2, [r3, #48]	; 0x30
 80018a8:	e005      	b.n	80018b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80018aa:	6978      	ldr	r0, [r7, #20]
 80018ac:	f001 fde8 	bl	8003480 <vPortFree>
 80018b0:	e001      	b.n	80018b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d017      	beq.n	80018ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80018c4:	88fa      	ldrh	r2, [r7, #6]
 80018c6:	2300      	movs	r3, #0
 80018c8:	9303      	str	r3, [sp, #12]
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	9302      	str	r3, [sp, #8]
 80018ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d0:	9301      	str	r3, [sp, #4]
 80018d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	68b9      	ldr	r1, [r7, #8]
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f000 f80e 	bl	80018fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80018e0:	69f8      	ldr	r0, [r7, #28]
 80018e2:	f000 f89b 	bl	8001a1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80018e6:	2301      	movs	r3, #1
 80018e8:	61bb      	str	r3, [r7, #24]
 80018ea:	e002      	b.n	80018f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295
 80018f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80018f2:	69bb      	ldr	r3, [r7, #24]
	}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3720      	adds	r7, #32
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
 8001908:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800190a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800190c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	461a      	mov	r2, r3
 8001914:	21a5      	movs	r1, #165	; 0xa5
 8001916:	f001 ff09 	bl	800372c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800191a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800191c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001924:	3b01      	subs	r3, #1
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	f023 0307 	bic.w	r3, r3, #7
 8001932:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00a      	beq.n	8001954 <prvInitialiseNewTask+0x58>
	__asm volatile
 800193e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001942:	f383 8811 	msr	BASEPRI, r3
 8001946:	f3bf 8f6f 	isb	sy
 800194a:	f3bf 8f4f 	dsb	sy
 800194e:	617b      	str	r3, [r7, #20]
}
 8001950:	bf00      	nop
 8001952:	e7fe      	b.n	8001952 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d01f      	beq.n	800199a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
 800195e:	e012      	b.n	8001986 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001960:	68ba      	ldr	r2, [r7, #8]
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	4413      	add	r3, r2
 8001966:	7819      	ldrb	r1, [r3, #0]
 8001968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	4413      	add	r3, r2
 800196e:	3334      	adds	r3, #52	; 0x34
 8001970:	460a      	mov	r2, r1
 8001972:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001974:	68ba      	ldr	r2, [r7, #8]
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	4413      	add	r3, r2
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d006      	beq.n	800198e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	3301      	adds	r3, #1
 8001984:	61fb      	str	r3, [r7, #28]
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	2b0f      	cmp	r3, #15
 800198a:	d9e9      	bls.n	8001960 <prvInitialiseNewTask+0x64>
 800198c:	e000      	b.n	8001990 <prvInitialiseNewTask+0x94>
			{
				break;
 800198e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001998:	e003      	b.n	80019a2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800199a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80019a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a4:	2b37      	cmp	r3, #55	; 0x37
 80019a6:	d901      	bls.n	80019ac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80019a8:	2337      	movs	r3, #55	; 0x37
 80019aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80019ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80019b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80019b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ba:	2200      	movs	r2, #0
 80019bc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80019be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c0:	3304      	adds	r3, #4
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe ffe8 	bl	8000998 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80019c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ca:	3318      	adds	r3, #24
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7fe ffe3 	bl	8000998 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80019d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80019de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80019e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80019e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ea:	2200      	movs	r2, #0
 80019ec:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80019ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	68f9      	ldr	r1, [r7, #12]
 80019fa:	69b8      	ldr	r0, [r7, #24]
 80019fc:	f001 fa26 	bl	8002e4c <pxPortInitialiseStack>
 8001a00:	4602      	mov	r2, r0
 8001a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a04:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d002      	beq.n	8001a12 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001a12:	bf00      	nop
 8001a14:	3720      	adds	r7, #32
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001a24:	f001 fb3e 	bl	80030a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001a28:	4b2d      	ldr	r3, [pc, #180]	; (8001ae0 <prvAddNewTaskToReadyList+0xc4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	4a2c      	ldr	r2, [pc, #176]	; (8001ae0 <prvAddNewTaskToReadyList+0xc4>)
 8001a30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001a32:	4b2c      	ldr	r3, [pc, #176]	; (8001ae4 <prvAddNewTaskToReadyList+0xc8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d109      	bne.n	8001a4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001a3a:	4a2a      	ldr	r2, [pc, #168]	; (8001ae4 <prvAddNewTaskToReadyList+0xc8>)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001a40:	4b27      	ldr	r3, [pc, #156]	; (8001ae0 <prvAddNewTaskToReadyList+0xc4>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d110      	bne.n	8001a6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001a48:	f000 fc16 	bl	8002278 <prvInitialiseTaskLists>
 8001a4c:	e00d      	b.n	8001a6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001a4e:	4b26      	ldr	r3, [pc, #152]	; (8001ae8 <prvAddNewTaskToReadyList+0xcc>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d109      	bne.n	8001a6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001a56:	4b23      	ldr	r3, [pc, #140]	; (8001ae4 <prvAddNewTaskToReadyList+0xc8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d802      	bhi.n	8001a6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001a64:	4a1f      	ldr	r2, [pc, #124]	; (8001ae4 <prvAddNewTaskToReadyList+0xc8>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001a6a:	4b20      	ldr	r3, [pc, #128]	; (8001aec <prvAddNewTaskToReadyList+0xd0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	4a1e      	ldr	r2, [pc, #120]	; (8001aec <prvAddNewTaskToReadyList+0xd0>)
 8001a72:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001a74:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <prvAddNewTaskToReadyList+0xd0>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a80:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <prvAddNewTaskToReadyList+0xd4>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d903      	bls.n	8001a90 <prvAddNewTaskToReadyList+0x74>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8c:	4a18      	ldr	r2, [pc, #96]	; (8001af0 <prvAddNewTaskToReadyList+0xd4>)
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a94:	4613      	mov	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4a15      	ldr	r2, [pc, #84]	; (8001af4 <prvAddNewTaskToReadyList+0xd8>)
 8001a9e:	441a      	add	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3304      	adds	r3, #4
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	f7fe ff83 	bl	80009b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001aac:	f001 fb2a 	bl	8003104 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001ab0:	4b0d      	ldr	r3, [pc, #52]	; (8001ae8 <prvAddNewTaskToReadyList+0xcc>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00e      	beq.n	8001ad6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <prvAddNewTaskToReadyList+0xc8>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d207      	bcs.n	8001ad6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <prvAddNewTaskToReadyList+0xdc>)
 8001ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	f3bf 8f4f 	dsb	sy
 8001ad2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000ca4 	.word	0x20000ca4
 8001ae4:	200007d0 	.word	0x200007d0
 8001ae8:	20000cb0 	.word	0x20000cb0
 8001aec:	20000cc0 	.word	0x20000cc0
 8001af0:	20000cac 	.word	0x20000cac
 8001af4:	200007d4 	.word	0x200007d4
 8001af8:	e000ed04 	.word	0xe000ed04

08001afc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d017      	beq.n	8001b3e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001b0e:	4b13      	ldr	r3, [pc, #76]	; (8001b5c <vTaskDelay+0x60>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00a      	beq.n	8001b2c <vTaskDelay+0x30>
	__asm volatile
 8001b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b1a:	f383 8811 	msr	BASEPRI, r3
 8001b1e:	f3bf 8f6f 	isb	sy
 8001b22:	f3bf 8f4f 	dsb	sy
 8001b26:	60bb      	str	r3, [r7, #8]
}
 8001b28:	bf00      	nop
 8001b2a:	e7fe      	b.n	8001b2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001b2c:	f000 f880 	bl	8001c30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001b30:	2100      	movs	r1, #0
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 fde8 	bl	8002708 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001b38:	f000 f888 	bl	8001c4c <xTaskResumeAll>
 8001b3c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d107      	bne.n	8001b54 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <vTaskDelay+0x64>)
 8001b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	f3bf 8f4f 	dsb	sy
 8001b50:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001b54:	bf00      	nop
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000ccc 	.word	0x20000ccc
 8001b60:	e000ed04 	.word	0xe000ed04

08001b64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	; 0x28
 8001b68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001b72:	463a      	mov	r2, r7
 8001b74:	1d39      	adds	r1, r7, #4
 8001b76:	f107 0308 	add.w	r3, r7, #8
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe feb8 	bl	80008f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001b80:	6839      	ldr	r1, [r7, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68ba      	ldr	r2, [r7, #8]
 8001b86:	9202      	str	r2, [sp, #8]
 8001b88:	9301      	str	r3, [sp, #4]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	2300      	movs	r3, #0
 8001b90:	460a      	mov	r2, r1
 8001b92:	4921      	ldr	r1, [pc, #132]	; (8001c18 <vTaskStartScheduler+0xb4>)
 8001b94:	4821      	ldr	r0, [pc, #132]	; (8001c1c <vTaskStartScheduler+0xb8>)
 8001b96:	f7ff fe0f 	bl	80017b8 <xTaskCreateStatic>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	4a20      	ldr	r2, [pc, #128]	; (8001c20 <vTaskStartScheduler+0xbc>)
 8001b9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001ba0:	4b1f      	ldr	r3, [pc, #124]	; (8001c20 <vTaskStartScheduler+0xbc>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	e001      	b.n	8001bb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d102      	bne.n	8001bbe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8001bb8:	f000 fdfa 	bl	80027b0 <xTimerCreateTimerTask>
 8001bbc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d116      	bne.n	8001bf2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8001bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bc8:	f383 8811 	msr	BASEPRI, r3
 8001bcc:	f3bf 8f6f 	isb	sy
 8001bd0:	f3bf 8f4f 	dsb	sy
 8001bd4:	613b      	str	r3, [r7, #16]
}
 8001bd6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001bd8:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <vTaskStartScheduler+0xc0>)
 8001bda:	f04f 32ff 	mov.w	r2, #4294967295
 8001bde:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001be0:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <vTaskStartScheduler+0xc4>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001be6:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <vTaskStartScheduler+0xc8>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001bec:	f001 f9b8 	bl	8002f60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001bf0:	e00e      	b.n	8001c10 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf8:	d10a      	bne.n	8001c10 <vTaskStartScheduler+0xac>
	__asm volatile
 8001bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bfe:	f383 8811 	msr	BASEPRI, r3
 8001c02:	f3bf 8f6f 	isb	sy
 8001c06:	f3bf 8f4f 	dsb	sy
 8001c0a:	60fb      	str	r3, [r7, #12]
}
 8001c0c:	bf00      	nop
 8001c0e:	e7fe      	b.n	8001c0e <vTaskStartScheduler+0xaa>
}
 8001c10:	bf00      	nop
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	08004054 	.word	0x08004054
 8001c1c:	08002249 	.word	0x08002249
 8001c20:	20000cc8 	.word	0x20000cc8
 8001c24:	20000cc4 	.word	0x20000cc4
 8001c28:	20000cb0 	.word	0x20000cb0
 8001c2c:	20000ca8 	.word	0x20000ca8

08001c30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <vTaskSuspendAll+0x18>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	4a03      	ldr	r2, [pc, #12]	; (8001c48 <vTaskSuspendAll+0x18>)
 8001c3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001c3e:	bf00      	nop
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	20000ccc 	.word	0x20000ccc

08001c4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001c56:	2300      	movs	r3, #0
 8001c58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001c5a:	4b42      	ldr	r3, [pc, #264]	; (8001d64 <xTaskResumeAll+0x118>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10a      	bne.n	8001c78 <xTaskResumeAll+0x2c>
	__asm volatile
 8001c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c66:	f383 8811 	msr	BASEPRI, r3
 8001c6a:	f3bf 8f6f 	isb	sy
 8001c6e:	f3bf 8f4f 	dsb	sy
 8001c72:	603b      	str	r3, [r7, #0]
}
 8001c74:	bf00      	nop
 8001c76:	e7fe      	b.n	8001c76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001c78:	f001 fa14 	bl	80030a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001c7c:	4b39      	ldr	r3, [pc, #228]	; (8001d64 <xTaskResumeAll+0x118>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	3b01      	subs	r3, #1
 8001c82:	4a38      	ldr	r2, [pc, #224]	; (8001d64 <xTaskResumeAll+0x118>)
 8001c84:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c86:	4b37      	ldr	r3, [pc, #220]	; (8001d64 <xTaskResumeAll+0x118>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d162      	bne.n	8001d54 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001c8e:	4b36      	ldr	r3, [pc, #216]	; (8001d68 <xTaskResumeAll+0x11c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d05e      	beq.n	8001d54 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001c96:	e02f      	b.n	8001cf8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c98:	4b34      	ldr	r3, [pc, #208]	; (8001d6c <xTaskResumeAll+0x120>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	3318      	adds	r3, #24
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7fe fee1 	bl	8000a6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	3304      	adds	r3, #4
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fedc 	bl	8000a6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cb8:	4b2d      	ldr	r3, [pc, #180]	; (8001d70 <xTaskResumeAll+0x124>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d903      	bls.n	8001cc8 <xTaskResumeAll+0x7c>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc4:	4a2a      	ldr	r2, [pc, #168]	; (8001d70 <xTaskResumeAll+0x124>)
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ccc:	4613      	mov	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4a27      	ldr	r2, [pc, #156]	; (8001d74 <xTaskResumeAll+0x128>)
 8001cd6:	441a      	add	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	3304      	adds	r3, #4
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4610      	mov	r0, r2
 8001ce0:	f7fe fe67 	bl	80009b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ce8:	4b23      	ldr	r3, [pc, #140]	; (8001d78 <xTaskResumeAll+0x12c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d302      	bcc.n	8001cf8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8001cf2:	4b22      	ldr	r3, [pc, #136]	; (8001d7c <xTaskResumeAll+0x130>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001cf8:	4b1c      	ldr	r3, [pc, #112]	; (8001d6c <xTaskResumeAll+0x120>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1cb      	bne.n	8001c98 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001d06:	f000 fb55 	bl	80023b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001d0a:	4b1d      	ldr	r3, [pc, #116]	; (8001d80 <xTaskResumeAll+0x134>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d010      	beq.n	8001d38 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001d16:	f000 f847 	bl	8001da8 <xTaskIncrementTick>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d002      	beq.n	8001d26 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8001d20:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <xTaskResumeAll+0x130>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f1      	bne.n	8001d16 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8001d32:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <xTaskResumeAll+0x134>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001d38:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <xTaskResumeAll+0x130>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d009      	beq.n	8001d54 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001d40:	2301      	movs	r3, #1
 8001d42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001d44:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <xTaskResumeAll+0x138>)
 8001d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	f3bf 8f4f 	dsb	sy
 8001d50:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001d54:	f001 f9d6 	bl	8003104 <vPortExitCritical>

	return xAlreadyYielded;
 8001d58:	68bb      	ldr	r3, [r7, #8]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000ccc 	.word	0x20000ccc
 8001d68:	20000ca4 	.word	0x20000ca4
 8001d6c:	20000c64 	.word	0x20000c64
 8001d70:	20000cac 	.word	0x20000cac
 8001d74:	200007d4 	.word	0x200007d4
 8001d78:	200007d0 	.word	0x200007d0
 8001d7c:	20000cb8 	.word	0x20000cb8
 8001d80:	20000cb4 	.word	0x20000cb4
 8001d84:	e000ed04 	.word	0xe000ed04

08001d88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001d8e:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <xTaskGetTickCount+0x1c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001d94:	687b      	ldr	r3, [r7, #4]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	20000ca8 	.word	0x20000ca8

08001da8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001db2:	4b4f      	ldr	r3, [pc, #316]	; (8001ef0 <xTaskIncrementTick+0x148>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f040 808f 	bne.w	8001eda <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001dbc:	4b4d      	ldr	r3, [pc, #308]	; (8001ef4 <xTaskIncrementTick+0x14c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001dc4:	4a4b      	ldr	r2, [pc, #300]	; (8001ef4 <xTaskIncrementTick+0x14c>)
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d120      	bne.n	8001e12 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001dd0:	4b49      	ldr	r3, [pc, #292]	; (8001ef8 <xTaskIncrementTick+0x150>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00a      	beq.n	8001df0 <xTaskIncrementTick+0x48>
	__asm volatile
 8001dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dde:	f383 8811 	msr	BASEPRI, r3
 8001de2:	f3bf 8f6f 	isb	sy
 8001de6:	f3bf 8f4f 	dsb	sy
 8001dea:	603b      	str	r3, [r7, #0]
}
 8001dec:	bf00      	nop
 8001dee:	e7fe      	b.n	8001dee <xTaskIncrementTick+0x46>
 8001df0:	4b41      	ldr	r3, [pc, #260]	; (8001ef8 <xTaskIncrementTick+0x150>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	4b41      	ldr	r3, [pc, #260]	; (8001efc <xTaskIncrementTick+0x154>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a3f      	ldr	r2, [pc, #252]	; (8001ef8 <xTaskIncrementTick+0x150>)
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	4a3f      	ldr	r2, [pc, #252]	; (8001efc <xTaskIncrementTick+0x154>)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	4b3e      	ldr	r3, [pc, #248]	; (8001f00 <xTaskIncrementTick+0x158>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	4a3d      	ldr	r2, [pc, #244]	; (8001f00 <xTaskIncrementTick+0x158>)
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	f000 fad1 	bl	80023b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001e12:	4b3c      	ldr	r3, [pc, #240]	; (8001f04 <xTaskIncrementTick+0x15c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d349      	bcc.n	8001eb0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e1c:	4b36      	ldr	r3, [pc, #216]	; (8001ef8 <xTaskIncrementTick+0x150>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d104      	bne.n	8001e30 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e26:	4b37      	ldr	r3, [pc, #220]	; (8001f04 <xTaskIncrementTick+0x15c>)
 8001e28:	f04f 32ff 	mov.w	r2, #4294967295
 8001e2c:	601a      	str	r2, [r3, #0]
					break;
 8001e2e:	e03f      	b.n	8001eb0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e30:	4b31      	ldr	r3, [pc, #196]	; (8001ef8 <xTaskIncrementTick+0x150>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d203      	bcs.n	8001e50 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001e48:	4a2e      	ldr	r2, [pc, #184]	; (8001f04 <xTaskIncrementTick+0x15c>)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001e4e:	e02f      	b.n	8001eb0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	3304      	adds	r3, #4
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe fe09 	bl	8000a6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d004      	beq.n	8001e6c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	3318      	adds	r3, #24
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe fe00 	bl	8000a6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e70:	4b25      	ldr	r3, [pc, #148]	; (8001f08 <xTaskIncrementTick+0x160>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d903      	bls.n	8001e80 <xTaskIncrementTick+0xd8>
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7c:	4a22      	ldr	r2, [pc, #136]	; (8001f08 <xTaskIncrementTick+0x160>)
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4a1f      	ldr	r2, [pc, #124]	; (8001f0c <xTaskIncrementTick+0x164>)
 8001e8e:	441a      	add	r2, r3
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	3304      	adds	r3, #4
 8001e94:	4619      	mov	r1, r3
 8001e96:	4610      	mov	r0, r2
 8001e98:	f7fe fd8b 	bl	80009b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	; (8001f10 <xTaskIncrementTick+0x168>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d3b8      	bcc.n	8001e1c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001eae:	e7b5      	b.n	8001e1c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001eb0:	4b17      	ldr	r3, [pc, #92]	; (8001f10 <xTaskIncrementTick+0x168>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eb6:	4915      	ldr	r1, [pc, #84]	; (8001f0c <xTaskIncrementTick+0x164>)
 8001eb8:	4613      	mov	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d901      	bls.n	8001ecc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <xTaskIncrementTick+0x16c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d007      	beq.n	8001ee4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	e004      	b.n	8001ee4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001eda:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <xTaskIncrementTick+0x170>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	4a0d      	ldr	r2, [pc, #52]	; (8001f18 <xTaskIncrementTick+0x170>)
 8001ee2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001ee4:	697b      	ldr	r3, [r7, #20]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000ccc 	.word	0x20000ccc
 8001ef4:	20000ca8 	.word	0x20000ca8
 8001ef8:	20000c5c 	.word	0x20000c5c
 8001efc:	20000c60 	.word	0x20000c60
 8001f00:	20000cbc 	.word	0x20000cbc
 8001f04:	20000cc4 	.word	0x20000cc4
 8001f08:	20000cac 	.word	0x20000cac
 8001f0c:	200007d4 	.word	0x200007d4
 8001f10:	200007d0 	.word	0x200007d0
 8001f14:	20000cb8 	.word	0x20000cb8
 8001f18:	20000cb4 	.word	0x20000cb4

08001f1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001f22:	4b28      	ldr	r3, [pc, #160]	; (8001fc4 <vTaskSwitchContext+0xa8>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001f2a:	4b27      	ldr	r3, [pc, #156]	; (8001fc8 <vTaskSwitchContext+0xac>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001f30:	e041      	b.n	8001fb6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8001f32:	4b25      	ldr	r3, [pc, #148]	; (8001fc8 <vTaskSwitchContext+0xac>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f38:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <vTaskSwitchContext+0xb0>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	e010      	b.n	8001f62 <vTaskSwitchContext+0x46>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10a      	bne.n	8001f5c <vTaskSwitchContext+0x40>
	__asm volatile
 8001f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f4a:	f383 8811 	msr	BASEPRI, r3
 8001f4e:	f3bf 8f6f 	isb	sy
 8001f52:	f3bf 8f4f 	dsb	sy
 8001f56:	607b      	str	r3, [r7, #4]
}
 8001f58:	bf00      	nop
 8001f5a:	e7fe      	b.n	8001f5a <vTaskSwitchContext+0x3e>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	491b      	ldr	r1, [pc, #108]	; (8001fd0 <vTaskSwitchContext+0xb4>)
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	4613      	mov	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	440b      	add	r3, r1
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0e4      	beq.n	8001f40 <vTaskSwitchContext+0x24>
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4a13      	ldr	r2, [pc, #76]	; (8001fd0 <vTaskSwitchContext+0xb4>)
 8001f82:	4413      	add	r3, r2
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	3308      	adds	r3, #8
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d104      	bne.n	8001fa6 <vTaskSwitchContext+0x8a>
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	4a09      	ldr	r2, [pc, #36]	; (8001fd4 <vTaskSwitchContext+0xb8>)
 8001fae:	6013      	str	r3, [r2, #0]
 8001fb0:	4a06      	ldr	r2, [pc, #24]	; (8001fcc <vTaskSwitchContext+0xb0>)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6013      	str	r3, [r2, #0]
}
 8001fb6:	bf00      	nop
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000ccc 	.word	0x20000ccc
 8001fc8:	20000cb8 	.word	0x20000cb8
 8001fcc:	20000cac 	.word	0x20000cac
 8001fd0:	200007d4 	.word	0x200007d4
 8001fd4:	200007d0 	.word	0x200007d0

08001fd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10a      	bne.n	8001ffe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8001fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fec:	f383 8811 	msr	BASEPRI, r3
 8001ff0:	f3bf 8f6f 	isb	sy
 8001ff4:	f3bf 8f4f 	dsb	sy
 8001ff8:	60fb      	str	r3, [r7, #12]
}
 8001ffa:	bf00      	nop
 8001ffc:	e7fe      	b.n	8001ffc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001ffe:	4b07      	ldr	r3, [pc, #28]	; (800201c <vTaskPlaceOnEventList+0x44>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	3318      	adds	r3, #24
 8002004:	4619      	mov	r1, r3
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7fe fcf7 	bl	80009fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800200c:	2101      	movs	r1, #1
 800200e:	6838      	ldr	r0, [r7, #0]
 8002010:	f000 fb7a 	bl	8002708 <prvAddCurrentTaskToDelayedList>
}
 8002014:	bf00      	nop
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	200007d0 	.word	0x200007d0

08002020 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10a      	bne.n	8002048 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8002032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002036:	f383 8811 	msr	BASEPRI, r3
 800203a:	f3bf 8f6f 	isb	sy
 800203e:	f3bf 8f4f 	dsb	sy
 8002042:	617b      	str	r3, [r7, #20]
}
 8002044:	bf00      	nop
 8002046:	e7fe      	b.n	8002046 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002048:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <vTaskPlaceOnEventListRestricted+0x54>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	3318      	adds	r3, #24
 800204e:	4619      	mov	r1, r3
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f7fe fcae 	bl	80009b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d002      	beq.n	8002062 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800205c:	f04f 33ff 	mov.w	r3, #4294967295
 8002060:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	68b8      	ldr	r0, [r7, #8]
 8002066:	f000 fb4f 	bl	8002708 <prvAddCurrentTaskToDelayedList>
	}
 800206a:	bf00      	nop
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	200007d0 	.word	0x200007d0

08002078 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10a      	bne.n	80020a4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800208e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002092:	f383 8811 	msr	BASEPRI, r3
 8002096:	f3bf 8f6f 	isb	sy
 800209a:	f3bf 8f4f 	dsb	sy
 800209e:	60fb      	str	r3, [r7, #12]
}
 80020a0:	bf00      	nop
 80020a2:	e7fe      	b.n	80020a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	3318      	adds	r3, #24
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe fcdf 	bl	8000a6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020ae:	4b1e      	ldr	r3, [pc, #120]	; (8002128 <xTaskRemoveFromEventList+0xb0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d11d      	bne.n	80020f2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	3304      	adds	r3, #4
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe fcd6 	bl	8000a6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c4:	4b19      	ldr	r3, [pc, #100]	; (800212c <xTaskRemoveFromEventList+0xb4>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d903      	bls.n	80020d4 <xTaskRemoveFromEventList+0x5c>
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	4a16      	ldr	r2, [pc, #88]	; (800212c <xTaskRemoveFromEventList+0xb4>)
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4a13      	ldr	r2, [pc, #76]	; (8002130 <xTaskRemoveFromEventList+0xb8>)
 80020e2:	441a      	add	r2, r3
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	3304      	adds	r3, #4
 80020e8:	4619      	mov	r1, r3
 80020ea:	4610      	mov	r0, r2
 80020ec:	f7fe fc61 	bl	80009b2 <vListInsertEnd>
 80020f0:	e005      	b.n	80020fe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	3318      	adds	r3, #24
 80020f6:	4619      	mov	r1, r3
 80020f8:	480e      	ldr	r0, [pc, #56]	; (8002134 <xTaskRemoveFromEventList+0xbc>)
 80020fa:	f7fe fc5a 	bl	80009b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002102:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <xTaskRemoveFromEventList+0xc0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002108:	429a      	cmp	r2, r3
 800210a:	d905      	bls.n	8002118 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800210c:	2301      	movs	r3, #1
 800210e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002110:	4b0a      	ldr	r3, [pc, #40]	; (800213c <xTaskRemoveFromEventList+0xc4>)
 8002112:	2201      	movs	r2, #1
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	e001      	b.n	800211c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800211c:	697b      	ldr	r3, [r7, #20]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000ccc 	.word	0x20000ccc
 800212c:	20000cac 	.word	0x20000cac
 8002130:	200007d4 	.word	0x200007d4
 8002134:	20000c64 	.word	0x20000c64
 8002138:	200007d0 	.word	0x200007d0
 800213c:	20000cb8 	.word	0x20000cb8

08002140 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <vTaskInternalSetTimeOutState+0x24>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002150:	4b05      	ldr	r3, [pc, #20]	; (8002168 <vTaskInternalSetTimeOutState+0x28>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	605a      	str	r2, [r3, #4]
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	20000cbc 	.word	0x20000cbc
 8002168:	20000ca8 	.word	0x20000ca8

0800216c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b088      	sub	sp, #32
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10a      	bne.n	8002192 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800217c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002180:	f383 8811 	msr	BASEPRI, r3
 8002184:	f3bf 8f6f 	isb	sy
 8002188:	f3bf 8f4f 	dsb	sy
 800218c:	613b      	str	r3, [r7, #16]
}
 800218e:	bf00      	nop
 8002190:	e7fe      	b.n	8002190 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10a      	bne.n	80021ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8002198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800219c:	f383 8811 	msr	BASEPRI, r3
 80021a0:	f3bf 8f6f 	isb	sy
 80021a4:	f3bf 8f4f 	dsb	sy
 80021a8:	60fb      	str	r3, [r7, #12]
}
 80021aa:	bf00      	nop
 80021ac:	e7fe      	b.n	80021ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80021ae:	f000 ff79 	bl	80030a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80021b2:	4b1d      	ldr	r3, [pc, #116]	; (8002228 <xTaskCheckForTimeOut+0xbc>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ca:	d102      	bne.n	80021d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80021cc:	2300      	movs	r3, #0
 80021ce:	61fb      	str	r3, [r7, #28]
 80021d0:	e023      	b.n	800221a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	4b15      	ldr	r3, [pc, #84]	; (800222c <xTaskCheckForTimeOut+0xc0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d007      	beq.n	80021ee <xTaskCheckForTimeOut+0x82>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d302      	bcc.n	80021ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80021e8:	2301      	movs	r3, #1
 80021ea:	61fb      	str	r3, [r7, #28]
 80021ec:	e015      	b.n	800221a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d20b      	bcs.n	8002210 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	1ad2      	subs	r2, r2, r3
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7ff ff9b 	bl	8002140 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
 800220e:	e004      	b.n	800221a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002216:	2301      	movs	r3, #1
 8002218:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800221a:	f000 ff73 	bl	8003104 <vPortExitCritical>

	return xReturn;
 800221e:	69fb      	ldr	r3, [r7, #28]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3720      	adds	r7, #32
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20000ca8 	.word	0x20000ca8
 800222c:	20000cbc 	.word	0x20000cbc

08002230 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002234:	4b03      	ldr	r3, [pc, #12]	; (8002244 <vTaskMissedYield+0x14>)
 8002236:	2201      	movs	r2, #1
 8002238:	601a      	str	r2, [r3, #0]
}
 800223a:	bf00      	nop
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	20000cb8 	.word	0x20000cb8

08002248 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002250:	f000 f852 	bl	80022f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <prvIdleTask+0x28>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d9f9      	bls.n	8002250 <prvIdleTask+0x8>
			{
				taskYIELD();
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <prvIdleTask+0x2c>)
 800225e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	f3bf 8f4f 	dsb	sy
 8002268:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800226c:	e7f0      	b.n	8002250 <prvIdleTask+0x8>
 800226e:	bf00      	nop
 8002270:	200007d4 	.word	0x200007d4
 8002274:	e000ed04 	.word	0xe000ed04

08002278 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800227e:	2300      	movs	r3, #0
 8002280:	607b      	str	r3, [r7, #4]
 8002282:	e00c      	b.n	800229e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4a12      	ldr	r2, [pc, #72]	; (80022d8 <prvInitialiseTaskLists+0x60>)
 8002290:	4413      	add	r3, r2
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe fb60 	bl	8000958 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3301      	adds	r3, #1
 800229c:	607b      	str	r3, [r7, #4]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b37      	cmp	r3, #55	; 0x37
 80022a2:	d9ef      	bls.n	8002284 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80022a4:	480d      	ldr	r0, [pc, #52]	; (80022dc <prvInitialiseTaskLists+0x64>)
 80022a6:	f7fe fb57 	bl	8000958 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80022aa:	480d      	ldr	r0, [pc, #52]	; (80022e0 <prvInitialiseTaskLists+0x68>)
 80022ac:	f7fe fb54 	bl	8000958 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80022b0:	480c      	ldr	r0, [pc, #48]	; (80022e4 <prvInitialiseTaskLists+0x6c>)
 80022b2:	f7fe fb51 	bl	8000958 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80022b6:	480c      	ldr	r0, [pc, #48]	; (80022e8 <prvInitialiseTaskLists+0x70>)
 80022b8:	f7fe fb4e 	bl	8000958 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80022bc:	480b      	ldr	r0, [pc, #44]	; (80022ec <prvInitialiseTaskLists+0x74>)
 80022be:	f7fe fb4b 	bl	8000958 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80022c2:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <prvInitialiseTaskLists+0x78>)
 80022c4:	4a05      	ldr	r2, [pc, #20]	; (80022dc <prvInitialiseTaskLists+0x64>)
 80022c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80022c8:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <prvInitialiseTaskLists+0x7c>)
 80022ca:	4a05      	ldr	r2, [pc, #20]	; (80022e0 <prvInitialiseTaskLists+0x68>)
 80022cc:	601a      	str	r2, [r3, #0]
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	200007d4 	.word	0x200007d4
 80022dc:	20000c34 	.word	0x20000c34
 80022e0:	20000c48 	.word	0x20000c48
 80022e4:	20000c64 	.word	0x20000c64
 80022e8:	20000c78 	.word	0x20000c78
 80022ec:	20000c90 	.word	0x20000c90
 80022f0:	20000c5c 	.word	0x20000c5c
 80022f4:	20000c60 	.word	0x20000c60

080022f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80022fe:	e019      	b.n	8002334 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002300:	f000 fed0 	bl	80030a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002304:	4b10      	ldr	r3, [pc, #64]	; (8002348 <prvCheckTasksWaitingTermination+0x50>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3304      	adds	r3, #4
 8002310:	4618      	mov	r0, r3
 8002312:	f7fe fbab 	bl	8000a6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002316:	4b0d      	ldr	r3, [pc, #52]	; (800234c <prvCheckTasksWaitingTermination+0x54>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	3b01      	subs	r3, #1
 800231c:	4a0b      	ldr	r2, [pc, #44]	; (800234c <prvCheckTasksWaitingTermination+0x54>)
 800231e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002320:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <prvCheckTasksWaitingTermination+0x58>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	3b01      	subs	r3, #1
 8002326:	4a0a      	ldr	r2, [pc, #40]	; (8002350 <prvCheckTasksWaitingTermination+0x58>)
 8002328:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800232a:	f000 feeb 	bl	8003104 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f810 	bl	8002354 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <prvCheckTasksWaitingTermination+0x58>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1e1      	bne.n	8002300 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800233c:	bf00      	nop
 800233e:	bf00      	nop
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20000c78 	.word	0x20000c78
 800234c:	20000ca4 	.word	0x20000ca4
 8002350:	20000c8c 	.word	0x20000c8c

08002354 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002362:	2b00      	cmp	r3, #0
 8002364:	d108      	bne.n	8002378 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	4618      	mov	r0, r3
 800236c:	f001 f888 	bl	8003480 <vPortFree>
				vPortFree( pxTCB );
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f001 f885 	bl	8003480 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002376:	e018      	b.n	80023aa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800237e:	2b01      	cmp	r3, #1
 8002380:	d103      	bne.n	800238a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f001 f87c 	bl	8003480 <vPortFree>
	}
 8002388:	e00f      	b.n	80023aa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002390:	2b02      	cmp	r3, #2
 8002392:	d00a      	beq.n	80023aa <prvDeleteTCB+0x56>
	__asm volatile
 8002394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002398:	f383 8811 	msr	BASEPRI, r3
 800239c:	f3bf 8f6f 	isb	sy
 80023a0:	f3bf 8f4f 	dsb	sy
 80023a4:	60fb      	str	r3, [r7, #12]
}
 80023a6:	bf00      	nop
 80023a8:	e7fe      	b.n	80023a8 <prvDeleteTCB+0x54>
	}
 80023aa:	bf00      	nop
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80023ba:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <prvResetNextTaskUnblockTime+0x38>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d104      	bne.n	80023ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80023c4:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <prvResetNextTaskUnblockTime+0x3c>)
 80023c6:	f04f 32ff 	mov.w	r2, #4294967295
 80023ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80023cc:	e008      	b.n	80023e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80023ce:	4b07      	ldr	r3, [pc, #28]	; (80023ec <prvResetNextTaskUnblockTime+0x38>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	4a04      	ldr	r2, [pc, #16]	; (80023f0 <prvResetNextTaskUnblockTime+0x3c>)
 80023de:	6013      	str	r3, [r2, #0]
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	20000c5c 	.word	0x20000c5c
 80023f0:	20000cc4 	.word	0x20000cc4

080023f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80023fa:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <xTaskGetSchedulerState+0x34>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d102      	bne.n	8002408 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002402:	2301      	movs	r3, #1
 8002404:	607b      	str	r3, [r7, #4]
 8002406:	e008      	b.n	800241a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002408:	4b08      	ldr	r3, [pc, #32]	; (800242c <xTaskGetSchedulerState+0x38>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d102      	bne.n	8002416 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002410:	2302      	movs	r3, #2
 8002412:	607b      	str	r3, [r7, #4]
 8002414:	e001      	b.n	800241a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002416:	2300      	movs	r3, #0
 8002418:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800241a:	687b      	ldr	r3, [r7, #4]
	}
 800241c:	4618      	mov	r0, r3
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	20000cb0 	.word	0x20000cb0
 800242c:	20000ccc 	.word	0x20000ccc

08002430 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800243c:	2300      	movs	r3, #0
 800243e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d051      	beq.n	80024ea <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800244a:	4b2a      	ldr	r3, [pc, #168]	; (80024f4 <xTaskPriorityInherit+0xc4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002450:	429a      	cmp	r2, r3
 8002452:	d241      	bcs.n	80024d8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	2b00      	cmp	r3, #0
 800245a:	db06      	blt.n	800246a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800245c:	4b25      	ldr	r3, [pc, #148]	; (80024f4 <xTaskPriorityInherit+0xc4>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002462:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	6959      	ldr	r1, [r3, #20]
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002472:	4613      	mov	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4a1f      	ldr	r2, [pc, #124]	; (80024f8 <xTaskPriorityInherit+0xc8>)
 800247c:	4413      	add	r3, r2
 800247e:	4299      	cmp	r1, r3
 8002480:	d122      	bne.n	80024c8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	3304      	adds	r3, #4
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe faf0 	bl	8000a6c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800248c:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <xTaskPriorityInherit+0xc4>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800249a:	4b18      	ldr	r3, [pc, #96]	; (80024fc <xTaskPriorityInherit+0xcc>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d903      	bls.n	80024aa <xTaskPriorityInherit+0x7a>
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a6:	4a15      	ldr	r2, [pc, #84]	; (80024fc <xTaskPriorityInherit+0xcc>)
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ae:	4613      	mov	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4a10      	ldr	r2, [pc, #64]	; (80024f8 <xTaskPriorityInherit+0xc8>)
 80024b8:	441a      	add	r2, r3
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	3304      	adds	r3, #4
 80024be:	4619      	mov	r1, r3
 80024c0:	4610      	mov	r0, r2
 80024c2:	f7fe fa76 	bl	80009b2 <vListInsertEnd>
 80024c6:	e004      	b.n	80024d2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80024c8:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <xTaskPriorityInherit+0xc4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80024d2:	2301      	movs	r3, #1
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	e008      	b.n	80024ea <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024dc:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <xTaskPriorityInherit+0xc4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d201      	bcs.n	80024ea <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80024e6:	2301      	movs	r3, #1
 80024e8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80024ea:	68fb      	ldr	r3, [r7, #12]
	}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	200007d0 	.word	0x200007d0
 80024f8:	200007d4 	.word	0x200007d4
 80024fc:	20000cac 	.word	0x20000cac

08002500 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d056      	beq.n	80025c4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002516:	4b2e      	ldr	r3, [pc, #184]	; (80025d0 <xTaskPriorityDisinherit+0xd0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	429a      	cmp	r2, r3
 800251e:	d00a      	beq.n	8002536 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8002520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002524:	f383 8811 	msr	BASEPRI, r3
 8002528:	f3bf 8f6f 	isb	sy
 800252c:	f3bf 8f4f 	dsb	sy
 8002530:	60fb      	str	r3, [r7, #12]
}
 8002532:	bf00      	nop
 8002534:	e7fe      	b.n	8002534 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10a      	bne.n	8002554 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800253e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002542:	f383 8811 	msr	BASEPRI, r3
 8002546:	f3bf 8f6f 	isb	sy
 800254a:	f3bf 8f4f 	dsb	sy
 800254e:	60bb      	str	r3, [r7, #8]
}
 8002550:	bf00      	nop
 8002552:	e7fe      	b.n	8002552 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002558:	1e5a      	subs	r2, r3, #1
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002566:	429a      	cmp	r2, r3
 8002568:	d02c      	beq.n	80025c4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800256e:	2b00      	cmp	r3, #0
 8002570:	d128      	bne.n	80025c4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	3304      	adds	r3, #4
 8002576:	4618      	mov	r0, r3
 8002578:	f7fe fa78 	bl	8000a6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002588:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002594:	4b0f      	ldr	r3, [pc, #60]	; (80025d4 <xTaskPriorityDisinherit+0xd4>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	429a      	cmp	r2, r3
 800259a:	d903      	bls.n	80025a4 <xTaskPriorityDisinherit+0xa4>
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a0:	4a0c      	ldr	r2, [pc, #48]	; (80025d4 <xTaskPriorityDisinherit+0xd4>)
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4a09      	ldr	r2, [pc, #36]	; (80025d8 <xTaskPriorityDisinherit+0xd8>)
 80025b2:	441a      	add	r2, r3
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	3304      	adds	r3, #4
 80025b8:	4619      	mov	r1, r3
 80025ba:	4610      	mov	r0, r2
 80025bc:	f7fe f9f9 	bl	80009b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80025c0:	2301      	movs	r3, #1
 80025c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80025c4:	697b      	ldr	r3, [r7, #20]
	}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	200007d0 	.word	0x200007d0
 80025d4:	20000cac 	.word	0x20000cac
 80025d8:	200007d4 	.word	0x200007d4

080025dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80025ea:	2301      	movs	r3, #1
 80025ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d06a      	beq.n	80026ca <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10a      	bne.n	8002612 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80025fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002600:	f383 8811 	msr	BASEPRI, r3
 8002604:	f3bf 8f6f 	isb	sy
 8002608:	f3bf 8f4f 	dsb	sy
 800260c:	60fb      	str	r3, [r7, #12]
}
 800260e:	bf00      	nop
 8002610:	e7fe      	b.n	8002610 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	429a      	cmp	r2, r3
 800261a:	d902      	bls.n	8002622 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	61fb      	str	r3, [r7, #28]
 8002620:	e002      	b.n	8002628 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002626:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262c:	69fa      	ldr	r2, [r7, #28]
 800262e:	429a      	cmp	r2, r3
 8002630:	d04b      	beq.n	80026ca <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	429a      	cmp	r2, r3
 800263a:	d146      	bne.n	80026ca <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800263c:	4b25      	ldr	r3, [pc, #148]	; (80026d4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	429a      	cmp	r2, r3
 8002644:	d10a      	bne.n	800265c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8002646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264a:	f383 8811 	msr	BASEPRI, r3
 800264e:	f3bf 8f6f 	isb	sy
 8002652:	f3bf 8f4f 	dsb	sy
 8002656:	60bb      	str	r3, [r7, #8]
}
 8002658:	bf00      	nop
 800265a:	e7fe      	b.n	800265a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002660:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	69fa      	ldr	r2, [r7, #28]
 8002666:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	2b00      	cmp	r3, #0
 800266e:	db04      	blt.n	800267a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	6959      	ldr	r1, [r3, #20]
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	4613      	mov	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4a13      	ldr	r2, [pc, #76]	; (80026d8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800268a:	4413      	add	r3, r2
 800268c:	4299      	cmp	r1, r3
 800268e:	d11c      	bne.n	80026ca <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	3304      	adds	r3, #4
 8002694:	4618      	mov	r0, r3
 8002696:	f7fe f9e9 	bl	8000a6c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800269e:	4b0f      	ldr	r3, [pc, #60]	; (80026dc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d903      	bls.n	80026ae <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026aa:	4a0c      	ldr	r2, [pc, #48]	; (80026dc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4a07      	ldr	r2, [pc, #28]	; (80026d8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80026bc:	441a      	add	r2, r3
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	3304      	adds	r3, #4
 80026c2:	4619      	mov	r1, r3
 80026c4:	4610      	mov	r0, r2
 80026c6:	f7fe f974 	bl	80009b2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80026ca:	bf00      	nop
 80026cc:	3720      	adds	r7, #32
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	200007d0 	.word	0x200007d0
 80026d8:	200007d4 	.word	0x200007d4
 80026dc:	20000cac 	.word	0x20000cac

080026e0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80026e4:	4b07      	ldr	r3, [pc, #28]	; (8002704 <pvTaskIncrementMutexHeldCount+0x24>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d004      	beq.n	80026f6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80026ec:	4b05      	ldr	r3, [pc, #20]	; (8002704 <pvTaskIncrementMutexHeldCount+0x24>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026f2:	3201      	adds	r2, #1
 80026f4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80026f6:	4b03      	ldr	r3, [pc, #12]	; (8002704 <pvTaskIncrementMutexHeldCount+0x24>)
 80026f8:	681b      	ldr	r3, [r3, #0]
	}
 80026fa:	4618      	mov	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	200007d0 	.word	0x200007d0

08002708 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002712:	4b21      	ldr	r3, [pc, #132]	; (8002798 <prvAddCurrentTaskToDelayedList+0x90>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002718:	4b20      	ldr	r3, [pc, #128]	; (800279c <prvAddCurrentTaskToDelayedList+0x94>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	3304      	adds	r3, #4
 800271e:	4618      	mov	r0, r3
 8002720:	f7fe f9a4 	bl	8000a6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272a:	d10a      	bne.n	8002742 <prvAddCurrentTaskToDelayedList+0x3a>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d007      	beq.n	8002742 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002732:	4b1a      	ldr	r3, [pc, #104]	; (800279c <prvAddCurrentTaskToDelayedList+0x94>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	3304      	adds	r3, #4
 8002738:	4619      	mov	r1, r3
 800273a:	4819      	ldr	r0, [pc, #100]	; (80027a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800273c:	f7fe f939 	bl	80009b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002740:	e026      	b.n	8002790 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4413      	add	r3, r2
 8002748:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800274a:	4b14      	ldr	r3, [pc, #80]	; (800279c <prvAddCurrentTaskToDelayedList+0x94>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	429a      	cmp	r2, r3
 8002758:	d209      	bcs.n	800276e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800275a:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	4b0f      	ldr	r3, [pc, #60]	; (800279c <prvAddCurrentTaskToDelayedList+0x94>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	3304      	adds	r3, #4
 8002764:	4619      	mov	r1, r3
 8002766:	4610      	mov	r0, r2
 8002768:	f7fe f947 	bl	80009fa <vListInsert>
}
 800276c:	e010      	b.n	8002790 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800276e:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	4b0a      	ldr	r3, [pc, #40]	; (800279c <prvAddCurrentTaskToDelayedList+0x94>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	3304      	adds	r3, #4
 8002778:	4619      	mov	r1, r3
 800277a:	4610      	mov	r0, r2
 800277c:	f7fe f93d 	bl	80009fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002780:	4b0a      	ldr	r3, [pc, #40]	; (80027ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68ba      	ldr	r2, [r7, #8]
 8002786:	429a      	cmp	r2, r3
 8002788:	d202      	bcs.n	8002790 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800278a:	4a08      	ldr	r2, [pc, #32]	; (80027ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	6013      	str	r3, [r2, #0]
}
 8002790:	bf00      	nop
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	20000ca8 	.word	0x20000ca8
 800279c:	200007d0 	.word	0x200007d0
 80027a0:	20000c90 	.word	0x20000c90
 80027a4:	20000c60 	.word	0x20000c60
 80027a8:	20000c5c 	.word	0x20000c5c
 80027ac:	20000cc4 	.word	0x20000cc4

080027b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08a      	sub	sp, #40	; 0x28
 80027b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80027ba:	f000 fb07 	bl	8002dcc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80027be:	4b1c      	ldr	r3, [pc, #112]	; (8002830 <xTimerCreateTimerTask+0x80>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d021      	beq.n	800280a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80027ce:	1d3a      	adds	r2, r7, #4
 80027d0:	f107 0108 	add.w	r1, r7, #8
 80027d4:	f107 030c 	add.w	r3, r7, #12
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fe f8a3 	bl	8000924 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	9202      	str	r2, [sp, #8]
 80027e6:	9301      	str	r3, [sp, #4]
 80027e8:	2302      	movs	r3, #2
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	2300      	movs	r3, #0
 80027ee:	460a      	mov	r2, r1
 80027f0:	4910      	ldr	r1, [pc, #64]	; (8002834 <xTimerCreateTimerTask+0x84>)
 80027f2:	4811      	ldr	r0, [pc, #68]	; (8002838 <xTimerCreateTimerTask+0x88>)
 80027f4:	f7fe ffe0 	bl	80017b8 <xTaskCreateStatic>
 80027f8:	4603      	mov	r3, r0
 80027fa:	4a10      	ldr	r2, [pc, #64]	; (800283c <xTimerCreateTimerTask+0x8c>)
 80027fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80027fe:	4b0f      	ldr	r3, [pc, #60]	; (800283c <xTimerCreateTimerTask+0x8c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8002806:	2301      	movs	r3, #1
 8002808:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10a      	bne.n	8002826 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8002810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002814:	f383 8811 	msr	BASEPRI, r3
 8002818:	f3bf 8f6f 	isb	sy
 800281c:	f3bf 8f4f 	dsb	sy
 8002820:	613b      	str	r3, [r7, #16]
}
 8002822:	bf00      	nop
 8002824:	e7fe      	b.n	8002824 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8002826:	697b      	ldr	r3, [r7, #20]
}
 8002828:	4618      	mov	r0, r3
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	20000d00 	.word	0x20000d00
 8002834:	0800405c 	.word	0x0800405c
 8002838:	08002975 	.word	0x08002975
 800283c:	20000d04 	.word	0x20000d04

08002840 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b08a      	sub	sp, #40	; 0x28
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
 800284c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800284e:	2300      	movs	r3, #0
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10a      	bne.n	800286e <xTimerGenericCommand+0x2e>
	__asm volatile
 8002858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800285c:	f383 8811 	msr	BASEPRI, r3
 8002860:	f3bf 8f6f 	isb	sy
 8002864:	f3bf 8f4f 	dsb	sy
 8002868:	623b      	str	r3, [r7, #32]
}
 800286a:	bf00      	nop
 800286c:	e7fe      	b.n	800286c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800286e:	4b1a      	ldr	r3, [pc, #104]	; (80028d8 <xTimerGenericCommand+0x98>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d02a      	beq.n	80028cc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2b05      	cmp	r3, #5
 8002886:	dc18      	bgt.n	80028ba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002888:	f7ff fdb4 	bl	80023f4 <xTaskGetSchedulerState>
 800288c:	4603      	mov	r3, r0
 800288e:	2b02      	cmp	r3, #2
 8002890:	d109      	bne.n	80028a6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002892:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <xTimerGenericCommand+0x98>)
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	f107 0110 	add.w	r1, r7, #16
 800289a:	2300      	movs	r3, #0
 800289c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800289e:	f7fe fa7f 	bl	8000da0 <xQueueGenericSend>
 80028a2:	6278      	str	r0, [r7, #36]	; 0x24
 80028a4:	e012      	b.n	80028cc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80028a6:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <xTimerGenericCommand+0x98>)
 80028a8:	6818      	ldr	r0, [r3, #0]
 80028aa:	f107 0110 	add.w	r1, r7, #16
 80028ae:	2300      	movs	r3, #0
 80028b0:	2200      	movs	r2, #0
 80028b2:	f7fe fa75 	bl	8000da0 <xQueueGenericSend>
 80028b6:	6278      	str	r0, [r7, #36]	; 0x24
 80028b8:	e008      	b.n	80028cc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80028ba:	4b07      	ldr	r3, [pc, #28]	; (80028d8 <xTimerGenericCommand+0x98>)
 80028bc:	6818      	ldr	r0, [r3, #0]
 80028be:	f107 0110 	add.w	r1, r7, #16
 80028c2:	2300      	movs	r3, #0
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	f7fe fb69 	bl	8000f9c <xQueueGenericSendFromISR>
 80028ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3728      	adds	r7, #40	; 0x28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20000d00 	.word	0x20000d00

080028dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b088      	sub	sp, #32
 80028e0:	af02      	add	r7, sp, #8
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028e6:	4b22      	ldr	r3, [pc, #136]	; (8002970 <prvProcessExpiredTimer+0x94>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	3304      	adds	r3, #4
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fe f8b9 	bl	8000a6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	d022      	beq.n	800294e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	699a      	ldr	r2, [r3, #24]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	18d1      	adds	r1, r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	6978      	ldr	r0, [r7, #20]
 8002916:	f000 f8d1 	bl	8002abc <prvInsertTimerInActiveList>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d01f      	beq.n	8002960 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002920:	2300      	movs	r3, #0
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	2300      	movs	r3, #0
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	2100      	movs	r1, #0
 800292a:	6978      	ldr	r0, [r7, #20]
 800292c:	f7ff ff88 	bl	8002840 <xTimerGenericCommand>
 8002930:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d113      	bne.n	8002960 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8002938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293c:	f383 8811 	msr	BASEPRI, r3
 8002940:	f3bf 8f6f 	isb	sy
 8002944:	f3bf 8f4f 	dsb	sy
 8002948:	60fb      	str	r3, [r7, #12]
}
 800294a:	bf00      	nop
 800294c:	e7fe      	b.n	800294c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002954:	f023 0301 	bic.w	r3, r3, #1
 8002958:	b2da      	uxtb	r2, r3
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	6978      	ldr	r0, [r7, #20]
 8002966:	4798      	blx	r3
}
 8002968:	bf00      	nop
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	20000cf8 	.word	0x20000cf8

08002974 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800297c:	f107 0308 	add.w	r3, r7, #8
 8002980:	4618      	mov	r0, r3
 8002982:	f000 f857 	bl	8002a34 <prvGetNextExpireTime>
 8002986:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	4619      	mov	r1, r3
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f000 f803 	bl	8002998 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002992:	f000 f8d5 	bl	8002b40 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002996:	e7f1      	b.n	800297c <prvTimerTask+0x8>

08002998 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80029a2:	f7ff f945 	bl	8001c30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80029a6:	f107 0308 	add.w	r3, r7, #8
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 f866 	bl	8002a7c <prvSampleTimeNow>
 80029b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d130      	bne.n	8002a1a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10a      	bne.n	80029d4 <prvProcessTimerOrBlockTask+0x3c>
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d806      	bhi.n	80029d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80029c6:	f7ff f941 	bl	8001c4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80029ca:	68f9      	ldr	r1, [r7, #12]
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7ff ff85 	bl	80028dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80029d2:	e024      	b.n	8002a1e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d008      	beq.n	80029ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80029da:	4b13      	ldr	r3, [pc, #76]	; (8002a28 <prvProcessTimerOrBlockTask+0x90>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <prvProcessTimerOrBlockTask+0x50>
 80029e4:	2301      	movs	r3, #1
 80029e6:	e000      	b.n	80029ea <prvProcessTimerOrBlockTask+0x52>
 80029e8:	2300      	movs	r3, #0
 80029ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80029ec:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <prvProcessTimerOrBlockTask+0x94>)
 80029ee:	6818      	ldr	r0, [r3, #0]
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	4619      	mov	r1, r3
 80029fa:	f7fe fea9 	bl	8001750 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80029fe:	f7ff f925 	bl	8001c4c <xTaskResumeAll>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10a      	bne.n	8002a1e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002a08:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <prvProcessTimerOrBlockTask+0x98>)
 8002a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	f3bf 8f4f 	dsb	sy
 8002a14:	f3bf 8f6f 	isb	sy
}
 8002a18:	e001      	b.n	8002a1e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002a1a:	f7ff f917 	bl	8001c4c <xTaskResumeAll>
}
 8002a1e:	bf00      	nop
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	20000cfc 	.word	0x20000cfc
 8002a2c:	20000d00 	.word	0x20000d00
 8002a30:	e000ed04 	.word	0xe000ed04

08002a34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002a3c:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <prvGetNextExpireTime+0x44>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <prvGetNextExpireTime+0x16>
 8002a46:	2201      	movs	r2, #1
 8002a48:	e000      	b.n	8002a4c <prvGetNextExpireTime+0x18>
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d105      	bne.n	8002a64 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002a58:	4b07      	ldr	r3, [pc, #28]	; (8002a78 <prvGetNextExpireTime+0x44>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	e001      	b.n	8002a68 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002a68:	68fb      	ldr	r3, [r7, #12]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	20000cf8 	.word	0x20000cf8

08002a7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002a84:	f7ff f980 	bl	8001d88 <xTaskGetTickCount>
 8002a88:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002a8a:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <prvSampleTimeNow+0x3c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d205      	bcs.n	8002aa0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002a94:	f000 f936 	bl	8002d04 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	e002      	b.n	8002aa6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002aa6:	4a04      	ldr	r2, [pc, #16]	; (8002ab8 <prvSampleTimeNow+0x3c>)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002aac:	68fb      	ldr	r3, [r7, #12]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20000d08 	.word	0x20000d08

08002abc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
 8002ac8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d812      	bhi.n	8002b08 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	1ad2      	subs	r2, r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d302      	bcc.n	8002af6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002af0:	2301      	movs	r3, #1
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	e01b      	b.n	8002b2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002af6:	4b10      	ldr	r3, [pc, #64]	; (8002b38 <prvInsertTimerInActiveList+0x7c>)
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	3304      	adds	r3, #4
 8002afe:	4619      	mov	r1, r3
 8002b00:	4610      	mov	r0, r2
 8002b02:	f7fd ff7a 	bl	80009fa <vListInsert>
 8002b06:	e012      	b.n	8002b2e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d206      	bcs.n	8002b1e <prvInsertTimerInActiveList+0x62>
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d302      	bcc.n	8002b1e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	e007      	b.n	8002b2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002b1e:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <prvInsertTimerInActiveList+0x80>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	3304      	adds	r3, #4
 8002b26:	4619      	mov	r1, r3
 8002b28:	4610      	mov	r0, r2
 8002b2a:	f7fd ff66 	bl	80009fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002b2e:	697b      	ldr	r3, [r7, #20]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	20000cfc 	.word	0x20000cfc
 8002b3c:	20000cf8 	.word	0x20000cf8

08002b40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b08e      	sub	sp, #56	; 0x38
 8002b44:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002b46:	e0ca      	b.n	8002cde <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	da18      	bge.n	8002b80 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8002b4e:	1d3b      	adds	r3, r7, #4
 8002b50:	3304      	adds	r3, #4
 8002b52:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8002b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10a      	bne.n	8002b70 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8002b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5e:	f383 8811 	msr	BASEPRI, r3
 8002b62:	f3bf 8f6f 	isb	sy
 8002b66:	f3bf 8f4f 	dsb	sy
 8002b6a:	61fb      	str	r3, [r7, #28]
}
 8002b6c:	bf00      	nop
 8002b6e:	e7fe      	b.n	8002b6e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8002b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b76:	6850      	ldr	r0, [r2, #4]
 8002b78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b7a:	6892      	ldr	r2, [r2, #8]
 8002b7c:	4611      	mov	r1, r2
 8002b7e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f2c0 80aa 	blt.w	8002cdc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d004      	beq.n	8002b9e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b96:	3304      	adds	r3, #4
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fd ff67 	bl	8000a6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002b9e:	463b      	mov	r3, r7
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff ff6b 	bl	8002a7c <prvSampleTimeNow>
 8002ba6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b09      	cmp	r3, #9
 8002bac:	f200 8097 	bhi.w	8002cde <prvProcessReceivedCommands+0x19e>
 8002bb0:	a201      	add	r2, pc, #4	; (adr r2, 8002bb8 <prvProcessReceivedCommands+0x78>)
 8002bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb6:	bf00      	nop
 8002bb8:	08002be1 	.word	0x08002be1
 8002bbc:	08002be1 	.word	0x08002be1
 8002bc0:	08002be1 	.word	0x08002be1
 8002bc4:	08002c55 	.word	0x08002c55
 8002bc8:	08002c69 	.word	0x08002c69
 8002bcc:	08002cb3 	.word	0x08002cb3
 8002bd0:	08002be1 	.word	0x08002be1
 8002bd4:	08002be1 	.word	0x08002be1
 8002bd8:	08002c55 	.word	0x08002c55
 8002bdc:	08002c69 	.word	0x08002c69
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002be6:	f043 0301 	orr.w	r3, r3, #1
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	18d1      	adds	r1, r2, r3
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c00:	f7ff ff5c 	bl	8002abc <prvInsertTimerInActiveList>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d069      	beq.n	8002cde <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c10:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d05e      	beq.n	8002cde <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	441a      	add	r2, r3
 8002c28:	2300      	movs	r3, #0
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	2100      	movs	r1, #0
 8002c30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c32:	f7ff fe05 	bl	8002840 <xTimerGenericCommand>
 8002c36:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d14f      	bne.n	8002cde <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8002c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c42:	f383 8811 	msr	BASEPRI, r3
 8002c46:	f3bf 8f6f 	isb	sy
 8002c4a:	f3bf 8f4f 	dsb	sy
 8002c4e:	61bb      	str	r3, [r7, #24]
}
 8002c50:	bf00      	nop
 8002c52:	e7fe      	b.n	8002c52 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c5a:	f023 0301 	bic.w	r3, r3, #1
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8002c66:	e03a      	b.n	8002cde <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c6e:	f043 0301 	orr.w	r3, r3, #1
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10a      	bne.n	8002c9e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8002c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8c:	f383 8811 	msr	BASEPRI, r3
 8002c90:	f3bf 8f6f 	isb	sy
 8002c94:	f3bf 8f4f 	dsb	sy
 8002c98:	617b      	str	r3, [r7, #20]
}
 8002c9a:	bf00      	nop
 8002c9c:	e7fe      	b.n	8002c9c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca0:	699a      	ldr	r2, [r3, #24]
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	18d1      	adds	r1, r2, r3
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002caa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cac:	f7ff ff06 	bl	8002abc <prvInsertTimerInActiveList>
					break;
 8002cb0:	e015      	b.n	8002cde <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d103      	bne.n	8002cc8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8002cc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cc2:	f000 fbdd 	bl	8003480 <vPortFree>
 8002cc6:	e00a      	b.n	8002cde <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cce:	f023 0301 	bic.w	r3, r3, #1
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002cda:	e000      	b.n	8002cde <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8002cdc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002cde:	4b08      	ldr	r3, [pc, #32]	; (8002d00 <prvProcessReceivedCommands+0x1c0>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	1d39      	adds	r1, r7, #4
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fe f9f4 	bl	80010d4 <xQueueReceive>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f47f af2a 	bne.w	8002b48 <prvProcessReceivedCommands+0x8>
	}
}
 8002cf4:	bf00      	nop
 8002cf6:	bf00      	nop
 8002cf8:	3730      	adds	r7, #48	; 0x30
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000d00 	.word	0x20000d00

08002d04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b088      	sub	sp, #32
 8002d08:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002d0a:	e048      	b.n	8002d9e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002d0c:	4b2d      	ldr	r3, [pc, #180]	; (8002dc4 <prvSwitchTimerLists+0xc0>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d16:	4b2b      	ldr	r3, [pc, #172]	; (8002dc4 <prvSwitchTimerLists+0xc0>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	3304      	adds	r3, #4
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fd fea1 	bl	8000a6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d02e      	beq.n	8002d9e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	4413      	add	r3, r2
 8002d48:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d90e      	bls.n	8002d70 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002d5e:	4b19      	ldr	r3, [pc, #100]	; (8002dc4 <prvSwitchTimerLists+0xc0>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	3304      	adds	r3, #4
 8002d66:	4619      	mov	r1, r3
 8002d68:	4610      	mov	r0, r2
 8002d6a:	f7fd fe46 	bl	80009fa <vListInsert>
 8002d6e:	e016      	b.n	8002d9e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002d70:	2300      	movs	r3, #0
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	2300      	movs	r3, #0
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	2100      	movs	r1, #0
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f7ff fd60 	bl	8002840 <xTimerGenericCommand>
 8002d80:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10a      	bne.n	8002d9e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8002d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8c:	f383 8811 	msr	BASEPRI, r3
 8002d90:	f3bf 8f6f 	isb	sy
 8002d94:	f3bf 8f4f 	dsb	sy
 8002d98:	603b      	str	r3, [r7, #0]
}
 8002d9a:	bf00      	nop
 8002d9c:	e7fe      	b.n	8002d9c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002d9e:	4b09      	ldr	r3, [pc, #36]	; (8002dc4 <prvSwitchTimerLists+0xc0>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1b1      	bne.n	8002d0c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002da8:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <prvSwitchTimerLists+0xc0>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8002dae:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <prvSwitchTimerLists+0xc4>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a04      	ldr	r2, [pc, #16]	; (8002dc4 <prvSwitchTimerLists+0xc0>)
 8002db4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002db6:	4a04      	ldr	r2, [pc, #16]	; (8002dc8 <prvSwitchTimerLists+0xc4>)
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	6013      	str	r3, [r2, #0]
}
 8002dbc:	bf00      	nop
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	20000cf8 	.word	0x20000cf8
 8002dc8:	20000cfc 	.word	0x20000cfc

08002dcc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002dd2:	f000 f967 	bl	80030a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002dd6:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <prvCheckForValidListAndQueue+0x60>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d120      	bne.n	8002e20 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8002dde:	4814      	ldr	r0, [pc, #80]	; (8002e30 <prvCheckForValidListAndQueue+0x64>)
 8002de0:	f7fd fdba 	bl	8000958 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002de4:	4813      	ldr	r0, [pc, #76]	; (8002e34 <prvCheckForValidListAndQueue+0x68>)
 8002de6:	f7fd fdb7 	bl	8000958 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002dea:	4b13      	ldr	r3, [pc, #76]	; (8002e38 <prvCheckForValidListAndQueue+0x6c>)
 8002dec:	4a10      	ldr	r2, [pc, #64]	; (8002e30 <prvCheckForValidListAndQueue+0x64>)
 8002dee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002df0:	4b12      	ldr	r3, [pc, #72]	; (8002e3c <prvCheckForValidListAndQueue+0x70>)
 8002df2:	4a10      	ldr	r2, [pc, #64]	; (8002e34 <prvCheckForValidListAndQueue+0x68>)
 8002df4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002df6:	2300      	movs	r3, #0
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <prvCheckForValidListAndQueue+0x74>)
 8002dfc:	4a11      	ldr	r2, [pc, #68]	; (8002e44 <prvCheckForValidListAndQueue+0x78>)
 8002dfe:	2110      	movs	r1, #16
 8002e00:	200a      	movs	r0, #10
 8002e02:	f7fd fec5 	bl	8000b90 <xQueueGenericCreateStatic>
 8002e06:	4603      	mov	r3, r0
 8002e08:	4a08      	ldr	r2, [pc, #32]	; (8002e2c <prvCheckForValidListAndQueue+0x60>)
 8002e0a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002e0c:	4b07      	ldr	r3, [pc, #28]	; (8002e2c <prvCheckForValidListAndQueue+0x60>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002e14:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <prvCheckForValidListAndQueue+0x60>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	490b      	ldr	r1, [pc, #44]	; (8002e48 <prvCheckForValidListAndQueue+0x7c>)
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fe fc6e 	bl	80016fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002e20:	f000 f970 	bl	8003104 <vPortExitCritical>
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20000d00 	.word	0x20000d00
 8002e30:	20000cd0 	.word	0x20000cd0
 8002e34:	20000ce4 	.word	0x20000ce4
 8002e38:	20000cf8 	.word	0x20000cf8
 8002e3c:	20000cfc 	.word	0x20000cfc
 8002e40:	20000dac 	.word	0x20000dac
 8002e44:	20000d0c 	.word	0x20000d0c
 8002e48:	08004064 	.word	0x08004064

08002e4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	3b04      	subs	r3, #4
 8002e5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	3b04      	subs	r3, #4
 8002e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f023 0201 	bic.w	r2, r3, #1
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	3b04      	subs	r3, #4
 8002e7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002e7c:	4a0c      	ldr	r2, [pc, #48]	; (8002eb0 <pxPortInitialiseStack+0x64>)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	3b14      	subs	r3, #20
 8002e86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	3b04      	subs	r3, #4
 8002e92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f06f 0202 	mvn.w	r2, #2
 8002e9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	3b20      	subs	r3, #32
 8002ea0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	08002eb5 	.word	0x08002eb5

08002eb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002ebe:	4b12      	ldr	r3, [pc, #72]	; (8002f08 <prvTaskExitError+0x54>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec6:	d00a      	beq.n	8002ede <prvTaskExitError+0x2a>
	__asm volatile
 8002ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ecc:	f383 8811 	msr	BASEPRI, r3
 8002ed0:	f3bf 8f6f 	isb	sy
 8002ed4:	f3bf 8f4f 	dsb	sy
 8002ed8:	60fb      	str	r3, [r7, #12]
}
 8002eda:	bf00      	nop
 8002edc:	e7fe      	b.n	8002edc <prvTaskExitError+0x28>
	__asm volatile
 8002ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee2:	f383 8811 	msr	BASEPRI, r3
 8002ee6:	f3bf 8f6f 	isb	sy
 8002eea:	f3bf 8f4f 	dsb	sy
 8002eee:	60bb      	str	r3, [r7, #8]
}
 8002ef0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002ef2:	bf00      	nop
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0fc      	beq.n	8002ef4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002efa:	bf00      	nop
 8002efc:	bf00      	nop
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	20000004 	.word	0x20000004
 8002f0c:	00000000 	.word	0x00000000

08002f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002f10:	4b07      	ldr	r3, [pc, #28]	; (8002f30 <pxCurrentTCBConst2>)
 8002f12:	6819      	ldr	r1, [r3, #0]
 8002f14:	6808      	ldr	r0, [r1, #0]
 8002f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f1a:	f380 8809 	msr	PSP, r0
 8002f1e:	f3bf 8f6f 	isb	sy
 8002f22:	f04f 0000 	mov.w	r0, #0
 8002f26:	f380 8811 	msr	BASEPRI, r0
 8002f2a:	4770      	bx	lr
 8002f2c:	f3af 8000 	nop.w

08002f30 <pxCurrentTCBConst2>:
 8002f30:	200007d0 	.word	0x200007d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002f34:	bf00      	nop
 8002f36:	bf00      	nop

08002f38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002f38:	4808      	ldr	r0, [pc, #32]	; (8002f5c <prvPortStartFirstTask+0x24>)
 8002f3a:	6800      	ldr	r0, [r0, #0]
 8002f3c:	6800      	ldr	r0, [r0, #0]
 8002f3e:	f380 8808 	msr	MSP, r0
 8002f42:	f04f 0000 	mov.w	r0, #0
 8002f46:	f380 8814 	msr	CONTROL, r0
 8002f4a:	b662      	cpsie	i
 8002f4c:	b661      	cpsie	f
 8002f4e:	f3bf 8f4f 	dsb	sy
 8002f52:	f3bf 8f6f 	isb	sy
 8002f56:	df00      	svc	0
 8002f58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002f5a:	bf00      	nop
 8002f5c:	e000ed08 	.word	0xe000ed08

08002f60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002f66:	4b46      	ldr	r3, [pc, #280]	; (8003080 <xPortStartScheduler+0x120>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a46      	ldr	r2, [pc, #280]	; (8003084 <xPortStartScheduler+0x124>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d10a      	bne.n	8002f86 <xPortStartScheduler+0x26>
	__asm volatile
 8002f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f74:	f383 8811 	msr	BASEPRI, r3
 8002f78:	f3bf 8f6f 	isb	sy
 8002f7c:	f3bf 8f4f 	dsb	sy
 8002f80:	613b      	str	r3, [r7, #16]
}
 8002f82:	bf00      	nop
 8002f84:	e7fe      	b.n	8002f84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002f86:	4b3e      	ldr	r3, [pc, #248]	; (8003080 <xPortStartScheduler+0x120>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a3f      	ldr	r2, [pc, #252]	; (8003088 <xPortStartScheduler+0x128>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d10a      	bne.n	8002fa6 <xPortStartScheduler+0x46>
	__asm volatile
 8002f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f94:	f383 8811 	msr	BASEPRI, r3
 8002f98:	f3bf 8f6f 	isb	sy
 8002f9c:	f3bf 8f4f 	dsb	sy
 8002fa0:	60fb      	str	r3, [r7, #12]
}
 8002fa2:	bf00      	nop
 8002fa4:	e7fe      	b.n	8002fa4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002fa6:	4b39      	ldr	r3, [pc, #228]	; (800308c <xPortStartScheduler+0x12c>)
 8002fa8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	22ff      	movs	r2, #255	; 0xff
 8002fb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002fc0:	78fb      	ldrb	r3, [r7, #3]
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	4b31      	ldr	r3, [pc, #196]	; (8003090 <xPortStartScheduler+0x130>)
 8002fcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002fce:	4b31      	ldr	r3, [pc, #196]	; (8003094 <xPortStartScheduler+0x134>)
 8002fd0:	2207      	movs	r2, #7
 8002fd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002fd4:	e009      	b.n	8002fea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002fd6:	4b2f      	ldr	r3, [pc, #188]	; (8003094 <xPortStartScheduler+0x134>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	4a2d      	ldr	r2, [pc, #180]	; (8003094 <xPortStartScheduler+0x134>)
 8002fde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002fe0:	78fb      	ldrb	r3, [r7, #3]
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002fea:	78fb      	ldrb	r3, [r7, #3]
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff2:	2b80      	cmp	r3, #128	; 0x80
 8002ff4:	d0ef      	beq.n	8002fd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002ff6:	4b27      	ldr	r3, [pc, #156]	; (8003094 <xPortStartScheduler+0x134>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f1c3 0307 	rsb	r3, r3, #7
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d00a      	beq.n	8003018 <xPortStartScheduler+0xb8>
	__asm volatile
 8003002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003006:	f383 8811 	msr	BASEPRI, r3
 800300a:	f3bf 8f6f 	isb	sy
 800300e:	f3bf 8f4f 	dsb	sy
 8003012:	60bb      	str	r3, [r7, #8]
}
 8003014:	bf00      	nop
 8003016:	e7fe      	b.n	8003016 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003018:	4b1e      	ldr	r3, [pc, #120]	; (8003094 <xPortStartScheduler+0x134>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	021b      	lsls	r3, r3, #8
 800301e:	4a1d      	ldr	r2, [pc, #116]	; (8003094 <xPortStartScheduler+0x134>)
 8003020:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003022:	4b1c      	ldr	r3, [pc, #112]	; (8003094 <xPortStartScheduler+0x134>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800302a:	4a1a      	ldr	r2, [pc, #104]	; (8003094 <xPortStartScheduler+0x134>)
 800302c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	b2da      	uxtb	r2, r3
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003036:	4b18      	ldr	r3, [pc, #96]	; (8003098 <xPortStartScheduler+0x138>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a17      	ldr	r2, [pc, #92]	; (8003098 <xPortStartScheduler+0x138>)
 800303c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003040:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003042:	4b15      	ldr	r3, [pc, #84]	; (8003098 <xPortStartScheduler+0x138>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a14      	ldr	r2, [pc, #80]	; (8003098 <xPortStartScheduler+0x138>)
 8003048:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800304c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800304e:	f000 f8dd 	bl	800320c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003052:	4b12      	ldr	r3, [pc, #72]	; (800309c <xPortStartScheduler+0x13c>)
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003058:	f000 f8fc 	bl	8003254 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800305c:	4b10      	ldr	r3, [pc, #64]	; (80030a0 <xPortStartScheduler+0x140>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a0f      	ldr	r2, [pc, #60]	; (80030a0 <xPortStartScheduler+0x140>)
 8003062:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003066:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003068:	f7ff ff66 	bl	8002f38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800306c:	f7fe ff56 	bl	8001f1c <vTaskSwitchContext>
	prvTaskExitError();
 8003070:	f7ff ff20 	bl	8002eb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	e000ed00 	.word	0xe000ed00
 8003084:	410fc271 	.word	0x410fc271
 8003088:	410fc270 	.word	0x410fc270
 800308c:	e000e400 	.word	0xe000e400
 8003090:	20000dfc 	.word	0x20000dfc
 8003094:	20000e00 	.word	0x20000e00
 8003098:	e000ed20 	.word	0xe000ed20
 800309c:	20000004 	.word	0x20000004
 80030a0:	e000ef34 	.word	0xe000ef34

080030a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
	__asm volatile
 80030aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ae:	f383 8811 	msr	BASEPRI, r3
 80030b2:	f3bf 8f6f 	isb	sy
 80030b6:	f3bf 8f4f 	dsb	sy
 80030ba:	607b      	str	r3, [r7, #4]
}
 80030bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80030be:	4b0f      	ldr	r3, [pc, #60]	; (80030fc <vPortEnterCritical+0x58>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	3301      	adds	r3, #1
 80030c4:	4a0d      	ldr	r2, [pc, #52]	; (80030fc <vPortEnterCritical+0x58>)
 80030c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80030c8:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <vPortEnterCritical+0x58>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d10f      	bne.n	80030f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80030d0:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <vPortEnterCritical+0x5c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80030da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030de:	f383 8811 	msr	BASEPRI, r3
 80030e2:	f3bf 8f6f 	isb	sy
 80030e6:	f3bf 8f4f 	dsb	sy
 80030ea:	603b      	str	r3, [r7, #0]
}
 80030ec:	bf00      	nop
 80030ee:	e7fe      	b.n	80030ee <vPortEnterCritical+0x4a>
	}
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	20000004 	.word	0x20000004
 8003100:	e000ed04 	.word	0xe000ed04

08003104 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800310a:	4b12      	ldr	r3, [pc, #72]	; (8003154 <vPortExitCritical+0x50>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10a      	bne.n	8003128 <vPortExitCritical+0x24>
	__asm volatile
 8003112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003116:	f383 8811 	msr	BASEPRI, r3
 800311a:	f3bf 8f6f 	isb	sy
 800311e:	f3bf 8f4f 	dsb	sy
 8003122:	607b      	str	r3, [r7, #4]
}
 8003124:	bf00      	nop
 8003126:	e7fe      	b.n	8003126 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003128:	4b0a      	ldr	r3, [pc, #40]	; (8003154 <vPortExitCritical+0x50>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	3b01      	subs	r3, #1
 800312e:	4a09      	ldr	r2, [pc, #36]	; (8003154 <vPortExitCritical+0x50>)
 8003130:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003132:	4b08      	ldr	r3, [pc, #32]	; (8003154 <vPortExitCritical+0x50>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d105      	bne.n	8003146 <vPortExitCritical+0x42>
 800313a:	2300      	movs	r3, #0
 800313c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	f383 8811 	msr	BASEPRI, r3
}
 8003144:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	20000004 	.word	0x20000004
	...

08003160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003160:	f3ef 8009 	mrs	r0, PSP
 8003164:	f3bf 8f6f 	isb	sy
 8003168:	4b15      	ldr	r3, [pc, #84]	; (80031c0 <pxCurrentTCBConst>)
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	f01e 0f10 	tst.w	lr, #16
 8003170:	bf08      	it	eq
 8003172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800317a:	6010      	str	r0, [r2, #0]
 800317c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003180:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003184:	f380 8811 	msr	BASEPRI, r0
 8003188:	f3bf 8f4f 	dsb	sy
 800318c:	f3bf 8f6f 	isb	sy
 8003190:	f7fe fec4 	bl	8001f1c <vTaskSwitchContext>
 8003194:	f04f 0000 	mov.w	r0, #0
 8003198:	f380 8811 	msr	BASEPRI, r0
 800319c:	bc09      	pop	{r0, r3}
 800319e:	6819      	ldr	r1, [r3, #0]
 80031a0:	6808      	ldr	r0, [r1, #0]
 80031a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031a6:	f01e 0f10 	tst.w	lr, #16
 80031aa:	bf08      	it	eq
 80031ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80031b0:	f380 8809 	msr	PSP, r0
 80031b4:	f3bf 8f6f 	isb	sy
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	f3af 8000 	nop.w

080031c0 <pxCurrentTCBConst>:
 80031c0:	200007d0 	.word	0x200007d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80031c4:	bf00      	nop
 80031c6:	bf00      	nop

080031c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
	__asm volatile
 80031ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d2:	f383 8811 	msr	BASEPRI, r3
 80031d6:	f3bf 8f6f 	isb	sy
 80031da:	f3bf 8f4f 	dsb	sy
 80031de:	607b      	str	r3, [r7, #4]
}
 80031e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80031e2:	f7fe fde1 	bl	8001da8 <xTaskIncrementTick>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80031ec:	4b06      	ldr	r3, [pc, #24]	; (8003208 <xPortSysTickHandler+0x40>)
 80031ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	2300      	movs	r3, #0
 80031f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	f383 8811 	msr	BASEPRI, r3
}
 80031fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003200:	bf00      	nop
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	e000ed04 	.word	0xe000ed04

0800320c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003210:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <vPortSetupTimerInterrupt+0x34>)
 8003212:	2200      	movs	r2, #0
 8003214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003216:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <vPortSetupTimerInterrupt+0x38>)
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800321c:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <vPortSetupTimerInterrupt+0x3c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a0a      	ldr	r2, [pc, #40]	; (800324c <vPortSetupTimerInterrupt+0x40>)
 8003222:	fba2 2303 	umull	r2, r3, r2, r3
 8003226:	099b      	lsrs	r3, r3, #6
 8003228:	4a09      	ldr	r2, [pc, #36]	; (8003250 <vPortSetupTimerInterrupt+0x44>)
 800322a:	3b01      	subs	r3, #1
 800322c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800322e:	4b04      	ldr	r3, [pc, #16]	; (8003240 <vPortSetupTimerInterrupt+0x34>)
 8003230:	2207      	movs	r2, #7
 8003232:	601a      	str	r2, [r3, #0]
}
 8003234:	bf00      	nop
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	e000e010 	.word	0xe000e010
 8003244:	e000e018 	.word	0xe000e018
 8003248:	20000000 	.word	0x20000000
 800324c:	10624dd3 	.word	0x10624dd3
 8003250:	e000e014 	.word	0xe000e014

08003254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003254:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003264 <vPortEnableVFP+0x10>
 8003258:	6801      	ldr	r1, [r0, #0]
 800325a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800325e:	6001      	str	r1, [r0, #0]
 8003260:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003262:	bf00      	nop
 8003264:	e000ed88 	.word	0xe000ed88

08003268 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800326e:	f3ef 8305 	mrs	r3, IPSR
 8003272:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2b0f      	cmp	r3, #15
 8003278:	d914      	bls.n	80032a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800327a:	4a17      	ldr	r2, [pc, #92]	; (80032d8 <vPortValidateInterruptPriority+0x70>)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4413      	add	r3, r2
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003284:	4b15      	ldr	r3, [pc, #84]	; (80032dc <vPortValidateInterruptPriority+0x74>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	7afa      	ldrb	r2, [r7, #11]
 800328a:	429a      	cmp	r2, r3
 800328c:	d20a      	bcs.n	80032a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800328e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003292:	f383 8811 	msr	BASEPRI, r3
 8003296:	f3bf 8f6f 	isb	sy
 800329a:	f3bf 8f4f 	dsb	sy
 800329e:	607b      	str	r3, [r7, #4]
}
 80032a0:	bf00      	nop
 80032a2:	e7fe      	b.n	80032a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80032a4:	4b0e      	ldr	r3, [pc, #56]	; (80032e0 <vPortValidateInterruptPriority+0x78>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80032ac:	4b0d      	ldr	r3, [pc, #52]	; (80032e4 <vPortValidateInterruptPriority+0x7c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d90a      	bls.n	80032ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80032b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b8:	f383 8811 	msr	BASEPRI, r3
 80032bc:	f3bf 8f6f 	isb	sy
 80032c0:	f3bf 8f4f 	dsb	sy
 80032c4:	603b      	str	r3, [r7, #0]
}
 80032c6:	bf00      	nop
 80032c8:	e7fe      	b.n	80032c8 <vPortValidateInterruptPriority+0x60>
	}
 80032ca:	bf00      	nop
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	e000e3f0 	.word	0xe000e3f0
 80032dc:	20000dfc 	.word	0x20000dfc
 80032e0:	e000ed0c 	.word	0xe000ed0c
 80032e4:	20000e00 	.word	0x20000e00

080032e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08a      	sub	sp, #40	; 0x28
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80032f4:	f7fe fc9c 	bl	8001c30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80032f8:	4b5b      	ldr	r3, [pc, #364]	; (8003468 <pvPortMalloc+0x180>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003300:	f000 f920 	bl	8003544 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003304:	4b59      	ldr	r3, [pc, #356]	; (800346c <pvPortMalloc+0x184>)
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4013      	ands	r3, r2
 800330c:	2b00      	cmp	r3, #0
 800330e:	f040 8093 	bne.w	8003438 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d01d      	beq.n	8003354 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003318:	2208      	movs	r2, #8
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4413      	add	r3, r2
 800331e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	2b00      	cmp	r3, #0
 8003328:	d014      	beq.n	8003354 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f023 0307 	bic.w	r3, r3, #7
 8003330:	3308      	adds	r3, #8
 8003332:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f003 0307 	and.w	r3, r3, #7
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <pvPortMalloc+0x6c>
	__asm volatile
 800333e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003342:	f383 8811 	msr	BASEPRI, r3
 8003346:	f3bf 8f6f 	isb	sy
 800334a:	f3bf 8f4f 	dsb	sy
 800334e:	617b      	str	r3, [r7, #20]
}
 8003350:	bf00      	nop
 8003352:	e7fe      	b.n	8003352 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d06e      	beq.n	8003438 <pvPortMalloc+0x150>
 800335a:	4b45      	ldr	r3, [pc, #276]	; (8003470 <pvPortMalloc+0x188>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	429a      	cmp	r2, r3
 8003362:	d869      	bhi.n	8003438 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003364:	4b43      	ldr	r3, [pc, #268]	; (8003474 <pvPortMalloc+0x18c>)
 8003366:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003368:	4b42      	ldr	r3, [pc, #264]	; (8003474 <pvPortMalloc+0x18c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800336e:	e004      	b.n	800337a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	429a      	cmp	r2, r3
 8003382:	d903      	bls.n	800338c <pvPortMalloc+0xa4>
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1f1      	bne.n	8003370 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800338c:	4b36      	ldr	r3, [pc, #216]	; (8003468 <pvPortMalloc+0x180>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003392:	429a      	cmp	r2, r3
 8003394:	d050      	beq.n	8003438 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003396:	6a3b      	ldr	r3, [r7, #32]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2208      	movs	r2, #8
 800339c:	4413      	add	r3, r2
 800339e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	1ad2      	subs	r2, r2, r3
 80033b0:	2308      	movs	r3, #8
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d91f      	bls.n	80033f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80033b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4413      	add	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <pvPortMalloc+0xf8>
	__asm volatile
 80033ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ce:	f383 8811 	msr	BASEPRI, r3
 80033d2:	f3bf 8f6f 	isb	sy
 80033d6:	f3bf 8f4f 	dsb	sy
 80033da:	613b      	str	r3, [r7, #16]
}
 80033dc:	bf00      	nop
 80033de:	e7fe      	b.n	80033de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80033e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	1ad2      	subs	r2, r2, r3
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80033ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80033f2:	69b8      	ldr	r0, [r7, #24]
 80033f4:	f000 f908 	bl	8003608 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80033f8:	4b1d      	ldr	r3, [pc, #116]	; (8003470 <pvPortMalloc+0x188>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	4a1b      	ldr	r2, [pc, #108]	; (8003470 <pvPortMalloc+0x188>)
 8003404:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003406:	4b1a      	ldr	r3, [pc, #104]	; (8003470 <pvPortMalloc+0x188>)
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	4b1b      	ldr	r3, [pc, #108]	; (8003478 <pvPortMalloc+0x190>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	429a      	cmp	r2, r3
 8003410:	d203      	bcs.n	800341a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003412:	4b17      	ldr	r3, [pc, #92]	; (8003470 <pvPortMalloc+0x188>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a18      	ldr	r2, [pc, #96]	; (8003478 <pvPortMalloc+0x190>)
 8003418:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	4b13      	ldr	r3, [pc, #76]	; (800346c <pvPortMalloc+0x184>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	431a      	orrs	r2, r3
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800342e:	4b13      	ldr	r3, [pc, #76]	; (800347c <pvPortMalloc+0x194>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	3301      	adds	r3, #1
 8003434:	4a11      	ldr	r2, [pc, #68]	; (800347c <pvPortMalloc+0x194>)
 8003436:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003438:	f7fe fc08 	bl	8001c4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00a      	beq.n	800345c <pvPortMalloc+0x174>
	__asm volatile
 8003446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344a:	f383 8811 	msr	BASEPRI, r3
 800344e:	f3bf 8f6f 	isb	sy
 8003452:	f3bf 8f4f 	dsb	sy
 8003456:	60fb      	str	r3, [r7, #12]
}
 8003458:	bf00      	nop
 800345a:	e7fe      	b.n	800345a <pvPortMalloc+0x172>
	return pvReturn;
 800345c:	69fb      	ldr	r3, [r7, #28]
}
 800345e:	4618      	mov	r0, r3
 8003460:	3728      	adds	r7, #40	; 0x28
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	20004a0c 	.word	0x20004a0c
 800346c:	20004a20 	.word	0x20004a20
 8003470:	20004a10 	.word	0x20004a10
 8003474:	20004a04 	.word	0x20004a04
 8003478:	20004a14 	.word	0x20004a14
 800347c:	20004a18 	.word	0x20004a18

08003480 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d04d      	beq.n	800352e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003492:	2308      	movs	r3, #8
 8003494:	425b      	negs	r3, r3
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4413      	add	r3, r2
 800349a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	4b24      	ldr	r3, [pc, #144]	; (8003538 <vPortFree+0xb8>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4013      	ands	r3, r2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10a      	bne.n	80034c4 <vPortFree+0x44>
	__asm volatile
 80034ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b2:	f383 8811 	msr	BASEPRI, r3
 80034b6:	f3bf 8f6f 	isb	sy
 80034ba:	f3bf 8f4f 	dsb	sy
 80034be:	60fb      	str	r3, [r7, #12]
}
 80034c0:	bf00      	nop
 80034c2:	e7fe      	b.n	80034c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00a      	beq.n	80034e2 <vPortFree+0x62>
	__asm volatile
 80034cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d0:	f383 8811 	msr	BASEPRI, r3
 80034d4:	f3bf 8f6f 	isb	sy
 80034d8:	f3bf 8f4f 	dsb	sy
 80034dc:	60bb      	str	r3, [r7, #8]
}
 80034de:	bf00      	nop
 80034e0:	e7fe      	b.n	80034e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	4b14      	ldr	r3, [pc, #80]	; (8003538 <vPortFree+0xb8>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4013      	ands	r3, r2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d01e      	beq.n	800352e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d11a      	bne.n	800352e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	4b0e      	ldr	r3, [pc, #56]	; (8003538 <vPortFree+0xb8>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	43db      	mvns	r3, r3
 8003502:	401a      	ands	r2, r3
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003508:	f7fe fb92 	bl	8001c30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	4b0a      	ldr	r3, [pc, #40]	; (800353c <vPortFree+0xbc>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4413      	add	r3, r2
 8003516:	4a09      	ldr	r2, [pc, #36]	; (800353c <vPortFree+0xbc>)
 8003518:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800351a:	6938      	ldr	r0, [r7, #16]
 800351c:	f000 f874 	bl	8003608 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003520:	4b07      	ldr	r3, [pc, #28]	; (8003540 <vPortFree+0xc0>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	3301      	adds	r3, #1
 8003526:	4a06      	ldr	r2, [pc, #24]	; (8003540 <vPortFree+0xc0>)
 8003528:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800352a:	f7fe fb8f 	bl	8001c4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800352e:	bf00      	nop
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	20004a20 	.word	0x20004a20
 800353c:	20004a10 	.word	0x20004a10
 8003540:	20004a1c 	.word	0x20004a1c

08003544 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800354a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800354e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003550:	4b27      	ldr	r3, [pc, #156]	; (80035f0 <prvHeapInit+0xac>)
 8003552:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00c      	beq.n	8003578 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	3307      	adds	r3, #7
 8003562:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f023 0307 	bic.w	r3, r3, #7
 800356a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	4a1f      	ldr	r2, [pc, #124]	; (80035f0 <prvHeapInit+0xac>)
 8003574:	4413      	add	r3, r2
 8003576:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800357c:	4a1d      	ldr	r2, [pc, #116]	; (80035f4 <prvHeapInit+0xb0>)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003582:	4b1c      	ldr	r3, [pc, #112]	; (80035f4 <prvHeapInit+0xb0>)
 8003584:	2200      	movs	r2, #0
 8003586:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	4413      	add	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003590:	2208      	movs	r2, #8
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	1a9b      	subs	r3, r3, r2
 8003596:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 0307 	bic.w	r3, r3, #7
 800359e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4a15      	ldr	r2, [pc, #84]	; (80035f8 <prvHeapInit+0xb4>)
 80035a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80035a6:	4b14      	ldr	r3, [pc, #80]	; (80035f8 <prvHeapInit+0xb4>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2200      	movs	r2, #0
 80035ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80035ae:	4b12      	ldr	r3, [pc, #72]	; (80035f8 <prvHeapInit+0xb4>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2200      	movs	r2, #0
 80035b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	1ad2      	subs	r2, r2, r3
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80035c4:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <prvHeapInit+0xb4>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	4a0a      	ldr	r2, [pc, #40]	; (80035fc <prvHeapInit+0xb8>)
 80035d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	4a09      	ldr	r2, [pc, #36]	; (8003600 <prvHeapInit+0xbc>)
 80035da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80035dc:	4b09      	ldr	r3, [pc, #36]	; (8003604 <prvHeapInit+0xc0>)
 80035de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80035e2:	601a      	str	r2, [r3, #0]
}
 80035e4:	bf00      	nop
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	20000e04 	.word	0x20000e04
 80035f4:	20004a04 	.word	0x20004a04
 80035f8:	20004a0c 	.word	0x20004a0c
 80035fc:	20004a14 	.word	0x20004a14
 8003600:	20004a10 	.word	0x20004a10
 8003604:	20004a20 	.word	0x20004a20

08003608 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003610:	4b28      	ldr	r3, [pc, #160]	; (80036b4 <prvInsertBlockIntoFreeList+0xac>)
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	e002      	b.n	800361c <prvInsertBlockIntoFreeList+0x14>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	60fb      	str	r3, [r7, #12]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	429a      	cmp	r2, r3
 8003624:	d8f7      	bhi.n	8003616 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	4413      	add	r3, r2
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	429a      	cmp	r2, r3
 8003636:	d108      	bne.n	800364a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	441a      	add	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	441a      	add	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d118      	bne.n	8003690 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	4b15      	ldr	r3, [pc, #84]	; (80036b8 <prvInsertBlockIntoFreeList+0xb0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	429a      	cmp	r2, r3
 8003668:	d00d      	beq.n	8003686 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	441a      	add	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	e008      	b.n	8003698 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003686:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <prvInsertBlockIntoFreeList+0xb0>)
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	e003      	b.n	8003698 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	429a      	cmp	r2, r3
 800369e:	d002      	beq.n	80036a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036a6:	bf00      	nop
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	20004a04 	.word	0x20004a04
 80036b8:	20004a0c 	.word	0x20004a0c

080036bc <__errno>:
 80036bc:	4b01      	ldr	r3, [pc, #4]	; (80036c4 <__errno+0x8>)
 80036be:	6818      	ldr	r0, [r3, #0]
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	20000008 	.word	0x20000008

080036c8 <__libc_init_array>:
 80036c8:	b570      	push	{r4, r5, r6, lr}
 80036ca:	4d0d      	ldr	r5, [pc, #52]	; (8003700 <__libc_init_array+0x38>)
 80036cc:	4c0d      	ldr	r4, [pc, #52]	; (8003704 <__libc_init_array+0x3c>)
 80036ce:	1b64      	subs	r4, r4, r5
 80036d0:	10a4      	asrs	r4, r4, #2
 80036d2:	2600      	movs	r6, #0
 80036d4:	42a6      	cmp	r6, r4
 80036d6:	d109      	bne.n	80036ec <__libc_init_array+0x24>
 80036d8:	4d0b      	ldr	r5, [pc, #44]	; (8003708 <__libc_init_array+0x40>)
 80036da:	4c0c      	ldr	r4, [pc, #48]	; (800370c <__libc_init_array+0x44>)
 80036dc:	f000 fc8e 	bl	8003ffc <_init>
 80036e0:	1b64      	subs	r4, r4, r5
 80036e2:	10a4      	asrs	r4, r4, #2
 80036e4:	2600      	movs	r6, #0
 80036e6:	42a6      	cmp	r6, r4
 80036e8:	d105      	bne.n	80036f6 <__libc_init_array+0x2e>
 80036ea:	bd70      	pop	{r4, r5, r6, pc}
 80036ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80036f0:	4798      	blx	r3
 80036f2:	3601      	adds	r6, #1
 80036f4:	e7ee      	b.n	80036d4 <__libc_init_array+0xc>
 80036f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80036fa:	4798      	blx	r3
 80036fc:	3601      	adds	r6, #1
 80036fe:	e7f2      	b.n	80036e6 <__libc_init_array+0x1e>
 8003700:	0800409c 	.word	0x0800409c
 8003704:	0800409c 	.word	0x0800409c
 8003708:	0800409c 	.word	0x0800409c
 800370c:	080040a0 	.word	0x080040a0

08003710 <memcpy>:
 8003710:	440a      	add	r2, r1
 8003712:	4291      	cmp	r1, r2
 8003714:	f100 33ff 	add.w	r3, r0, #4294967295
 8003718:	d100      	bne.n	800371c <memcpy+0xc>
 800371a:	4770      	bx	lr
 800371c:	b510      	push	{r4, lr}
 800371e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003722:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003726:	4291      	cmp	r1, r2
 8003728:	d1f9      	bne.n	800371e <memcpy+0xe>
 800372a:	bd10      	pop	{r4, pc}

0800372c <memset>:
 800372c:	4402      	add	r2, r0
 800372e:	4603      	mov	r3, r0
 8003730:	4293      	cmp	r3, r2
 8003732:	d100      	bne.n	8003736 <memset+0xa>
 8003734:	4770      	bx	lr
 8003736:	f803 1b01 	strb.w	r1, [r3], #1
 800373a:	e7f9      	b.n	8003730 <memset+0x4>

0800373c <siprintf>:
 800373c:	b40e      	push	{r1, r2, r3}
 800373e:	b500      	push	{lr}
 8003740:	b09c      	sub	sp, #112	; 0x70
 8003742:	ab1d      	add	r3, sp, #116	; 0x74
 8003744:	9002      	str	r0, [sp, #8]
 8003746:	9006      	str	r0, [sp, #24]
 8003748:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800374c:	4809      	ldr	r0, [pc, #36]	; (8003774 <siprintf+0x38>)
 800374e:	9107      	str	r1, [sp, #28]
 8003750:	9104      	str	r1, [sp, #16]
 8003752:	4909      	ldr	r1, [pc, #36]	; (8003778 <siprintf+0x3c>)
 8003754:	f853 2b04 	ldr.w	r2, [r3], #4
 8003758:	9105      	str	r1, [sp, #20]
 800375a:	6800      	ldr	r0, [r0, #0]
 800375c:	9301      	str	r3, [sp, #4]
 800375e:	a902      	add	r1, sp, #8
 8003760:	f000 f868 	bl	8003834 <_svfiprintf_r>
 8003764:	9b02      	ldr	r3, [sp, #8]
 8003766:	2200      	movs	r2, #0
 8003768:	701a      	strb	r2, [r3, #0]
 800376a:	b01c      	add	sp, #112	; 0x70
 800376c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003770:	b003      	add	sp, #12
 8003772:	4770      	bx	lr
 8003774:	20000008 	.word	0x20000008
 8003778:	ffff0208 	.word	0xffff0208

0800377c <__ssputs_r>:
 800377c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003780:	688e      	ldr	r6, [r1, #8]
 8003782:	429e      	cmp	r6, r3
 8003784:	4682      	mov	sl, r0
 8003786:	460c      	mov	r4, r1
 8003788:	4690      	mov	r8, r2
 800378a:	461f      	mov	r7, r3
 800378c:	d838      	bhi.n	8003800 <__ssputs_r+0x84>
 800378e:	898a      	ldrh	r2, [r1, #12]
 8003790:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003794:	d032      	beq.n	80037fc <__ssputs_r+0x80>
 8003796:	6825      	ldr	r5, [r4, #0]
 8003798:	6909      	ldr	r1, [r1, #16]
 800379a:	eba5 0901 	sub.w	r9, r5, r1
 800379e:	6965      	ldr	r5, [r4, #20]
 80037a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80037a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80037a8:	3301      	adds	r3, #1
 80037aa:	444b      	add	r3, r9
 80037ac:	106d      	asrs	r5, r5, #1
 80037ae:	429d      	cmp	r5, r3
 80037b0:	bf38      	it	cc
 80037b2:	461d      	movcc	r5, r3
 80037b4:	0553      	lsls	r3, r2, #21
 80037b6:	d531      	bpl.n	800381c <__ssputs_r+0xa0>
 80037b8:	4629      	mov	r1, r5
 80037ba:	f000 fb55 	bl	8003e68 <_malloc_r>
 80037be:	4606      	mov	r6, r0
 80037c0:	b950      	cbnz	r0, 80037d8 <__ssputs_r+0x5c>
 80037c2:	230c      	movs	r3, #12
 80037c4:	f8ca 3000 	str.w	r3, [sl]
 80037c8:	89a3      	ldrh	r3, [r4, #12]
 80037ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037ce:	81a3      	strh	r3, [r4, #12]
 80037d0:	f04f 30ff 	mov.w	r0, #4294967295
 80037d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037d8:	6921      	ldr	r1, [r4, #16]
 80037da:	464a      	mov	r2, r9
 80037dc:	f7ff ff98 	bl	8003710 <memcpy>
 80037e0:	89a3      	ldrh	r3, [r4, #12]
 80037e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80037e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ea:	81a3      	strh	r3, [r4, #12]
 80037ec:	6126      	str	r6, [r4, #16]
 80037ee:	6165      	str	r5, [r4, #20]
 80037f0:	444e      	add	r6, r9
 80037f2:	eba5 0509 	sub.w	r5, r5, r9
 80037f6:	6026      	str	r6, [r4, #0]
 80037f8:	60a5      	str	r5, [r4, #8]
 80037fa:	463e      	mov	r6, r7
 80037fc:	42be      	cmp	r6, r7
 80037fe:	d900      	bls.n	8003802 <__ssputs_r+0x86>
 8003800:	463e      	mov	r6, r7
 8003802:	6820      	ldr	r0, [r4, #0]
 8003804:	4632      	mov	r2, r6
 8003806:	4641      	mov	r1, r8
 8003808:	f000 faa8 	bl	8003d5c <memmove>
 800380c:	68a3      	ldr	r3, [r4, #8]
 800380e:	1b9b      	subs	r3, r3, r6
 8003810:	60a3      	str	r3, [r4, #8]
 8003812:	6823      	ldr	r3, [r4, #0]
 8003814:	4433      	add	r3, r6
 8003816:	6023      	str	r3, [r4, #0]
 8003818:	2000      	movs	r0, #0
 800381a:	e7db      	b.n	80037d4 <__ssputs_r+0x58>
 800381c:	462a      	mov	r2, r5
 800381e:	f000 fb97 	bl	8003f50 <_realloc_r>
 8003822:	4606      	mov	r6, r0
 8003824:	2800      	cmp	r0, #0
 8003826:	d1e1      	bne.n	80037ec <__ssputs_r+0x70>
 8003828:	6921      	ldr	r1, [r4, #16]
 800382a:	4650      	mov	r0, sl
 800382c:	f000 fab0 	bl	8003d90 <_free_r>
 8003830:	e7c7      	b.n	80037c2 <__ssputs_r+0x46>
	...

08003834 <_svfiprintf_r>:
 8003834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003838:	4698      	mov	r8, r3
 800383a:	898b      	ldrh	r3, [r1, #12]
 800383c:	061b      	lsls	r3, r3, #24
 800383e:	b09d      	sub	sp, #116	; 0x74
 8003840:	4607      	mov	r7, r0
 8003842:	460d      	mov	r5, r1
 8003844:	4614      	mov	r4, r2
 8003846:	d50e      	bpl.n	8003866 <_svfiprintf_r+0x32>
 8003848:	690b      	ldr	r3, [r1, #16]
 800384a:	b963      	cbnz	r3, 8003866 <_svfiprintf_r+0x32>
 800384c:	2140      	movs	r1, #64	; 0x40
 800384e:	f000 fb0b 	bl	8003e68 <_malloc_r>
 8003852:	6028      	str	r0, [r5, #0]
 8003854:	6128      	str	r0, [r5, #16]
 8003856:	b920      	cbnz	r0, 8003862 <_svfiprintf_r+0x2e>
 8003858:	230c      	movs	r3, #12
 800385a:	603b      	str	r3, [r7, #0]
 800385c:	f04f 30ff 	mov.w	r0, #4294967295
 8003860:	e0d1      	b.n	8003a06 <_svfiprintf_r+0x1d2>
 8003862:	2340      	movs	r3, #64	; 0x40
 8003864:	616b      	str	r3, [r5, #20]
 8003866:	2300      	movs	r3, #0
 8003868:	9309      	str	r3, [sp, #36]	; 0x24
 800386a:	2320      	movs	r3, #32
 800386c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003870:	f8cd 800c 	str.w	r8, [sp, #12]
 8003874:	2330      	movs	r3, #48	; 0x30
 8003876:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003a20 <_svfiprintf_r+0x1ec>
 800387a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800387e:	f04f 0901 	mov.w	r9, #1
 8003882:	4623      	mov	r3, r4
 8003884:	469a      	mov	sl, r3
 8003886:	f813 2b01 	ldrb.w	r2, [r3], #1
 800388a:	b10a      	cbz	r2, 8003890 <_svfiprintf_r+0x5c>
 800388c:	2a25      	cmp	r2, #37	; 0x25
 800388e:	d1f9      	bne.n	8003884 <_svfiprintf_r+0x50>
 8003890:	ebba 0b04 	subs.w	fp, sl, r4
 8003894:	d00b      	beq.n	80038ae <_svfiprintf_r+0x7a>
 8003896:	465b      	mov	r3, fp
 8003898:	4622      	mov	r2, r4
 800389a:	4629      	mov	r1, r5
 800389c:	4638      	mov	r0, r7
 800389e:	f7ff ff6d 	bl	800377c <__ssputs_r>
 80038a2:	3001      	adds	r0, #1
 80038a4:	f000 80aa 	beq.w	80039fc <_svfiprintf_r+0x1c8>
 80038a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038aa:	445a      	add	r2, fp
 80038ac:	9209      	str	r2, [sp, #36]	; 0x24
 80038ae:	f89a 3000 	ldrb.w	r3, [sl]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 80a2 	beq.w	80039fc <_svfiprintf_r+0x1c8>
 80038b8:	2300      	movs	r3, #0
 80038ba:	f04f 32ff 	mov.w	r2, #4294967295
 80038be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80038c2:	f10a 0a01 	add.w	sl, sl, #1
 80038c6:	9304      	str	r3, [sp, #16]
 80038c8:	9307      	str	r3, [sp, #28]
 80038ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80038ce:	931a      	str	r3, [sp, #104]	; 0x68
 80038d0:	4654      	mov	r4, sl
 80038d2:	2205      	movs	r2, #5
 80038d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038d8:	4851      	ldr	r0, [pc, #324]	; (8003a20 <_svfiprintf_r+0x1ec>)
 80038da:	f7fc fc79 	bl	80001d0 <memchr>
 80038de:	9a04      	ldr	r2, [sp, #16]
 80038e0:	b9d8      	cbnz	r0, 800391a <_svfiprintf_r+0xe6>
 80038e2:	06d0      	lsls	r0, r2, #27
 80038e4:	bf44      	itt	mi
 80038e6:	2320      	movmi	r3, #32
 80038e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038ec:	0711      	lsls	r1, r2, #28
 80038ee:	bf44      	itt	mi
 80038f0:	232b      	movmi	r3, #43	; 0x2b
 80038f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038f6:	f89a 3000 	ldrb.w	r3, [sl]
 80038fa:	2b2a      	cmp	r3, #42	; 0x2a
 80038fc:	d015      	beq.n	800392a <_svfiprintf_r+0xf6>
 80038fe:	9a07      	ldr	r2, [sp, #28]
 8003900:	4654      	mov	r4, sl
 8003902:	2000      	movs	r0, #0
 8003904:	f04f 0c0a 	mov.w	ip, #10
 8003908:	4621      	mov	r1, r4
 800390a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800390e:	3b30      	subs	r3, #48	; 0x30
 8003910:	2b09      	cmp	r3, #9
 8003912:	d94e      	bls.n	80039b2 <_svfiprintf_r+0x17e>
 8003914:	b1b0      	cbz	r0, 8003944 <_svfiprintf_r+0x110>
 8003916:	9207      	str	r2, [sp, #28]
 8003918:	e014      	b.n	8003944 <_svfiprintf_r+0x110>
 800391a:	eba0 0308 	sub.w	r3, r0, r8
 800391e:	fa09 f303 	lsl.w	r3, r9, r3
 8003922:	4313      	orrs	r3, r2
 8003924:	9304      	str	r3, [sp, #16]
 8003926:	46a2      	mov	sl, r4
 8003928:	e7d2      	b.n	80038d0 <_svfiprintf_r+0x9c>
 800392a:	9b03      	ldr	r3, [sp, #12]
 800392c:	1d19      	adds	r1, r3, #4
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	9103      	str	r1, [sp, #12]
 8003932:	2b00      	cmp	r3, #0
 8003934:	bfbb      	ittet	lt
 8003936:	425b      	neglt	r3, r3
 8003938:	f042 0202 	orrlt.w	r2, r2, #2
 800393c:	9307      	strge	r3, [sp, #28]
 800393e:	9307      	strlt	r3, [sp, #28]
 8003940:	bfb8      	it	lt
 8003942:	9204      	strlt	r2, [sp, #16]
 8003944:	7823      	ldrb	r3, [r4, #0]
 8003946:	2b2e      	cmp	r3, #46	; 0x2e
 8003948:	d10c      	bne.n	8003964 <_svfiprintf_r+0x130>
 800394a:	7863      	ldrb	r3, [r4, #1]
 800394c:	2b2a      	cmp	r3, #42	; 0x2a
 800394e:	d135      	bne.n	80039bc <_svfiprintf_r+0x188>
 8003950:	9b03      	ldr	r3, [sp, #12]
 8003952:	1d1a      	adds	r2, r3, #4
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	9203      	str	r2, [sp, #12]
 8003958:	2b00      	cmp	r3, #0
 800395a:	bfb8      	it	lt
 800395c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003960:	3402      	adds	r4, #2
 8003962:	9305      	str	r3, [sp, #20]
 8003964:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003a30 <_svfiprintf_r+0x1fc>
 8003968:	7821      	ldrb	r1, [r4, #0]
 800396a:	2203      	movs	r2, #3
 800396c:	4650      	mov	r0, sl
 800396e:	f7fc fc2f 	bl	80001d0 <memchr>
 8003972:	b140      	cbz	r0, 8003986 <_svfiprintf_r+0x152>
 8003974:	2340      	movs	r3, #64	; 0x40
 8003976:	eba0 000a 	sub.w	r0, r0, sl
 800397a:	fa03 f000 	lsl.w	r0, r3, r0
 800397e:	9b04      	ldr	r3, [sp, #16]
 8003980:	4303      	orrs	r3, r0
 8003982:	3401      	adds	r4, #1
 8003984:	9304      	str	r3, [sp, #16]
 8003986:	f814 1b01 	ldrb.w	r1, [r4], #1
 800398a:	4826      	ldr	r0, [pc, #152]	; (8003a24 <_svfiprintf_r+0x1f0>)
 800398c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003990:	2206      	movs	r2, #6
 8003992:	f7fc fc1d 	bl	80001d0 <memchr>
 8003996:	2800      	cmp	r0, #0
 8003998:	d038      	beq.n	8003a0c <_svfiprintf_r+0x1d8>
 800399a:	4b23      	ldr	r3, [pc, #140]	; (8003a28 <_svfiprintf_r+0x1f4>)
 800399c:	bb1b      	cbnz	r3, 80039e6 <_svfiprintf_r+0x1b2>
 800399e:	9b03      	ldr	r3, [sp, #12]
 80039a0:	3307      	adds	r3, #7
 80039a2:	f023 0307 	bic.w	r3, r3, #7
 80039a6:	3308      	adds	r3, #8
 80039a8:	9303      	str	r3, [sp, #12]
 80039aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039ac:	4433      	add	r3, r6
 80039ae:	9309      	str	r3, [sp, #36]	; 0x24
 80039b0:	e767      	b.n	8003882 <_svfiprintf_r+0x4e>
 80039b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80039b6:	460c      	mov	r4, r1
 80039b8:	2001      	movs	r0, #1
 80039ba:	e7a5      	b.n	8003908 <_svfiprintf_r+0xd4>
 80039bc:	2300      	movs	r3, #0
 80039be:	3401      	adds	r4, #1
 80039c0:	9305      	str	r3, [sp, #20]
 80039c2:	4619      	mov	r1, r3
 80039c4:	f04f 0c0a 	mov.w	ip, #10
 80039c8:	4620      	mov	r0, r4
 80039ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039ce:	3a30      	subs	r2, #48	; 0x30
 80039d0:	2a09      	cmp	r2, #9
 80039d2:	d903      	bls.n	80039dc <_svfiprintf_r+0x1a8>
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0c5      	beq.n	8003964 <_svfiprintf_r+0x130>
 80039d8:	9105      	str	r1, [sp, #20]
 80039da:	e7c3      	b.n	8003964 <_svfiprintf_r+0x130>
 80039dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80039e0:	4604      	mov	r4, r0
 80039e2:	2301      	movs	r3, #1
 80039e4:	e7f0      	b.n	80039c8 <_svfiprintf_r+0x194>
 80039e6:	ab03      	add	r3, sp, #12
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	462a      	mov	r2, r5
 80039ec:	4b0f      	ldr	r3, [pc, #60]	; (8003a2c <_svfiprintf_r+0x1f8>)
 80039ee:	a904      	add	r1, sp, #16
 80039f0:	4638      	mov	r0, r7
 80039f2:	f3af 8000 	nop.w
 80039f6:	1c42      	adds	r2, r0, #1
 80039f8:	4606      	mov	r6, r0
 80039fa:	d1d6      	bne.n	80039aa <_svfiprintf_r+0x176>
 80039fc:	89ab      	ldrh	r3, [r5, #12]
 80039fe:	065b      	lsls	r3, r3, #25
 8003a00:	f53f af2c 	bmi.w	800385c <_svfiprintf_r+0x28>
 8003a04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a06:	b01d      	add	sp, #116	; 0x74
 8003a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a0c:	ab03      	add	r3, sp, #12
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	462a      	mov	r2, r5
 8003a12:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <_svfiprintf_r+0x1f8>)
 8003a14:	a904      	add	r1, sp, #16
 8003a16:	4638      	mov	r0, r7
 8003a18:	f000 f87a 	bl	8003b10 <_printf_i>
 8003a1c:	e7eb      	b.n	80039f6 <_svfiprintf_r+0x1c2>
 8003a1e:	bf00      	nop
 8003a20:	08004069 	.word	0x08004069
 8003a24:	08004073 	.word	0x08004073
 8003a28:	00000000 	.word	0x00000000
 8003a2c:	0800377d 	.word	0x0800377d
 8003a30:	0800406f 	.word	0x0800406f

08003a34 <_printf_common>:
 8003a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a38:	4616      	mov	r6, r2
 8003a3a:	4699      	mov	r9, r3
 8003a3c:	688a      	ldr	r2, [r1, #8]
 8003a3e:	690b      	ldr	r3, [r1, #16]
 8003a40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a44:	4293      	cmp	r3, r2
 8003a46:	bfb8      	it	lt
 8003a48:	4613      	movlt	r3, r2
 8003a4a:	6033      	str	r3, [r6, #0]
 8003a4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a50:	4607      	mov	r7, r0
 8003a52:	460c      	mov	r4, r1
 8003a54:	b10a      	cbz	r2, 8003a5a <_printf_common+0x26>
 8003a56:	3301      	adds	r3, #1
 8003a58:	6033      	str	r3, [r6, #0]
 8003a5a:	6823      	ldr	r3, [r4, #0]
 8003a5c:	0699      	lsls	r1, r3, #26
 8003a5e:	bf42      	ittt	mi
 8003a60:	6833      	ldrmi	r3, [r6, #0]
 8003a62:	3302      	addmi	r3, #2
 8003a64:	6033      	strmi	r3, [r6, #0]
 8003a66:	6825      	ldr	r5, [r4, #0]
 8003a68:	f015 0506 	ands.w	r5, r5, #6
 8003a6c:	d106      	bne.n	8003a7c <_printf_common+0x48>
 8003a6e:	f104 0a19 	add.w	sl, r4, #25
 8003a72:	68e3      	ldr	r3, [r4, #12]
 8003a74:	6832      	ldr	r2, [r6, #0]
 8003a76:	1a9b      	subs	r3, r3, r2
 8003a78:	42ab      	cmp	r3, r5
 8003a7a:	dc26      	bgt.n	8003aca <_printf_common+0x96>
 8003a7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a80:	1e13      	subs	r3, r2, #0
 8003a82:	6822      	ldr	r2, [r4, #0]
 8003a84:	bf18      	it	ne
 8003a86:	2301      	movne	r3, #1
 8003a88:	0692      	lsls	r2, r2, #26
 8003a8a:	d42b      	bmi.n	8003ae4 <_printf_common+0xb0>
 8003a8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a90:	4649      	mov	r1, r9
 8003a92:	4638      	mov	r0, r7
 8003a94:	47c0      	blx	r8
 8003a96:	3001      	adds	r0, #1
 8003a98:	d01e      	beq.n	8003ad8 <_printf_common+0xa4>
 8003a9a:	6823      	ldr	r3, [r4, #0]
 8003a9c:	68e5      	ldr	r5, [r4, #12]
 8003a9e:	6832      	ldr	r2, [r6, #0]
 8003aa0:	f003 0306 	and.w	r3, r3, #6
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	bf08      	it	eq
 8003aa8:	1aad      	subeq	r5, r5, r2
 8003aaa:	68a3      	ldr	r3, [r4, #8]
 8003aac:	6922      	ldr	r2, [r4, #16]
 8003aae:	bf0c      	ite	eq
 8003ab0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ab4:	2500      	movne	r5, #0
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	bfc4      	itt	gt
 8003aba:	1a9b      	subgt	r3, r3, r2
 8003abc:	18ed      	addgt	r5, r5, r3
 8003abe:	2600      	movs	r6, #0
 8003ac0:	341a      	adds	r4, #26
 8003ac2:	42b5      	cmp	r5, r6
 8003ac4:	d11a      	bne.n	8003afc <_printf_common+0xc8>
 8003ac6:	2000      	movs	r0, #0
 8003ac8:	e008      	b.n	8003adc <_printf_common+0xa8>
 8003aca:	2301      	movs	r3, #1
 8003acc:	4652      	mov	r2, sl
 8003ace:	4649      	mov	r1, r9
 8003ad0:	4638      	mov	r0, r7
 8003ad2:	47c0      	blx	r8
 8003ad4:	3001      	adds	r0, #1
 8003ad6:	d103      	bne.n	8003ae0 <_printf_common+0xac>
 8003ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8003adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ae0:	3501      	adds	r5, #1
 8003ae2:	e7c6      	b.n	8003a72 <_printf_common+0x3e>
 8003ae4:	18e1      	adds	r1, r4, r3
 8003ae6:	1c5a      	adds	r2, r3, #1
 8003ae8:	2030      	movs	r0, #48	; 0x30
 8003aea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003aee:	4422      	add	r2, r4
 8003af0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003af4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003af8:	3302      	adds	r3, #2
 8003afa:	e7c7      	b.n	8003a8c <_printf_common+0x58>
 8003afc:	2301      	movs	r3, #1
 8003afe:	4622      	mov	r2, r4
 8003b00:	4649      	mov	r1, r9
 8003b02:	4638      	mov	r0, r7
 8003b04:	47c0      	blx	r8
 8003b06:	3001      	adds	r0, #1
 8003b08:	d0e6      	beq.n	8003ad8 <_printf_common+0xa4>
 8003b0a:	3601      	adds	r6, #1
 8003b0c:	e7d9      	b.n	8003ac2 <_printf_common+0x8e>
	...

08003b10 <_printf_i>:
 8003b10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b14:	7e0f      	ldrb	r7, [r1, #24]
 8003b16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b18:	2f78      	cmp	r7, #120	; 0x78
 8003b1a:	4691      	mov	r9, r2
 8003b1c:	4680      	mov	r8, r0
 8003b1e:	460c      	mov	r4, r1
 8003b20:	469a      	mov	sl, r3
 8003b22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b26:	d807      	bhi.n	8003b38 <_printf_i+0x28>
 8003b28:	2f62      	cmp	r7, #98	; 0x62
 8003b2a:	d80a      	bhi.n	8003b42 <_printf_i+0x32>
 8003b2c:	2f00      	cmp	r7, #0
 8003b2e:	f000 80d8 	beq.w	8003ce2 <_printf_i+0x1d2>
 8003b32:	2f58      	cmp	r7, #88	; 0x58
 8003b34:	f000 80a3 	beq.w	8003c7e <_printf_i+0x16e>
 8003b38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b40:	e03a      	b.n	8003bb8 <_printf_i+0xa8>
 8003b42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b46:	2b15      	cmp	r3, #21
 8003b48:	d8f6      	bhi.n	8003b38 <_printf_i+0x28>
 8003b4a:	a101      	add	r1, pc, #4	; (adr r1, 8003b50 <_printf_i+0x40>)
 8003b4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b50:	08003ba9 	.word	0x08003ba9
 8003b54:	08003bbd 	.word	0x08003bbd
 8003b58:	08003b39 	.word	0x08003b39
 8003b5c:	08003b39 	.word	0x08003b39
 8003b60:	08003b39 	.word	0x08003b39
 8003b64:	08003b39 	.word	0x08003b39
 8003b68:	08003bbd 	.word	0x08003bbd
 8003b6c:	08003b39 	.word	0x08003b39
 8003b70:	08003b39 	.word	0x08003b39
 8003b74:	08003b39 	.word	0x08003b39
 8003b78:	08003b39 	.word	0x08003b39
 8003b7c:	08003cc9 	.word	0x08003cc9
 8003b80:	08003bed 	.word	0x08003bed
 8003b84:	08003cab 	.word	0x08003cab
 8003b88:	08003b39 	.word	0x08003b39
 8003b8c:	08003b39 	.word	0x08003b39
 8003b90:	08003ceb 	.word	0x08003ceb
 8003b94:	08003b39 	.word	0x08003b39
 8003b98:	08003bed 	.word	0x08003bed
 8003b9c:	08003b39 	.word	0x08003b39
 8003ba0:	08003b39 	.word	0x08003b39
 8003ba4:	08003cb3 	.word	0x08003cb3
 8003ba8:	682b      	ldr	r3, [r5, #0]
 8003baa:	1d1a      	adds	r2, r3, #4
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	602a      	str	r2, [r5, #0]
 8003bb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e0a3      	b.n	8003d04 <_printf_i+0x1f4>
 8003bbc:	6820      	ldr	r0, [r4, #0]
 8003bbe:	6829      	ldr	r1, [r5, #0]
 8003bc0:	0606      	lsls	r6, r0, #24
 8003bc2:	f101 0304 	add.w	r3, r1, #4
 8003bc6:	d50a      	bpl.n	8003bde <_printf_i+0xce>
 8003bc8:	680e      	ldr	r6, [r1, #0]
 8003bca:	602b      	str	r3, [r5, #0]
 8003bcc:	2e00      	cmp	r6, #0
 8003bce:	da03      	bge.n	8003bd8 <_printf_i+0xc8>
 8003bd0:	232d      	movs	r3, #45	; 0x2d
 8003bd2:	4276      	negs	r6, r6
 8003bd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bd8:	485e      	ldr	r0, [pc, #376]	; (8003d54 <_printf_i+0x244>)
 8003bda:	230a      	movs	r3, #10
 8003bdc:	e019      	b.n	8003c12 <_printf_i+0x102>
 8003bde:	680e      	ldr	r6, [r1, #0]
 8003be0:	602b      	str	r3, [r5, #0]
 8003be2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003be6:	bf18      	it	ne
 8003be8:	b236      	sxthne	r6, r6
 8003bea:	e7ef      	b.n	8003bcc <_printf_i+0xbc>
 8003bec:	682b      	ldr	r3, [r5, #0]
 8003bee:	6820      	ldr	r0, [r4, #0]
 8003bf0:	1d19      	adds	r1, r3, #4
 8003bf2:	6029      	str	r1, [r5, #0]
 8003bf4:	0601      	lsls	r1, r0, #24
 8003bf6:	d501      	bpl.n	8003bfc <_printf_i+0xec>
 8003bf8:	681e      	ldr	r6, [r3, #0]
 8003bfa:	e002      	b.n	8003c02 <_printf_i+0xf2>
 8003bfc:	0646      	lsls	r6, r0, #25
 8003bfe:	d5fb      	bpl.n	8003bf8 <_printf_i+0xe8>
 8003c00:	881e      	ldrh	r6, [r3, #0]
 8003c02:	4854      	ldr	r0, [pc, #336]	; (8003d54 <_printf_i+0x244>)
 8003c04:	2f6f      	cmp	r7, #111	; 0x6f
 8003c06:	bf0c      	ite	eq
 8003c08:	2308      	moveq	r3, #8
 8003c0a:	230a      	movne	r3, #10
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c12:	6865      	ldr	r5, [r4, #4]
 8003c14:	60a5      	str	r5, [r4, #8]
 8003c16:	2d00      	cmp	r5, #0
 8003c18:	bfa2      	ittt	ge
 8003c1a:	6821      	ldrge	r1, [r4, #0]
 8003c1c:	f021 0104 	bicge.w	r1, r1, #4
 8003c20:	6021      	strge	r1, [r4, #0]
 8003c22:	b90e      	cbnz	r6, 8003c28 <_printf_i+0x118>
 8003c24:	2d00      	cmp	r5, #0
 8003c26:	d04d      	beq.n	8003cc4 <_printf_i+0x1b4>
 8003c28:	4615      	mov	r5, r2
 8003c2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c2e:	fb03 6711 	mls	r7, r3, r1, r6
 8003c32:	5dc7      	ldrb	r7, [r0, r7]
 8003c34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c38:	4637      	mov	r7, r6
 8003c3a:	42bb      	cmp	r3, r7
 8003c3c:	460e      	mov	r6, r1
 8003c3e:	d9f4      	bls.n	8003c2a <_printf_i+0x11a>
 8003c40:	2b08      	cmp	r3, #8
 8003c42:	d10b      	bne.n	8003c5c <_printf_i+0x14c>
 8003c44:	6823      	ldr	r3, [r4, #0]
 8003c46:	07de      	lsls	r6, r3, #31
 8003c48:	d508      	bpl.n	8003c5c <_printf_i+0x14c>
 8003c4a:	6923      	ldr	r3, [r4, #16]
 8003c4c:	6861      	ldr	r1, [r4, #4]
 8003c4e:	4299      	cmp	r1, r3
 8003c50:	bfde      	ittt	le
 8003c52:	2330      	movle	r3, #48	; 0x30
 8003c54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003c5c:	1b52      	subs	r2, r2, r5
 8003c5e:	6122      	str	r2, [r4, #16]
 8003c60:	f8cd a000 	str.w	sl, [sp]
 8003c64:	464b      	mov	r3, r9
 8003c66:	aa03      	add	r2, sp, #12
 8003c68:	4621      	mov	r1, r4
 8003c6a:	4640      	mov	r0, r8
 8003c6c:	f7ff fee2 	bl	8003a34 <_printf_common>
 8003c70:	3001      	adds	r0, #1
 8003c72:	d14c      	bne.n	8003d0e <_printf_i+0x1fe>
 8003c74:	f04f 30ff 	mov.w	r0, #4294967295
 8003c78:	b004      	add	sp, #16
 8003c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c7e:	4835      	ldr	r0, [pc, #212]	; (8003d54 <_printf_i+0x244>)
 8003c80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003c84:	6829      	ldr	r1, [r5, #0]
 8003c86:	6823      	ldr	r3, [r4, #0]
 8003c88:	f851 6b04 	ldr.w	r6, [r1], #4
 8003c8c:	6029      	str	r1, [r5, #0]
 8003c8e:	061d      	lsls	r5, r3, #24
 8003c90:	d514      	bpl.n	8003cbc <_printf_i+0x1ac>
 8003c92:	07df      	lsls	r7, r3, #31
 8003c94:	bf44      	itt	mi
 8003c96:	f043 0320 	orrmi.w	r3, r3, #32
 8003c9a:	6023      	strmi	r3, [r4, #0]
 8003c9c:	b91e      	cbnz	r6, 8003ca6 <_printf_i+0x196>
 8003c9e:	6823      	ldr	r3, [r4, #0]
 8003ca0:	f023 0320 	bic.w	r3, r3, #32
 8003ca4:	6023      	str	r3, [r4, #0]
 8003ca6:	2310      	movs	r3, #16
 8003ca8:	e7b0      	b.n	8003c0c <_printf_i+0xfc>
 8003caa:	6823      	ldr	r3, [r4, #0]
 8003cac:	f043 0320 	orr.w	r3, r3, #32
 8003cb0:	6023      	str	r3, [r4, #0]
 8003cb2:	2378      	movs	r3, #120	; 0x78
 8003cb4:	4828      	ldr	r0, [pc, #160]	; (8003d58 <_printf_i+0x248>)
 8003cb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003cba:	e7e3      	b.n	8003c84 <_printf_i+0x174>
 8003cbc:	0659      	lsls	r1, r3, #25
 8003cbe:	bf48      	it	mi
 8003cc0:	b2b6      	uxthmi	r6, r6
 8003cc2:	e7e6      	b.n	8003c92 <_printf_i+0x182>
 8003cc4:	4615      	mov	r5, r2
 8003cc6:	e7bb      	b.n	8003c40 <_printf_i+0x130>
 8003cc8:	682b      	ldr	r3, [r5, #0]
 8003cca:	6826      	ldr	r6, [r4, #0]
 8003ccc:	6961      	ldr	r1, [r4, #20]
 8003cce:	1d18      	adds	r0, r3, #4
 8003cd0:	6028      	str	r0, [r5, #0]
 8003cd2:	0635      	lsls	r5, r6, #24
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	d501      	bpl.n	8003cdc <_printf_i+0x1cc>
 8003cd8:	6019      	str	r1, [r3, #0]
 8003cda:	e002      	b.n	8003ce2 <_printf_i+0x1d2>
 8003cdc:	0670      	lsls	r0, r6, #25
 8003cde:	d5fb      	bpl.n	8003cd8 <_printf_i+0x1c8>
 8003ce0:	8019      	strh	r1, [r3, #0]
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	6123      	str	r3, [r4, #16]
 8003ce6:	4615      	mov	r5, r2
 8003ce8:	e7ba      	b.n	8003c60 <_printf_i+0x150>
 8003cea:	682b      	ldr	r3, [r5, #0]
 8003cec:	1d1a      	adds	r2, r3, #4
 8003cee:	602a      	str	r2, [r5, #0]
 8003cf0:	681d      	ldr	r5, [r3, #0]
 8003cf2:	6862      	ldr	r2, [r4, #4]
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	4628      	mov	r0, r5
 8003cf8:	f7fc fa6a 	bl	80001d0 <memchr>
 8003cfc:	b108      	cbz	r0, 8003d02 <_printf_i+0x1f2>
 8003cfe:	1b40      	subs	r0, r0, r5
 8003d00:	6060      	str	r0, [r4, #4]
 8003d02:	6863      	ldr	r3, [r4, #4]
 8003d04:	6123      	str	r3, [r4, #16]
 8003d06:	2300      	movs	r3, #0
 8003d08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d0c:	e7a8      	b.n	8003c60 <_printf_i+0x150>
 8003d0e:	6923      	ldr	r3, [r4, #16]
 8003d10:	462a      	mov	r2, r5
 8003d12:	4649      	mov	r1, r9
 8003d14:	4640      	mov	r0, r8
 8003d16:	47d0      	blx	sl
 8003d18:	3001      	adds	r0, #1
 8003d1a:	d0ab      	beq.n	8003c74 <_printf_i+0x164>
 8003d1c:	6823      	ldr	r3, [r4, #0]
 8003d1e:	079b      	lsls	r3, r3, #30
 8003d20:	d413      	bmi.n	8003d4a <_printf_i+0x23a>
 8003d22:	68e0      	ldr	r0, [r4, #12]
 8003d24:	9b03      	ldr	r3, [sp, #12]
 8003d26:	4298      	cmp	r0, r3
 8003d28:	bfb8      	it	lt
 8003d2a:	4618      	movlt	r0, r3
 8003d2c:	e7a4      	b.n	8003c78 <_printf_i+0x168>
 8003d2e:	2301      	movs	r3, #1
 8003d30:	4632      	mov	r2, r6
 8003d32:	4649      	mov	r1, r9
 8003d34:	4640      	mov	r0, r8
 8003d36:	47d0      	blx	sl
 8003d38:	3001      	adds	r0, #1
 8003d3a:	d09b      	beq.n	8003c74 <_printf_i+0x164>
 8003d3c:	3501      	adds	r5, #1
 8003d3e:	68e3      	ldr	r3, [r4, #12]
 8003d40:	9903      	ldr	r1, [sp, #12]
 8003d42:	1a5b      	subs	r3, r3, r1
 8003d44:	42ab      	cmp	r3, r5
 8003d46:	dcf2      	bgt.n	8003d2e <_printf_i+0x21e>
 8003d48:	e7eb      	b.n	8003d22 <_printf_i+0x212>
 8003d4a:	2500      	movs	r5, #0
 8003d4c:	f104 0619 	add.w	r6, r4, #25
 8003d50:	e7f5      	b.n	8003d3e <_printf_i+0x22e>
 8003d52:	bf00      	nop
 8003d54:	0800407a 	.word	0x0800407a
 8003d58:	0800408b 	.word	0x0800408b

08003d5c <memmove>:
 8003d5c:	4288      	cmp	r0, r1
 8003d5e:	b510      	push	{r4, lr}
 8003d60:	eb01 0402 	add.w	r4, r1, r2
 8003d64:	d902      	bls.n	8003d6c <memmove+0x10>
 8003d66:	4284      	cmp	r4, r0
 8003d68:	4623      	mov	r3, r4
 8003d6a:	d807      	bhi.n	8003d7c <memmove+0x20>
 8003d6c:	1e43      	subs	r3, r0, #1
 8003d6e:	42a1      	cmp	r1, r4
 8003d70:	d008      	beq.n	8003d84 <memmove+0x28>
 8003d72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d7a:	e7f8      	b.n	8003d6e <memmove+0x12>
 8003d7c:	4402      	add	r2, r0
 8003d7e:	4601      	mov	r1, r0
 8003d80:	428a      	cmp	r2, r1
 8003d82:	d100      	bne.n	8003d86 <memmove+0x2a>
 8003d84:	bd10      	pop	{r4, pc}
 8003d86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d8e:	e7f7      	b.n	8003d80 <memmove+0x24>

08003d90 <_free_r>:
 8003d90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d92:	2900      	cmp	r1, #0
 8003d94:	d044      	beq.n	8003e20 <_free_r+0x90>
 8003d96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d9a:	9001      	str	r0, [sp, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f1a1 0404 	sub.w	r4, r1, #4
 8003da2:	bfb8      	it	lt
 8003da4:	18e4      	addlt	r4, r4, r3
 8003da6:	f000 f913 	bl	8003fd0 <__malloc_lock>
 8003daa:	4a1e      	ldr	r2, [pc, #120]	; (8003e24 <_free_r+0x94>)
 8003dac:	9801      	ldr	r0, [sp, #4]
 8003dae:	6813      	ldr	r3, [r2, #0]
 8003db0:	b933      	cbnz	r3, 8003dc0 <_free_r+0x30>
 8003db2:	6063      	str	r3, [r4, #4]
 8003db4:	6014      	str	r4, [r2, #0]
 8003db6:	b003      	add	sp, #12
 8003db8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003dbc:	f000 b90e 	b.w	8003fdc <__malloc_unlock>
 8003dc0:	42a3      	cmp	r3, r4
 8003dc2:	d908      	bls.n	8003dd6 <_free_r+0x46>
 8003dc4:	6825      	ldr	r5, [r4, #0]
 8003dc6:	1961      	adds	r1, r4, r5
 8003dc8:	428b      	cmp	r3, r1
 8003dca:	bf01      	itttt	eq
 8003dcc:	6819      	ldreq	r1, [r3, #0]
 8003dce:	685b      	ldreq	r3, [r3, #4]
 8003dd0:	1949      	addeq	r1, r1, r5
 8003dd2:	6021      	streq	r1, [r4, #0]
 8003dd4:	e7ed      	b.n	8003db2 <_free_r+0x22>
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	b10b      	cbz	r3, 8003de0 <_free_r+0x50>
 8003ddc:	42a3      	cmp	r3, r4
 8003dde:	d9fa      	bls.n	8003dd6 <_free_r+0x46>
 8003de0:	6811      	ldr	r1, [r2, #0]
 8003de2:	1855      	adds	r5, r2, r1
 8003de4:	42a5      	cmp	r5, r4
 8003de6:	d10b      	bne.n	8003e00 <_free_r+0x70>
 8003de8:	6824      	ldr	r4, [r4, #0]
 8003dea:	4421      	add	r1, r4
 8003dec:	1854      	adds	r4, r2, r1
 8003dee:	42a3      	cmp	r3, r4
 8003df0:	6011      	str	r1, [r2, #0]
 8003df2:	d1e0      	bne.n	8003db6 <_free_r+0x26>
 8003df4:	681c      	ldr	r4, [r3, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	6053      	str	r3, [r2, #4]
 8003dfa:	4421      	add	r1, r4
 8003dfc:	6011      	str	r1, [r2, #0]
 8003dfe:	e7da      	b.n	8003db6 <_free_r+0x26>
 8003e00:	d902      	bls.n	8003e08 <_free_r+0x78>
 8003e02:	230c      	movs	r3, #12
 8003e04:	6003      	str	r3, [r0, #0]
 8003e06:	e7d6      	b.n	8003db6 <_free_r+0x26>
 8003e08:	6825      	ldr	r5, [r4, #0]
 8003e0a:	1961      	adds	r1, r4, r5
 8003e0c:	428b      	cmp	r3, r1
 8003e0e:	bf04      	itt	eq
 8003e10:	6819      	ldreq	r1, [r3, #0]
 8003e12:	685b      	ldreq	r3, [r3, #4]
 8003e14:	6063      	str	r3, [r4, #4]
 8003e16:	bf04      	itt	eq
 8003e18:	1949      	addeq	r1, r1, r5
 8003e1a:	6021      	streq	r1, [r4, #0]
 8003e1c:	6054      	str	r4, [r2, #4]
 8003e1e:	e7ca      	b.n	8003db6 <_free_r+0x26>
 8003e20:	b003      	add	sp, #12
 8003e22:	bd30      	pop	{r4, r5, pc}
 8003e24:	20004a24 	.word	0x20004a24

08003e28 <sbrk_aligned>:
 8003e28:	b570      	push	{r4, r5, r6, lr}
 8003e2a:	4e0e      	ldr	r6, [pc, #56]	; (8003e64 <sbrk_aligned+0x3c>)
 8003e2c:	460c      	mov	r4, r1
 8003e2e:	6831      	ldr	r1, [r6, #0]
 8003e30:	4605      	mov	r5, r0
 8003e32:	b911      	cbnz	r1, 8003e3a <sbrk_aligned+0x12>
 8003e34:	f000 f8bc 	bl	8003fb0 <_sbrk_r>
 8003e38:	6030      	str	r0, [r6, #0]
 8003e3a:	4621      	mov	r1, r4
 8003e3c:	4628      	mov	r0, r5
 8003e3e:	f000 f8b7 	bl	8003fb0 <_sbrk_r>
 8003e42:	1c43      	adds	r3, r0, #1
 8003e44:	d00a      	beq.n	8003e5c <sbrk_aligned+0x34>
 8003e46:	1cc4      	adds	r4, r0, #3
 8003e48:	f024 0403 	bic.w	r4, r4, #3
 8003e4c:	42a0      	cmp	r0, r4
 8003e4e:	d007      	beq.n	8003e60 <sbrk_aligned+0x38>
 8003e50:	1a21      	subs	r1, r4, r0
 8003e52:	4628      	mov	r0, r5
 8003e54:	f000 f8ac 	bl	8003fb0 <_sbrk_r>
 8003e58:	3001      	adds	r0, #1
 8003e5a:	d101      	bne.n	8003e60 <sbrk_aligned+0x38>
 8003e5c:	f04f 34ff 	mov.w	r4, #4294967295
 8003e60:	4620      	mov	r0, r4
 8003e62:	bd70      	pop	{r4, r5, r6, pc}
 8003e64:	20004a28 	.word	0x20004a28

08003e68 <_malloc_r>:
 8003e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e6c:	1ccd      	adds	r5, r1, #3
 8003e6e:	f025 0503 	bic.w	r5, r5, #3
 8003e72:	3508      	adds	r5, #8
 8003e74:	2d0c      	cmp	r5, #12
 8003e76:	bf38      	it	cc
 8003e78:	250c      	movcc	r5, #12
 8003e7a:	2d00      	cmp	r5, #0
 8003e7c:	4607      	mov	r7, r0
 8003e7e:	db01      	blt.n	8003e84 <_malloc_r+0x1c>
 8003e80:	42a9      	cmp	r1, r5
 8003e82:	d905      	bls.n	8003e90 <_malloc_r+0x28>
 8003e84:	230c      	movs	r3, #12
 8003e86:	603b      	str	r3, [r7, #0]
 8003e88:	2600      	movs	r6, #0
 8003e8a:	4630      	mov	r0, r6
 8003e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e90:	4e2e      	ldr	r6, [pc, #184]	; (8003f4c <_malloc_r+0xe4>)
 8003e92:	f000 f89d 	bl	8003fd0 <__malloc_lock>
 8003e96:	6833      	ldr	r3, [r6, #0]
 8003e98:	461c      	mov	r4, r3
 8003e9a:	bb34      	cbnz	r4, 8003eea <_malloc_r+0x82>
 8003e9c:	4629      	mov	r1, r5
 8003e9e:	4638      	mov	r0, r7
 8003ea0:	f7ff ffc2 	bl	8003e28 <sbrk_aligned>
 8003ea4:	1c43      	adds	r3, r0, #1
 8003ea6:	4604      	mov	r4, r0
 8003ea8:	d14d      	bne.n	8003f46 <_malloc_r+0xde>
 8003eaa:	6834      	ldr	r4, [r6, #0]
 8003eac:	4626      	mov	r6, r4
 8003eae:	2e00      	cmp	r6, #0
 8003eb0:	d140      	bne.n	8003f34 <_malloc_r+0xcc>
 8003eb2:	6823      	ldr	r3, [r4, #0]
 8003eb4:	4631      	mov	r1, r6
 8003eb6:	4638      	mov	r0, r7
 8003eb8:	eb04 0803 	add.w	r8, r4, r3
 8003ebc:	f000 f878 	bl	8003fb0 <_sbrk_r>
 8003ec0:	4580      	cmp	r8, r0
 8003ec2:	d13a      	bne.n	8003f3a <_malloc_r+0xd2>
 8003ec4:	6821      	ldr	r1, [r4, #0]
 8003ec6:	3503      	adds	r5, #3
 8003ec8:	1a6d      	subs	r5, r5, r1
 8003eca:	f025 0503 	bic.w	r5, r5, #3
 8003ece:	3508      	adds	r5, #8
 8003ed0:	2d0c      	cmp	r5, #12
 8003ed2:	bf38      	it	cc
 8003ed4:	250c      	movcc	r5, #12
 8003ed6:	4629      	mov	r1, r5
 8003ed8:	4638      	mov	r0, r7
 8003eda:	f7ff ffa5 	bl	8003e28 <sbrk_aligned>
 8003ede:	3001      	adds	r0, #1
 8003ee0:	d02b      	beq.n	8003f3a <_malloc_r+0xd2>
 8003ee2:	6823      	ldr	r3, [r4, #0]
 8003ee4:	442b      	add	r3, r5
 8003ee6:	6023      	str	r3, [r4, #0]
 8003ee8:	e00e      	b.n	8003f08 <_malloc_r+0xa0>
 8003eea:	6822      	ldr	r2, [r4, #0]
 8003eec:	1b52      	subs	r2, r2, r5
 8003eee:	d41e      	bmi.n	8003f2e <_malloc_r+0xc6>
 8003ef0:	2a0b      	cmp	r2, #11
 8003ef2:	d916      	bls.n	8003f22 <_malloc_r+0xba>
 8003ef4:	1961      	adds	r1, r4, r5
 8003ef6:	42a3      	cmp	r3, r4
 8003ef8:	6025      	str	r5, [r4, #0]
 8003efa:	bf18      	it	ne
 8003efc:	6059      	strne	r1, [r3, #4]
 8003efe:	6863      	ldr	r3, [r4, #4]
 8003f00:	bf08      	it	eq
 8003f02:	6031      	streq	r1, [r6, #0]
 8003f04:	5162      	str	r2, [r4, r5]
 8003f06:	604b      	str	r3, [r1, #4]
 8003f08:	4638      	mov	r0, r7
 8003f0a:	f104 060b 	add.w	r6, r4, #11
 8003f0e:	f000 f865 	bl	8003fdc <__malloc_unlock>
 8003f12:	f026 0607 	bic.w	r6, r6, #7
 8003f16:	1d23      	adds	r3, r4, #4
 8003f18:	1af2      	subs	r2, r6, r3
 8003f1a:	d0b6      	beq.n	8003e8a <_malloc_r+0x22>
 8003f1c:	1b9b      	subs	r3, r3, r6
 8003f1e:	50a3      	str	r3, [r4, r2]
 8003f20:	e7b3      	b.n	8003e8a <_malloc_r+0x22>
 8003f22:	6862      	ldr	r2, [r4, #4]
 8003f24:	42a3      	cmp	r3, r4
 8003f26:	bf0c      	ite	eq
 8003f28:	6032      	streq	r2, [r6, #0]
 8003f2a:	605a      	strne	r2, [r3, #4]
 8003f2c:	e7ec      	b.n	8003f08 <_malloc_r+0xa0>
 8003f2e:	4623      	mov	r3, r4
 8003f30:	6864      	ldr	r4, [r4, #4]
 8003f32:	e7b2      	b.n	8003e9a <_malloc_r+0x32>
 8003f34:	4634      	mov	r4, r6
 8003f36:	6876      	ldr	r6, [r6, #4]
 8003f38:	e7b9      	b.n	8003eae <_malloc_r+0x46>
 8003f3a:	230c      	movs	r3, #12
 8003f3c:	603b      	str	r3, [r7, #0]
 8003f3e:	4638      	mov	r0, r7
 8003f40:	f000 f84c 	bl	8003fdc <__malloc_unlock>
 8003f44:	e7a1      	b.n	8003e8a <_malloc_r+0x22>
 8003f46:	6025      	str	r5, [r4, #0]
 8003f48:	e7de      	b.n	8003f08 <_malloc_r+0xa0>
 8003f4a:	bf00      	nop
 8003f4c:	20004a24 	.word	0x20004a24

08003f50 <_realloc_r>:
 8003f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f54:	4680      	mov	r8, r0
 8003f56:	4614      	mov	r4, r2
 8003f58:	460e      	mov	r6, r1
 8003f5a:	b921      	cbnz	r1, 8003f66 <_realloc_r+0x16>
 8003f5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f60:	4611      	mov	r1, r2
 8003f62:	f7ff bf81 	b.w	8003e68 <_malloc_r>
 8003f66:	b92a      	cbnz	r2, 8003f74 <_realloc_r+0x24>
 8003f68:	f7ff ff12 	bl	8003d90 <_free_r>
 8003f6c:	4625      	mov	r5, r4
 8003f6e:	4628      	mov	r0, r5
 8003f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f74:	f000 f838 	bl	8003fe8 <_malloc_usable_size_r>
 8003f78:	4284      	cmp	r4, r0
 8003f7a:	4607      	mov	r7, r0
 8003f7c:	d802      	bhi.n	8003f84 <_realloc_r+0x34>
 8003f7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003f82:	d812      	bhi.n	8003faa <_realloc_r+0x5a>
 8003f84:	4621      	mov	r1, r4
 8003f86:	4640      	mov	r0, r8
 8003f88:	f7ff ff6e 	bl	8003e68 <_malloc_r>
 8003f8c:	4605      	mov	r5, r0
 8003f8e:	2800      	cmp	r0, #0
 8003f90:	d0ed      	beq.n	8003f6e <_realloc_r+0x1e>
 8003f92:	42bc      	cmp	r4, r7
 8003f94:	4622      	mov	r2, r4
 8003f96:	4631      	mov	r1, r6
 8003f98:	bf28      	it	cs
 8003f9a:	463a      	movcs	r2, r7
 8003f9c:	f7ff fbb8 	bl	8003710 <memcpy>
 8003fa0:	4631      	mov	r1, r6
 8003fa2:	4640      	mov	r0, r8
 8003fa4:	f7ff fef4 	bl	8003d90 <_free_r>
 8003fa8:	e7e1      	b.n	8003f6e <_realloc_r+0x1e>
 8003faa:	4635      	mov	r5, r6
 8003fac:	e7df      	b.n	8003f6e <_realloc_r+0x1e>
	...

08003fb0 <_sbrk_r>:
 8003fb0:	b538      	push	{r3, r4, r5, lr}
 8003fb2:	4d06      	ldr	r5, [pc, #24]	; (8003fcc <_sbrk_r+0x1c>)
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	4604      	mov	r4, r0
 8003fb8:	4608      	mov	r0, r1
 8003fba:	602b      	str	r3, [r5, #0]
 8003fbc:	f7fc fa2a 	bl	8000414 <_sbrk>
 8003fc0:	1c43      	adds	r3, r0, #1
 8003fc2:	d102      	bne.n	8003fca <_sbrk_r+0x1a>
 8003fc4:	682b      	ldr	r3, [r5, #0]
 8003fc6:	b103      	cbz	r3, 8003fca <_sbrk_r+0x1a>
 8003fc8:	6023      	str	r3, [r4, #0]
 8003fca:	bd38      	pop	{r3, r4, r5, pc}
 8003fcc:	20004a2c 	.word	0x20004a2c

08003fd0 <__malloc_lock>:
 8003fd0:	4801      	ldr	r0, [pc, #4]	; (8003fd8 <__malloc_lock+0x8>)
 8003fd2:	f000 b811 	b.w	8003ff8 <__retarget_lock_acquire_recursive>
 8003fd6:	bf00      	nop
 8003fd8:	20004a30 	.word	0x20004a30

08003fdc <__malloc_unlock>:
 8003fdc:	4801      	ldr	r0, [pc, #4]	; (8003fe4 <__malloc_unlock+0x8>)
 8003fde:	f000 b80c 	b.w	8003ffa <__retarget_lock_release_recursive>
 8003fe2:	bf00      	nop
 8003fe4:	20004a30 	.word	0x20004a30

08003fe8 <_malloc_usable_size_r>:
 8003fe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fec:	1f18      	subs	r0, r3, #4
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	bfbc      	itt	lt
 8003ff2:	580b      	ldrlt	r3, [r1, r0]
 8003ff4:	18c0      	addlt	r0, r0, r3
 8003ff6:	4770      	bx	lr

08003ff8 <__retarget_lock_acquire_recursive>:
 8003ff8:	4770      	bx	lr

08003ffa <__retarget_lock_release_recursive>:
 8003ffa:	4770      	bx	lr

08003ffc <_init>:
 8003ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ffe:	bf00      	nop
 8004000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004002:	bc08      	pop	{r3}
 8004004:	469e      	mov	lr, r3
 8004006:	4770      	bx	lr

08004008 <_fini>:
 8004008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400a:	bf00      	nop
 800400c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800400e:	bc08      	pop	{r3}
 8004010:	469e      	mov	lr, r3
 8004012:	4770      	bx	lr
