
23_FreeRtos_Create_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003008  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003198  08003198  00013198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031f0  080031f0  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080031f0  080031f0  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031f0  080031f0  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031f0  080031f0  000131f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031f4  080031f4  000131f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080031f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
 10 .bss          000049b0  20000008  20000008  00020008  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200049b8  200049b8  00020008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 13 .debug_info   000111fe  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024d2  00000000  00000000  00031236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f48  00000000  00000000  00033708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e30  00000000  00000000  00034650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000213ba  00000000  00000000  00035480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010ada  00000000  00000000  0005683a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2880  00000000  00000000  00067314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00139b94  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003fcc  00000000  00000000  00139be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000008 	.word	0x20000008
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003180 	.word	0x08003180

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	08003180 	.word	0x08003180

080001d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	4603      	mov	r3, r0
 80001d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	db0b      	blt.n	80001fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	f003 021f 	and.w	r2, r3, #31
 80001e8:	4907      	ldr	r1, [pc, #28]	; (8000208 <__NVIC_EnableIRQ+0x38>)
 80001ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ee:	095b      	lsrs	r3, r3, #5
 80001f0:	2001      	movs	r0, #1
 80001f2:	fa00 f202 	lsl.w	r2, r0, r2
 80001f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fa:	bf00      	nop
 80001fc:	370c      	adds	r7, #12
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	e000e100 	.word	0xe000e100

0800020c <pa0_exti_init>:

#define GPIOAEN     (1U<<0)
#define SYSCFGEN     (1U<<14)

void pa0_exti_init(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000210:	b672      	cpsid	i
}
 8000212:	bf00      	nop
	/*Disable global interrupt */
	__disable_irq();

	/*Enable clock access for GPIOC */
	RCC->AHB1ENR |= GPIOAEN;
 8000214:	4b15      	ldr	r3, [pc, #84]	; (800026c <pa0_exti_init+0x60>)
 8000216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000218:	4a14      	ldr	r2, [pc, #80]	; (800026c <pa0_exti_init+0x60>)
 800021a:	f043 0301 	orr.w	r3, r3, #1
 800021e:	6313      	str	r3, [r2, #48]	; 0x30

	/*Enable clock access SysCnfg */
	RCC->APB2ENR |= SYSCFGEN;
 8000220:	4b12      	ldr	r3, [pc, #72]	; (800026c <pa0_exti_init+0x60>)
 8000222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000224:	4a11      	ldr	r2, [pc, #68]	; (800026c <pa0_exti_init+0x60>)
 8000226:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800022a:	6453      	str	r3, [r2, #68]	; 0x44

	/*Set PA0 as Input	 */
	GPIOA->MODER &=~(1U<<0);
 800022c:	4b10      	ldr	r3, [pc, #64]	; (8000270 <pa0_exti_init+0x64>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a0f      	ldr	r2, [pc, #60]	; (8000270 <pa0_exti_init+0x64>)
 8000232:	f023 0301 	bic.w	r3, r3, #1
 8000236:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<1);
 8000238:	4b0d      	ldr	r3, [pc, #52]	; (8000270 <pa0_exti_init+0x64>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a0c      	ldr	r2, [pc, #48]	; (8000270 <pa0_exti_init+0x64>)
 800023e:	f023 0302 	bic.w	r3, r3, #2
 8000242:	6013      	str	r3, [r2, #0]

	/*Select PORTA for EXTI0 */
	//SYSCFG->EXTICR[3] |= (1U<<5);

	/*UNMASK EXTI13 */
	EXTI->IMR |= (1U<<0);
 8000244:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <pa0_exti_init+0x68>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a0a      	ldr	r2, [pc, #40]	; (8000274 <pa0_exti_init+0x68>)
 800024a:	f043 0301 	orr.w	r3, r3, #1
 800024e:	6013      	str	r3, [r2, #0]

	/*Select falling edge trigger */
	EXTI->FTSR |= (1U<<0);
 8000250:	4b08      	ldr	r3, [pc, #32]	; (8000274 <pa0_exti_init+0x68>)
 8000252:	68db      	ldr	r3, [r3, #12]
 8000254:	4a07      	ldr	r2, [pc, #28]	; (8000274 <pa0_exti_init+0x68>)
 8000256:	f043 0301 	orr.w	r3, r3, #1
 800025a:	60d3      	str	r3, [r2, #12]

	/*Enable EXTI3 line in NVIC */
	NVIC_EnableIRQ(EXTI0_IRQn);
 800025c:	2006      	movs	r0, #6
 800025e:	f7ff ffb7 	bl	80001d0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000262:	b662      	cpsie	i
}
 8000264:	bf00      	nop

	/*Enable global interrupt */
	__enable_irq();
}
 8000266:	bf00      	nop
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	40023800 	.word	0x40023800
 8000270:	40020000 	.word	0x40020000
 8000274:	40013c00 	.word	0x40013c00

08000278 <led_init>:
#include "stm32f4xx.h"
#include "led.h"

void led_init()
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIODEN;
 800027c:	4b11      	ldr	r3, [pc, #68]	; (80002c4 <led_init+0x4c>)
 800027e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000280:	4a10      	ldr	r2, [pc, #64]	; (80002c4 <led_init+0x4c>)
 8000282:	f043 0308 	orr.w	r3, r3, #8
 8000286:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOD->MODER |= (1U<<24);
 8000288:	4b0f      	ldr	r3, [pc, #60]	; (80002c8 <led_init+0x50>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a0e      	ldr	r2, [pc, #56]	; (80002c8 <led_init+0x50>)
 800028e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000292:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1U<<25);
 8000294:	4b0c      	ldr	r3, [pc, #48]	; (80002c8 <led_init+0x50>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a0b      	ldr	r2, [pc, #44]	; (80002c8 <led_init+0x50>)
 800029a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800029e:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1U<<26);
 80002a0:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <led_init+0x50>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a08      	ldr	r2, [pc, #32]	; (80002c8 <led_init+0x50>)
 80002a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80002aa:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1U<<27);
 80002ac:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <led_init+0x50>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a05      	ldr	r2, [pc, #20]	; (80002c8 <led_init+0x50>)
 80002b2:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80002b6:	6013      	str	r3, [r2, #0]
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	40023800 	.word	0x40023800
 80002c8:	40020c00 	.word	0x40020c00

080002cc <led_toggle>:
	GPIOD->BSRR = (1U<<28);
	GPIOD->BSRR = (1U<<29);
}

void led_toggle()
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOD, LED_PIN);
 80002d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002d4:	4804      	ldr	r0, [pc, #16]	; (80002e8 <led_toggle+0x1c>)
 80002d6:	f000 f94a 	bl	800056e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOD, LED_PIN1);
 80002da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002de:	4802      	ldr	r0, [pc, #8]	; (80002e8 <led_toggle+0x1c>)
 80002e0:	f000 f945 	bl	800056e <HAL_GPIO_TogglePin>
}
 80002e4:	bf00      	nop
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	40020c00 	.word	0x40020c00

080002ec <Task1>:
#include "led.h"
#include "uart.h"


void Task1(void * str)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
   // size = xPortGetFreeHeapSize();

  for(;;)
  {
        led_toggle();
 80002f4:	f7ff ffea 	bl	80002cc <led_toggle>
        uart2_write_string(str);
 80002f8:	6878      	ldr	r0, [r7, #4]
 80002fa:	f000 f8d5 	bl	80004a8 <uart2_write_string>
        vTaskDelay(1200);
 80002fe:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000302:	f001 fa23 	bl	800174c <vTaskDelay>
        led_toggle();
 8000306:	e7f5      	b.n	80002f4 <Task1+0x8>

08000308 <Task2>:
  }


}
void Task2(void * str)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
        uart2_write_string(str);
 8000310:	6878      	ldr	r0, [r7, #4]
 8000312:	f000 f8c9 	bl	80004a8 <uart2_write_string>
        vTaskDelay(1000);
 8000316:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800031a:	f001 fa17 	bl	800174c <vTaskDelay>
        uart2_write_string(str);
 800031e:	e7f7      	b.n	8000310 <Task2+0x8>

08000320 <main>:

}


int main(int argc, char **argv)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b084      	sub	sp, #16
 8000324:	af02      	add	r7, sp, #8
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	6039      	str	r1, [r7, #0]
	uart2_tx_init();
 800032a:	f000 f859 	bl	80003e0 <uart2_tx_init>
	led_init();
 800032e:	f7ff ffa3 	bl	8000278 <led_init>
	pa0_exti_init();
 8000332:	f7ff ff6b 	bl	800020c <pa0_exti_init>

 	xTaskCreate(Task1,"Task 1",100,(void *)"Task1 is running...\r\n",0,NULL);
 8000336:	2300      	movs	r3, #0
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2300      	movs	r3, #0
 800033c:	9300      	str	r3, [sp, #0]
 800033e:	4b09      	ldr	r3, [pc, #36]	; (8000364 <main+0x44>)
 8000340:	2264      	movs	r2, #100	; 0x64
 8000342:	4909      	ldr	r1, [pc, #36]	; (8000368 <main+0x48>)
 8000344:	4809      	ldr	r0, [pc, #36]	; (800036c <main+0x4c>)
 8000346:	f001 f8bc 	bl	80014c2 <xTaskCreate>

    xTaskCreate(Task2,"Task 2",100,(void *)"Task2 is running...\r\n",0,NULL);
 800034a:	2300      	movs	r3, #0
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2300      	movs	r3, #0
 8000350:	9300      	str	r3, [sp, #0]
 8000352:	4b07      	ldr	r3, [pc, #28]	; (8000370 <main+0x50>)
 8000354:	2264      	movs	r2, #100	; 0x64
 8000356:	4907      	ldr	r1, [pc, #28]	; (8000374 <main+0x54>)
 8000358:	4807      	ldr	r0, [pc, #28]	; (8000378 <main+0x58>)
 800035a:	f001 f8b2 	bl	80014c2 <xTaskCreate>

    vTaskStartScheduler();
 800035e:	f001 fa29 	bl	80017b4 <vTaskStartScheduler>

	while(1)
 8000362:	e7fe      	b.n	8000362 <main+0x42>
 8000364:	08003198 	.word	0x08003198
 8000368:	080031b0 	.word	0x080031b0
 800036c:	080002ed 	.word	0x080002ed
 8000370:	080031b8 	.word	0x080031b8
 8000374:	080031d0 	.word	0x080031d0
 8000378:	08000309 	.word	0x08000309

0800037c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000380:	e7fe      	b.n	8000380 <NMI_Handler+0x4>

08000382 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000382:	b480      	push	{r7}
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000386:	e7fe      	b.n	8000386 <HardFault_Handler+0x4>

08000388 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800038c:	e7fe      	b.n	800038c <MemManage_Handler+0x4>

0800038e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800038e:	b480      	push	{r7}
 8000390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000392:	e7fe      	b.n	8000392 <BusFault_Handler+0x4>

08000394 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000398:	e7fe      	b.n	8000398 <UsageFault_Handler+0x4>

0800039a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800039a:	b480      	push	{r7}
 800039c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800039e:	bf00      	nop
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr

080003a8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80003ac:	4802      	ldr	r0, [pc, #8]	; (80003b8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80003ae:	f000 f8f8 	bl	80005a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000024 	.word	0x20000024

080003bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003c0:	4b06      	ldr	r3, [pc, #24]	; (80003dc <SystemInit+0x20>)
 80003c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003c6:	4a05      	ldr	r2, [pc, #20]	; (80003dc <SystemInit+0x20>)
 80003c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	e000ed00 	.word	0xe000ed00

080003e0 <uart2_tx_init>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t Baudrate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t Baudrate);


void uart2_tx_init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOAEN;
 80003e4:	4b20      	ldr	r3, [pc, #128]	; (8000468 <uart2_tx_init+0x88>)
 80003e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e8:	4a1f      	ldr	r2, [pc, #124]	; (8000468 <uart2_tx_init+0x88>)
 80003ea:	f043 0301 	orr.w	r3, r3, #1
 80003ee:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER &=~(1U<<4);
 80003f0:	4b1e      	ldr	r3, [pc, #120]	; (800046c <uart2_tx_init+0x8c>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a1d      	ldr	r2, [pc, #116]	; (800046c <uart2_tx_init+0x8c>)
 80003f6:	f023 0310 	bic.w	r3, r3, #16
 80003fa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80003fc:	4b1b      	ldr	r3, [pc, #108]	; (800046c <uart2_tx_init+0x8c>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a1a      	ldr	r2, [pc, #104]	; (800046c <uart2_tx_init+0x8c>)
 8000402:	f043 0320 	orr.w	r3, r3, #32
 8000406:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] |= (1U<<8);
 8000408:	4b18      	ldr	r3, [pc, #96]	; (800046c <uart2_tx_init+0x8c>)
 800040a:	6a1b      	ldr	r3, [r3, #32]
 800040c:	4a17      	ldr	r2, [pc, #92]	; (800046c <uart2_tx_init+0x8c>)
 800040e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000412:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000414:	4b15      	ldr	r3, [pc, #84]	; (800046c <uart2_tx_init+0x8c>)
 8000416:	6a1b      	ldr	r3, [r3, #32]
 8000418:	4a14      	ldr	r2, [pc, #80]	; (800046c <uart2_tx_init+0x8c>)
 800041a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800041e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000420:	4b12      	ldr	r3, [pc, #72]	; (800046c <uart2_tx_init+0x8c>)
 8000422:	6a1b      	ldr	r3, [r3, #32]
 8000424:	4a11      	ldr	r2, [pc, #68]	; (800046c <uart2_tx_init+0x8c>)
 8000426:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800042a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 800042c:	4b0f      	ldr	r3, [pc, #60]	; (800046c <uart2_tx_init+0x8c>)
 800042e:	6a1b      	ldr	r3, [r3, #32]
 8000430:	4a0e      	ldr	r2, [pc, #56]	; (800046c <uart2_tx_init+0x8c>)
 8000432:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000436:	6213      	str	r3, [r2, #32]

	RCC->APB1ENR |= UART2EN;
 8000438:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <uart2_tx_init+0x88>)
 800043a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800043c:	4a0a      	ldr	r2, [pc, #40]	; (8000468 <uart2_tx_init+0x88>)
 800043e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000442:	6413      	str	r3, [r2, #64]	; 0x40

	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000444:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000448:	4909      	ldr	r1, [pc, #36]	; (8000470 <uart2_tx_init+0x90>)
 800044a:	480a      	ldr	r0, [pc, #40]	; (8000474 <uart2_tx_init+0x94>)
 800044c:	f000 f841 	bl	80004d2 <uart_set_baudrate>

	USART2->CR1 = CR1_TE;
 8000450:	4b08      	ldr	r3, [pc, #32]	; (8000474 <uart2_tx_init+0x94>)
 8000452:	2208      	movs	r2, #8
 8000454:	60da      	str	r2, [r3, #12]

	USART2->CR1 |= CR1_UE;
 8000456:	4b07      	ldr	r3, [pc, #28]	; (8000474 <uart2_tx_init+0x94>)
 8000458:	68db      	ldr	r3, [r3, #12]
 800045a:	4a06      	ldr	r2, [pc, #24]	; (8000474 <uart2_tx_init+0x94>)
 800045c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000460:	60d3      	str	r3, [r2, #12]
}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40023800 	.word	0x40023800
 800046c:	40020000 	.word	0x40020000
 8000470:	00f42400 	.word	0x00f42400
 8000474:	40004400 	.word	0x40004400

08000478 <uart2_write_char>:

void uart2_write_char(char ch)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	4603      	mov	r3, r0
 8000480:	71fb      	strb	r3, [r7, #7]
	while(! (USART2->SR & SR_TXE)) { }
 8000482:	bf00      	nop
 8000484:	4b07      	ldr	r3, [pc, #28]	; (80004a4 <uart2_write_char+0x2c>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800048c:	2b00      	cmp	r3, #0
 800048e:	d0f9      	beq.n	8000484 <uart2_write_char+0xc>

	USART2->DR = (ch & 0xFF);
 8000490:	4a04      	ldr	r2, [pc, #16]	; (80004a4 <uart2_write_char+0x2c>)
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	6053      	str	r3, [r2, #4]
}
 8000496:	bf00      	nop
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	40004400 	.word	0x40004400

080004a8 <uart2_write_string>:

void uart2_write_string(const char* str) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
    while (*str) {
 80004b0:	e006      	b.n	80004c0 <uart2_write_string+0x18>
    	uart2_write_char(*str++);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	1c5a      	adds	r2, r3, #1
 80004b6:	607a      	str	r2, [r7, #4]
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	4618      	mov	r0, r3
 80004bc:	f7ff ffdc 	bl	8000478 <uart2_write_char>
    while (*str) {
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d1f4      	bne.n	80004b2 <uart2_write_string+0xa>
    }
}
 80004c8:	bf00      	nop
 80004ca:	bf00      	nop
 80004cc:	3708      	adds	r7, #8
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}

080004d2 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t Baudrate)
{
 80004d2:	b580      	push	{r7, lr}
 80004d4:	b084      	sub	sp, #16
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	60f8      	str	r0, [r7, #12]
 80004da:	60b9      	str	r1, [r7, #8]
 80004dc:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, Baudrate);
 80004de:	6879      	ldr	r1, [r7, #4]
 80004e0:	68b8      	ldr	r0, [r7, #8]
 80004e2:	f000 f808 	bl	80004f6 <compute_uart_bd>
 80004e6:	4603      	mov	r3, r0
 80004e8:	461a      	mov	r2, r3
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	609a      	str	r2, [r3, #8]
}
 80004ee:	bf00      	nop
 80004f0:	3710      	adds	r7, #16
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t Baudrate)
{
 80004f6:	b480      	push	{r7}
 80004f8:	b083      	sub	sp, #12
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	6078      	str	r0, [r7, #4]
 80004fe:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (Baudrate/2U))/Baudrate);
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	085a      	lsrs	r2, r3, #1
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	441a      	add	r2, r3
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	fbb2 f3f3 	udiv	r3, r2, r3
 800050e:	b29b      	uxth	r3, r3

}
 8000510:	4618      	mov	r0, r3
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800051c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000554 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000520:	480d      	ldr	r0, [pc, #52]	; (8000558 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000522:	490e      	ldr	r1, [pc, #56]	; (800055c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000524:	4a0e      	ldr	r2, [pc, #56]	; (8000560 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000528:	e002      	b.n	8000530 <LoopCopyDataInit>

0800052a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800052a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800052c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052e:	3304      	adds	r3, #4

08000530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000534:	d3f9      	bcc.n	800052a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000536:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000538:	4c0b      	ldr	r4, [pc, #44]	; (8000568 <LoopFillZerobss+0x26>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800053c:	e001      	b.n	8000542 <LoopFillZerobss>

0800053e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000540:	3204      	adds	r2, #4

08000542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000544:	d3fb      	bcc.n	800053e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000546:	f7ff ff39 	bl	80003bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800054a:	f002 fddf 	bl	800310c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800054e:	f7ff fee7 	bl	8000320 <main>
  bx  lr    
 8000552:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000554:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800055c:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000560:	080031f8 	.word	0x080031f8
  ldr r2, =_sbss
 8000564:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000568:	200049b8 	.word	0x200049b8

0800056c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800056c:	e7fe      	b.n	800056c <ADC_IRQHandler>

0800056e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800056e:	b480      	push	{r7}
 8000570:	b085      	sub	sp, #20
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
 8000576:	460b      	mov	r3, r1
 8000578:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000580:	887a      	ldrh	r2, [r7, #2]
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	4013      	ands	r3, r2
 8000586:	041a      	lsls	r2, r3, #16
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	43d9      	mvns	r1, r3
 800058c:	887b      	ldrh	r3, [r7, #2]
 800058e:	400b      	ands	r3, r1
 8000590:	431a      	orrs	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	619a      	str	r2, [r3, #24]
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b082      	sub	sp, #8
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	691b      	ldr	r3, [r3, #16]
 80005b0:	f003 0302 	and.w	r3, r3, #2
 80005b4:	2b02      	cmp	r3, #2
 80005b6:	d122      	bne.n	80005fe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	f003 0302 	and.w	r3, r3, #2
 80005c2:	2b02      	cmp	r3, #2
 80005c4:	d11b      	bne.n	80005fe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f06f 0202 	mvn.w	r2, #2
 80005ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2201      	movs	r2, #1
 80005d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	f003 0303 	and.w	r3, r3, #3
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d003      	beq.n	80005ec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f000 f8f8 	bl	80007da <HAL_TIM_IC_CaptureCallback>
 80005ea:	e005      	b.n	80005f8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f000 f8ea 	bl	80007c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f000 f8fb 	bl	80007ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2200      	movs	r2, #0
 80005fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	691b      	ldr	r3, [r3, #16]
 8000604:	f003 0304 	and.w	r3, r3, #4
 8000608:	2b04      	cmp	r3, #4
 800060a:	d122      	bne.n	8000652 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	68db      	ldr	r3, [r3, #12]
 8000612:	f003 0304 	and.w	r3, r3, #4
 8000616:	2b04      	cmp	r3, #4
 8000618:	d11b      	bne.n	8000652 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f06f 0204 	mvn.w	r2, #4
 8000622:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2202      	movs	r2, #2
 8000628:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000634:	2b00      	cmp	r3, #0
 8000636:	d003      	beq.n	8000640 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f000 f8ce 	bl	80007da <HAL_TIM_IC_CaptureCallback>
 800063e:	e005      	b.n	800064c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f000 f8c0 	bl	80007c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f000 f8d1 	bl	80007ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2200      	movs	r2, #0
 8000650:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	691b      	ldr	r3, [r3, #16]
 8000658:	f003 0308 	and.w	r3, r3, #8
 800065c:	2b08      	cmp	r3, #8
 800065e:	d122      	bne.n	80006a6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	68db      	ldr	r3, [r3, #12]
 8000666:	f003 0308 	and.w	r3, r3, #8
 800066a:	2b08      	cmp	r3, #8
 800066c:	d11b      	bne.n	80006a6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f06f 0208 	mvn.w	r2, #8
 8000676:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2204      	movs	r2, #4
 800067c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	69db      	ldr	r3, [r3, #28]
 8000684:	f003 0303 	and.w	r3, r3, #3
 8000688:	2b00      	cmp	r3, #0
 800068a:	d003      	beq.n	8000694 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f000 f8a4 	bl	80007da <HAL_TIM_IC_CaptureCallback>
 8000692:	e005      	b.n	80006a0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f000 f896 	bl	80007c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	f000 f8a7 	bl	80007ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2200      	movs	r2, #0
 80006a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	f003 0310 	and.w	r3, r3, #16
 80006b0:	2b10      	cmp	r3, #16
 80006b2:	d122      	bne.n	80006fa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	68db      	ldr	r3, [r3, #12]
 80006ba:	f003 0310 	and.w	r3, r3, #16
 80006be:	2b10      	cmp	r3, #16
 80006c0:	d11b      	bne.n	80006fa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f06f 0210 	mvn.w	r2, #16
 80006ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2208      	movs	r2, #8
 80006d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	69db      	ldr	r3, [r3, #28]
 80006d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d003      	beq.n	80006e8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f000 f87a 	bl	80007da <HAL_TIM_IC_CaptureCallback>
 80006e6:	e005      	b.n	80006f4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f000 f86c 	bl	80007c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f000 f87d 	bl	80007ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2200      	movs	r2, #0
 80006f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	691b      	ldr	r3, [r3, #16]
 8000700:	f003 0301 	and.w	r3, r3, #1
 8000704:	2b01      	cmp	r3, #1
 8000706:	d10e      	bne.n	8000726 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	68db      	ldr	r3, [r3, #12]
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	2b01      	cmp	r3, #1
 8000714:	d107      	bne.n	8000726 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f06f 0201 	mvn.w	r2, #1
 800071e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f000 f846 	bl	80007b2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	691b      	ldr	r3, [r3, #16]
 800072c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000730:	2b80      	cmp	r3, #128	; 0x80
 8000732:	d10e      	bne.n	8000752 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	68db      	ldr	r3, [r3, #12]
 800073a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073e:	2b80      	cmp	r3, #128	; 0x80
 8000740:	d107      	bne.n	8000752 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800074a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f000 f86c 	bl	800082a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	691b      	ldr	r3, [r3, #16]
 8000758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800075c:	2b40      	cmp	r3, #64	; 0x40
 800075e:	d10e      	bne.n	800077e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	68db      	ldr	r3, [r3, #12]
 8000766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800076a:	2b40      	cmp	r3, #64	; 0x40
 800076c:	d107      	bne.n	800077e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f000 f842 	bl	8000802 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	691b      	ldr	r3, [r3, #16]
 8000784:	f003 0320 	and.w	r3, r3, #32
 8000788:	2b20      	cmp	r3, #32
 800078a:	d10e      	bne.n	80007aa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	68db      	ldr	r3, [r3, #12]
 8000792:	f003 0320 	and.w	r3, r3, #32
 8000796:	2b20      	cmp	r3, #32
 8000798:	d107      	bne.n	80007aa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f06f 0220 	mvn.w	r2, #32
 80007a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f000 f836 	bl	8000816 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007b2:	b480      	push	{r7}
 80007b4:	b083      	sub	sp, #12
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr

080007c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007c6:	b480      	push	{r7}
 80007c8:	b083      	sub	sp, #12
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr

080007da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80007da:	b480      	push	{r7}
 80007dc:	b083      	sub	sp, #12
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80007ee:	b480      	push	{r7}
 80007f0:	b083      	sub	sp, #12
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8000802:	b480      	push	{r7}
 8000804:	b083      	sub	sp, #12
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800080a:	bf00      	nop
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr

08000816 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8000816:	b480      	push	{r7}
 8000818:	b083      	sub	sp, #12
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800082a:	b480      	push	{r7}
 800082c:	b083      	sub	sp, #12
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
	...

08000840 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <SysTick_Handler+0x1c>)
 8000846:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8000848:	f001 fbfc 	bl	8002044 <xTaskGetSchedulerState>
 800084c:	4603      	mov	r3, r0
 800084e:	2b01      	cmp	r3, #1
 8000850:	d001      	beq.n	8000856 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8000852:	f002 f9e1 	bl	8002c18 <xPortSysTickHandler>
  }
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	e000e010 	.word	0xe000e010

08000860 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	4a07      	ldr	r2, [pc, #28]	; (800088c <vApplicationGetIdleTaskMemory+0x2c>)
 8000870:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	4a06      	ldr	r2, [pc, #24]	; (8000890 <vApplicationGetIdleTaskMemory+0x30>)
 8000876:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2280      	movs	r2, #128	; 0x80
 800087c:	601a      	str	r2, [r3, #0]
}
 800087e:	bf00      	nop
 8000880:	3714      	adds	r7, #20
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	2000006c 	.word	0x2000006c
 8000890:	200000c8 	.word	0x200000c8

08000894 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	4a07      	ldr	r2, [pc, #28]	; (80008c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80008a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	4a06      	ldr	r2, [pc, #24]	; (80008c4 <vApplicationGetTimerTaskMemory+0x30>)
 80008aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008b2:	601a      	str	r2, [r3, #0]
}
 80008b4:	bf00      	nop
 80008b6:	3714      	adds	r7, #20
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	200002c8 	.word	0x200002c8
 80008c4:	20000324 	.word	0x20000324

080008c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f103 0208 	add.w	r2, r3, #8
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	f04f 32ff 	mov.w	r2, #4294967295
 80008e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	f103 0208 	add.w	r2, r3, #8
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	f103 0208 	add.w	r2, r3, #8
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000922:	b480      	push	{r7}
 8000924:	b085      	sub	sp, #20
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
 800092a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	68fa      	ldr	r2, [r7, #12]
 8000936:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	689a      	ldr	r2, [r3, #8]
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	689b      	ldr	r3, [r3, #8]
 8000944:	683a      	ldr	r2, [r7, #0]
 8000946:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	683a      	ldr	r2, [r7, #0]
 800094c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	1c5a      	adds	r2, r3, #1
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	601a      	str	r2, [r3, #0]
}
 800095e:	bf00      	nop
 8000960:	3714      	adds	r7, #20
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800096a:	b480      	push	{r7}
 800096c:	b085      	sub	sp, #20
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
 8000972:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000980:	d103      	bne.n	800098a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	691b      	ldr	r3, [r3, #16]
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	e00c      	b.n	80009a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	3308      	adds	r3, #8
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	e002      	b.n	8000998 <vListInsert+0x2e>
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d2f6      	bcs.n	8000992 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	685a      	ldr	r2, [r3, #4]
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	683a      	ldr	r2, [r7, #0]
 80009b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	68fa      	ldr	r2, [r7, #12]
 80009b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	683a      	ldr	r2, [r7, #0]
 80009be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	1c5a      	adds	r2, r3, #1
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	601a      	str	r2, [r3, #0]
}
 80009d0:	bf00      	nop
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	691b      	ldr	r3, [r3, #16]
 80009e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	6892      	ldr	r2, [r2, #8]
 80009f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	6852      	ldr	r2, [r2, #4]
 80009fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d103      	bne.n	8000a10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	689a      	ldr	r2, [r3, #8]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	1e5a      	subs	r2, r3, #1
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	681b      	ldr	r3, [r3, #0]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d10a      	bne.n	8000a5a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a48:	f383 8811 	msr	BASEPRI, r3
 8000a4c:	f3bf 8f6f 	isb	sy
 8000a50:	f3bf 8f4f 	dsb	sy
 8000a54:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000a56:	bf00      	nop
 8000a58:	e7fe      	b.n	8000a58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8000a5a:	f002 f84b 	bl	8002af4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a66:	68f9      	ldr	r1, [r7, #12]
 8000a68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000a6a:	fb01 f303 	mul.w	r3, r1, r3
 8000a6e:	441a      	add	r2, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	2200      	movs	r2, #0
 8000a78:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	68f9      	ldr	r1, [r7, #12]
 8000a8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000a90:	fb01 f303 	mul.w	r3, r1, r3
 8000a94:	441a      	add	r2, r3
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	22ff      	movs	r2, #255	; 0xff
 8000a9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	22ff      	movs	r2, #255	; 0xff
 8000aa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d114      	bne.n	8000ada <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	691b      	ldr	r3, [r3, #16]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d01a      	beq.n	8000aee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	3310      	adds	r3, #16
 8000abc:	4618      	mov	r0, r3
 8000abe:	f001 f903 	bl	8001cc8 <xTaskRemoveFromEventList>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d012      	beq.n	8000aee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <xQueueGenericReset+0xcc>)
 8000aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	f3bf 8f4f 	dsb	sy
 8000ad4:	f3bf 8f6f 	isb	sy
 8000ad8:	e009      	b.n	8000aee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	3310      	adds	r3, #16
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff fef2 	bl	80008c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	3324      	adds	r3, #36	; 0x24
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff feed 	bl	80008c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000aee:	f002 f831 	bl	8002b54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000af2:	2301      	movs	r3, #1
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	e000ed04 	.word	0xe000ed04

08000b00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08e      	sub	sp, #56	; 0x38
 8000b04:	af02      	add	r7, sp, #8
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
 8000b0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d10a      	bne.n	8000b2a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8000b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b18:	f383 8811 	msr	BASEPRI, r3
 8000b1c:	f3bf 8f6f 	isb	sy
 8000b20:	f3bf 8f4f 	dsb	sy
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000b26:	bf00      	nop
 8000b28:	e7fe      	b.n	8000b28 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d10a      	bne.n	8000b46 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8000b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b34:	f383 8811 	msr	BASEPRI, r3
 8000b38:	f3bf 8f6f 	isb	sy
 8000b3c:	f3bf 8f4f 	dsb	sy
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000b42:	bf00      	nop
 8000b44:	e7fe      	b.n	8000b44 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d002      	beq.n	8000b52 <xQueueGenericCreateStatic+0x52>
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <xQueueGenericCreateStatic+0x56>
 8000b52:	2301      	movs	r3, #1
 8000b54:	e000      	b.n	8000b58 <xQueueGenericCreateStatic+0x58>
 8000b56:	2300      	movs	r3, #0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d10a      	bne.n	8000b72 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8000b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b60:	f383 8811 	msr	BASEPRI, r3
 8000b64:	f3bf 8f6f 	isb	sy
 8000b68:	f3bf 8f4f 	dsb	sy
 8000b6c:	623b      	str	r3, [r7, #32]
}
 8000b6e:	bf00      	nop
 8000b70:	e7fe      	b.n	8000b70 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d102      	bne.n	8000b7e <xQueueGenericCreateStatic+0x7e>
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d101      	bne.n	8000b82 <xQueueGenericCreateStatic+0x82>
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e000      	b.n	8000b84 <xQueueGenericCreateStatic+0x84>
 8000b82:	2300      	movs	r3, #0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d10a      	bne.n	8000b9e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8000b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b8c:	f383 8811 	msr	BASEPRI, r3
 8000b90:	f3bf 8f6f 	isb	sy
 8000b94:	f3bf 8f4f 	dsb	sy
 8000b98:	61fb      	str	r3, [r7, #28]
}
 8000b9a:	bf00      	nop
 8000b9c:	e7fe      	b.n	8000b9c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8000b9e:	2350      	movs	r3, #80	; 0x50
 8000ba0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	2b50      	cmp	r3, #80	; 0x50
 8000ba6:	d00a      	beq.n	8000bbe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8000ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bac:	f383 8811 	msr	BASEPRI, r3
 8000bb0:	f3bf 8f6f 	isb	sy
 8000bb4:	f3bf 8f4f 	dsb	sy
 8000bb8:	61bb      	str	r3, [r7, #24]
}
 8000bba:	bf00      	nop
 8000bbc:	e7fe      	b.n	8000bbc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8000bbe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8000bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d00d      	beq.n	8000be6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8000bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bcc:	2201      	movs	r2, #1
 8000bce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000bd2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bd8:	9300      	str	r3, [sp, #0]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	68b9      	ldr	r1, [r7, #8]
 8000be0:	68f8      	ldr	r0, [r7, #12]
 8000be2:	f000 f805 	bl	8000bf0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3730      	adds	r7, #48	; 0x30
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
 8000bfc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d103      	bne.n	8000c0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	69ba      	ldr	r2, [r7, #24]
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	e002      	b.n	8000c12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000c12:	69bb      	ldr	r3, [r7, #24]
 8000c14:	68fa      	ldr	r2, [r7, #12]
 8000c16:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	68ba      	ldr	r2, [r7, #8]
 8000c1c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000c1e:	2101      	movs	r1, #1
 8000c20:	69b8      	ldr	r0, [r7, #24]
 8000c22:	f7ff ff05 	bl	8000a30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	78fa      	ldrb	r2, [r7, #3]
 8000c2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08e      	sub	sp, #56	; 0x38
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
 8000c44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000c46:	2300      	movs	r3, #0
 8000c48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d10a      	bne.n	8000c6a <xQueueGenericSend+0x32>
	__asm volatile
 8000c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c58:	f383 8811 	msr	BASEPRI, r3
 8000c5c:	f3bf 8f6f 	isb	sy
 8000c60:	f3bf 8f4f 	dsb	sy
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000c66:	bf00      	nop
 8000c68:	e7fe      	b.n	8000c68 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d103      	bne.n	8000c78 <xQueueGenericSend+0x40>
 8000c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d101      	bne.n	8000c7c <xQueueGenericSend+0x44>
 8000c78:	2301      	movs	r3, #1
 8000c7a:	e000      	b.n	8000c7e <xQueueGenericSend+0x46>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d10a      	bne.n	8000c98 <xQueueGenericSend+0x60>
	__asm volatile
 8000c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c86:	f383 8811 	msr	BASEPRI, r3
 8000c8a:	f3bf 8f6f 	isb	sy
 8000c8e:	f3bf 8f4f 	dsb	sy
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000c94:	bf00      	nop
 8000c96:	e7fe      	b.n	8000c96 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d103      	bne.n	8000ca6 <xQueueGenericSend+0x6e>
 8000c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d101      	bne.n	8000caa <xQueueGenericSend+0x72>
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e000      	b.n	8000cac <xQueueGenericSend+0x74>
 8000caa:	2300      	movs	r3, #0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d10a      	bne.n	8000cc6 <xQueueGenericSend+0x8e>
	__asm volatile
 8000cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cb4:	f383 8811 	msr	BASEPRI, r3
 8000cb8:	f3bf 8f6f 	isb	sy
 8000cbc:	f3bf 8f4f 	dsb	sy
 8000cc0:	623b      	str	r3, [r7, #32]
}
 8000cc2:	bf00      	nop
 8000cc4:	e7fe      	b.n	8000cc4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000cc6:	f001 f9bd 	bl	8002044 <xTaskGetSchedulerState>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d102      	bne.n	8000cd6 <xQueueGenericSend+0x9e>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d101      	bne.n	8000cda <xQueueGenericSend+0xa2>
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e000      	b.n	8000cdc <xQueueGenericSend+0xa4>
 8000cda:	2300      	movs	r3, #0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d10a      	bne.n	8000cf6 <xQueueGenericSend+0xbe>
	__asm volatile
 8000ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ce4:	f383 8811 	msr	BASEPRI, r3
 8000ce8:	f3bf 8f6f 	isb	sy
 8000cec:	f3bf 8f4f 	dsb	sy
 8000cf0:	61fb      	str	r3, [r7, #28]
}
 8000cf2:	bf00      	nop
 8000cf4:	e7fe      	b.n	8000cf4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000cf6:	f001 fefd 	bl	8002af4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d302      	bcc.n	8000d0c <xQueueGenericSend+0xd4>
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d129      	bne.n	8000d60 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000d0c:	683a      	ldr	r2, [r7, #0]
 8000d0e:	68b9      	ldr	r1, [r7, #8]
 8000d10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d12:	f000 fa0b 	bl	800112c <prvCopyDataToQueue>
 8000d16:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d010      	beq.n	8000d42 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d22:	3324      	adds	r3, #36	; 0x24
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 ffcf 	bl	8001cc8 <xTaskRemoveFromEventList>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d013      	beq.n	8000d58 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000d30:	4b3f      	ldr	r3, [pc, #252]	; (8000e30 <xQueueGenericSend+0x1f8>)
 8000d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	f3bf 8f4f 	dsb	sy
 8000d3c:	f3bf 8f6f 	isb	sy
 8000d40:	e00a      	b.n	8000d58 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d007      	beq.n	8000d58 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000d48:	4b39      	ldr	r3, [pc, #228]	; (8000e30 <xQueueGenericSend+0x1f8>)
 8000d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	f3bf 8f4f 	dsb	sy
 8000d54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000d58:	f001 fefc 	bl	8002b54 <vPortExitCritical>
				return pdPASS;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e063      	b.n	8000e28 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d103      	bne.n	8000d6e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000d66:	f001 fef5 	bl	8002b54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	e05c      	b.n	8000e28 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d106      	bne.n	8000d82 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f001 f809 	bl	8001d90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000d82:	f001 fee7 	bl	8002b54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000d86:	f000 fd7b 	bl	8001880 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000d8a:	f001 feb3 	bl	8002af4 <vPortEnterCritical>
 8000d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d94:	b25b      	sxtb	r3, r3
 8000d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d9a:	d103      	bne.n	8000da4 <xQueueGenericSend+0x16c>
 8000d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000da6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000daa:	b25b      	sxtb	r3, r3
 8000dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db0:	d103      	bne.n	8000dba <xQueueGenericSend+0x182>
 8000db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000db4:	2200      	movs	r2, #0
 8000db6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000dba:	f001 fecb 	bl	8002b54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000dbe:	1d3a      	adds	r2, r7, #4
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 fff8 	bl	8001dbc <xTaskCheckForTimeOut>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d124      	bne.n	8000e1c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000dd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000dd4:	f000 faa2 	bl	800131c <prvIsQueueFull>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d018      	beq.n	8000e10 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000de0:	3310      	adds	r3, #16
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	4611      	mov	r1, r2
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 ff1e 	bl	8001c28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000dec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000dee:	f000 fa2d 	bl	800124c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000df2:	f000 fd53 	bl	800189c <xTaskResumeAll>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	f47f af7c 	bne.w	8000cf6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <xQueueGenericSend+0x1f8>)
 8000e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	f3bf 8f4f 	dsb	sy
 8000e0a:	f3bf 8f6f 	isb	sy
 8000e0e:	e772      	b.n	8000cf6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000e10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e12:	f000 fa1b 	bl	800124c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000e16:	f000 fd41 	bl	800189c <xTaskResumeAll>
 8000e1a:	e76c      	b.n	8000cf6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000e1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e1e:	f000 fa15 	bl	800124c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000e22:	f000 fd3b 	bl	800189c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000e26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3738      	adds	r7, #56	; 0x38
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	e000ed04 	.word	0xe000ed04

08000e34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b090      	sub	sp, #64	; 0x40
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
 8000e40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8000e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d10a      	bne.n	8000e62 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8000e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e50:	f383 8811 	msr	BASEPRI, r3
 8000e54:	f3bf 8f6f 	isb	sy
 8000e58:	f3bf 8f4f 	dsb	sy
 8000e5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000e5e:	bf00      	nop
 8000e60:	e7fe      	b.n	8000e60 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d103      	bne.n	8000e70 <xQueueGenericSendFromISR+0x3c>
 8000e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d101      	bne.n	8000e74 <xQueueGenericSendFromISR+0x40>
 8000e70:	2301      	movs	r3, #1
 8000e72:	e000      	b.n	8000e76 <xQueueGenericSendFromISR+0x42>
 8000e74:	2300      	movs	r3, #0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d10a      	bne.n	8000e90 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8000e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e7e:	f383 8811 	msr	BASEPRI, r3
 8000e82:	f3bf 8f6f 	isb	sy
 8000e86:	f3bf 8f4f 	dsb	sy
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000e8c:	bf00      	nop
 8000e8e:	e7fe      	b.n	8000e8e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d103      	bne.n	8000e9e <xQueueGenericSendFromISR+0x6a>
 8000e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d101      	bne.n	8000ea2 <xQueueGenericSendFromISR+0x6e>
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e000      	b.n	8000ea4 <xQueueGenericSendFromISR+0x70>
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d10a      	bne.n	8000ebe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8000ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eac:	f383 8811 	msr	BASEPRI, r3
 8000eb0:	f3bf 8f6f 	isb	sy
 8000eb4:	f3bf 8f4f 	dsb	sy
 8000eb8:	623b      	str	r3, [r7, #32]
}
 8000eba:	bf00      	nop
 8000ebc:	e7fe      	b.n	8000ebc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000ebe:	f001 fefb 	bl	8002cb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000ec2:	f3ef 8211 	mrs	r2, BASEPRI
 8000ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eca:	f383 8811 	msr	BASEPRI, r3
 8000ece:	f3bf 8f6f 	isb	sy
 8000ed2:	f3bf 8f4f 	dsb	sy
 8000ed6:	61fa      	str	r2, [r7, #28]
 8000ed8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000eda:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000edc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ee0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d302      	bcc.n	8000ef0 <xQueueGenericSendFromISR+0xbc>
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d12f      	bne.n	8000f50 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ef2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000f00:	683a      	ldr	r2, [r7, #0]
 8000f02:	68b9      	ldr	r1, [r7, #8]
 8000f04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000f06:	f000 f911 	bl	800112c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000f0a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f12:	d112      	bne.n	8000f3a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d016      	beq.n	8000f4a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f1e:	3324      	adds	r3, #36	; 0x24
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 fed1 	bl	8001cc8 <xTaskRemoveFromEventList>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d00e      	beq.n	8000f4a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d00b      	beq.n	8000f4a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2201      	movs	r2, #1
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	e007      	b.n	8000f4a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000f3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f3e:	3301      	adds	r3, #1
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	b25a      	sxtb	r2, r3
 8000f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8000f4e:	e001      	b.n	8000f54 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f56:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8000f5e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3740      	adds	r7, #64	; 0x40
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08c      	sub	sp, #48	; 0x30
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8000f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d10a      	bne.n	8000f9c <xQueueReceive+0x30>
	__asm volatile
 8000f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f8a:	f383 8811 	msr	BASEPRI, r3
 8000f8e:	f3bf 8f6f 	isb	sy
 8000f92:	f3bf 8f4f 	dsb	sy
 8000f96:	623b      	str	r3, [r7, #32]
}
 8000f98:	bf00      	nop
 8000f9a:	e7fe      	b.n	8000f9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d103      	bne.n	8000faa <xQueueReceive+0x3e>
 8000fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d101      	bne.n	8000fae <xQueueReceive+0x42>
 8000faa:	2301      	movs	r3, #1
 8000fac:	e000      	b.n	8000fb0 <xQueueReceive+0x44>
 8000fae:	2300      	movs	r3, #0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d10a      	bne.n	8000fca <xQueueReceive+0x5e>
	__asm volatile
 8000fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fb8:	f383 8811 	msr	BASEPRI, r3
 8000fbc:	f3bf 8f6f 	isb	sy
 8000fc0:	f3bf 8f4f 	dsb	sy
 8000fc4:	61fb      	str	r3, [r7, #28]
}
 8000fc6:	bf00      	nop
 8000fc8:	e7fe      	b.n	8000fc8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000fca:	f001 f83b 	bl	8002044 <xTaskGetSchedulerState>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d102      	bne.n	8000fda <xQueueReceive+0x6e>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <xQueueReceive+0x72>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e000      	b.n	8000fe0 <xQueueReceive+0x74>
 8000fde:	2300      	movs	r3, #0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d10a      	bne.n	8000ffa <xQueueReceive+0x8e>
	__asm volatile
 8000fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fe8:	f383 8811 	msr	BASEPRI, r3
 8000fec:	f3bf 8f6f 	isb	sy
 8000ff0:	f3bf 8f4f 	dsb	sy
 8000ff4:	61bb      	str	r3, [r7, #24]
}
 8000ff6:	bf00      	nop
 8000ff8:	e7fe      	b.n	8000ff8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000ffa:	f001 fd7b 	bl	8002af4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001002:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001006:	2b00      	cmp	r3, #0
 8001008:	d01f      	beq.n	800104a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800100a:	68b9      	ldr	r1, [r7, #8]
 800100c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800100e:	f000 f8f7 	bl	8001200 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001014:	1e5a      	subs	r2, r3, #1
 8001016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001018:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800101a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101c:	691b      	ldr	r3, [r3, #16]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d00f      	beq.n	8001042 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001024:	3310      	adds	r3, #16
 8001026:	4618      	mov	r0, r3
 8001028:	f000 fe4e 	bl	8001cc8 <xTaskRemoveFromEventList>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d007      	beq.n	8001042 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001032:	4b3d      	ldr	r3, [pc, #244]	; (8001128 <xQueueReceive+0x1bc>)
 8001034:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	f3bf 8f4f 	dsb	sy
 800103e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001042:	f001 fd87 	bl	8002b54 <vPortExitCritical>
				return pdPASS;
 8001046:	2301      	movs	r3, #1
 8001048:	e069      	b.n	800111e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d103      	bne.n	8001058 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001050:	f001 fd80 	bl	8002b54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001054:	2300      	movs	r3, #0
 8001056:	e062      	b.n	800111e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800105a:	2b00      	cmp	r3, #0
 800105c:	d106      	bne.n	800106c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800105e:	f107 0310 	add.w	r3, r7, #16
 8001062:	4618      	mov	r0, r3
 8001064:	f000 fe94 	bl	8001d90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001068:	2301      	movs	r3, #1
 800106a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800106c:	f001 fd72 	bl	8002b54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001070:	f000 fc06 	bl	8001880 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001074:	f001 fd3e 	bl	8002af4 <vPortEnterCritical>
 8001078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800107a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800107e:	b25b      	sxtb	r3, r3
 8001080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001084:	d103      	bne.n	800108e <xQueueReceive+0x122>
 8001086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800108e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001090:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001094:	b25b      	sxtb	r3, r3
 8001096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800109a:	d103      	bne.n	80010a4 <xQueueReceive+0x138>
 800109c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800109e:	2200      	movs	r2, #0
 80010a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80010a4:	f001 fd56 	bl	8002b54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80010a8:	1d3a      	adds	r2, r7, #4
 80010aa:	f107 0310 	add.w	r3, r7, #16
 80010ae:	4611      	mov	r1, r2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 fe83 	bl	8001dbc <xTaskCheckForTimeOut>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d123      	bne.n	8001104 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80010bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80010be:	f000 f917 	bl	80012f0 <prvIsQueueEmpty>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d017      	beq.n	80010f8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80010c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ca:	3324      	adds	r3, #36	; 0x24
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 fda9 	bl	8001c28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80010d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80010d8:	f000 f8b8 	bl	800124c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80010dc:	f000 fbde 	bl	800189c <xTaskResumeAll>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d189      	bne.n	8000ffa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <xQueueReceive+0x1bc>)
 80010e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	f3bf 8f4f 	dsb	sy
 80010f2:	f3bf 8f6f 	isb	sy
 80010f6:	e780      	b.n	8000ffa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80010f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80010fa:	f000 f8a7 	bl	800124c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80010fe:	f000 fbcd 	bl	800189c <xTaskResumeAll>
 8001102:	e77a      	b.n	8000ffa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001104:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001106:	f000 f8a1 	bl	800124c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800110a:	f000 fbc7 	bl	800189c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800110e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001110:	f000 f8ee 	bl	80012f0 <prvIsQueueEmpty>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	f43f af6f 	beq.w	8000ffa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800111c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800111e:	4618      	mov	r0, r3
 8001120:	3730      	adds	r7, #48	; 0x30
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	e000ed04 	.word	0xe000ed04

0800112c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001140:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10d      	bne.n	8001166 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d14d      	bne.n	80011ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	4618      	mov	r0, r3
 8001158:	f000 ff92 	bl	8002080 <xTaskPriorityDisinherit>
 800115c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	e043      	b.n	80011ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d119      	bne.n	80011a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	6858      	ldr	r0, [r3, #4]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	461a      	mov	r2, r3
 8001176:	68b9      	ldr	r1, [r7, #8]
 8001178:	f001 ffec 	bl	8003154 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	441a      	add	r2, r3
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	429a      	cmp	r2, r3
 8001194:	d32b      	bcc.n	80011ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	e026      	b.n	80011ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	68d8      	ldr	r0, [r3, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	461a      	mov	r2, r3
 80011aa:	68b9      	ldr	r1, [r7, #8]
 80011ac:	f001 ffd2 	bl	8003154 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	68da      	ldr	r2, [r3, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b8:	425b      	negs	r3, r3
 80011ba:	441a      	add	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	68da      	ldr	r2, [r3, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d207      	bcs.n	80011dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d4:	425b      	negs	r3, r3
 80011d6:	441a      	add	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d105      	bne.n	80011ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d002      	beq.n	80011ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80011f6:	697b      	ldr	r3, [r7, #20]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	2b00      	cmp	r3, #0
 8001210:	d018      	beq.n	8001244 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68da      	ldr	r2, [r3, #12]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	441a      	add	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68da      	ldr	r2, [r3, #12]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	429a      	cmp	r2, r3
 800122a:	d303      	bcc.n	8001234 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68d9      	ldr	r1, [r3, #12]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	461a      	mov	r2, r3
 800123e:	6838      	ldr	r0, [r7, #0]
 8001240:	f001 ff88 	bl	8003154 <memcpy>
	}
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001254:	f001 fc4e 	bl	8002af4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800125e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001260:	e011      	b.n	8001286 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001266:	2b00      	cmp	r3, #0
 8001268:	d012      	beq.n	8001290 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3324      	adds	r3, #36	; 0x24
 800126e:	4618      	mov	r0, r3
 8001270:	f000 fd2a 	bl	8001cc8 <xTaskRemoveFromEventList>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800127a:	f000 fe01 	bl	8001e80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	3b01      	subs	r3, #1
 8001282:	b2db      	uxtb	r3, r3
 8001284:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128a:	2b00      	cmp	r3, #0
 800128c:	dce9      	bgt.n	8001262 <prvUnlockQueue+0x16>
 800128e:	e000      	b.n	8001292 <prvUnlockQueue+0x46>
					break;
 8001290:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	22ff      	movs	r2, #255	; 0xff
 8001296:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800129a:	f001 fc5b 	bl	8002b54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800129e:	f001 fc29 	bl	8002af4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80012a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80012aa:	e011      	b.n	80012d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d012      	beq.n	80012da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3310      	adds	r3, #16
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 fd05 	bl	8001cc8 <xTaskRemoveFromEventList>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80012c4:	f000 fddc 	bl	8001e80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80012c8:	7bbb      	ldrb	r3, [r7, #14]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80012d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	dce9      	bgt.n	80012ac <prvUnlockQueue+0x60>
 80012d8:	e000      	b.n	80012dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80012da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	22ff      	movs	r2, #255	; 0xff
 80012e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80012e4:	f001 fc36 	bl	8002b54 <vPortExitCritical>
}
 80012e8:	bf00      	nop
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80012f8:	f001 fbfc 	bl	8002af4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001300:	2b00      	cmp	r3, #0
 8001302:	d102      	bne.n	800130a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001304:	2301      	movs	r3, #1
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	e001      	b.n	800130e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800130e:	f001 fc21 	bl	8002b54 <vPortExitCritical>

	return xReturn;
 8001312:	68fb      	ldr	r3, [r7, #12]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001324:	f001 fbe6 	bl	8002af4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001330:	429a      	cmp	r2, r3
 8001332:	d102      	bne.n	800133a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001334:	2301      	movs	r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	e001      	b.n	800133e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800133e:	f001 fc09 	bl	8002b54 <vPortExitCritical>

	return xReturn;
 8001342:	68fb      	ldr	r3, [r7, #12]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	e014      	b.n	8001386 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800135c:	4a0f      	ldr	r2, [pc, #60]	; (800139c <vQueueAddToRegistry+0x50>)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d10b      	bne.n	8001380 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001368:	490c      	ldr	r1, [pc, #48]	; (800139c <vQueueAddToRegistry+0x50>)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001372:	4a0a      	ldr	r2, [pc, #40]	; (800139c <vQueueAddToRegistry+0x50>)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	4413      	add	r3, r2
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800137e:	e006      	b.n	800138e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	3301      	adds	r3, #1
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2b07      	cmp	r3, #7
 800138a:	d9e7      	bls.n	800135c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000724 	.word	0x20000724

080013a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80013b0:	f001 fba0 	bl	8002af4 <vPortEnterCritical>
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013ba:	b25b      	sxtb	r3, r3
 80013bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c0:	d103      	bne.n	80013ca <vQueueWaitForMessageRestricted+0x2a>
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013d0:	b25b      	sxtb	r3, r3
 80013d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d6:	d103      	bne.n	80013e0 <vQueueWaitForMessageRestricted+0x40>
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80013e0:	f001 fbb8 	bl	8002b54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d106      	bne.n	80013fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	3324      	adds	r3, #36	; 0x24
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	68b9      	ldr	r1, [r7, #8]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 fc3b 	bl	8001c70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80013fa:	6978      	ldr	r0, [r7, #20]
 80013fc:	f7ff ff26 	bl	800124c <prvUnlockQueue>
	}
 8001400:	bf00      	nop
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08e      	sub	sp, #56	; 0x38
 800140c:	af04      	add	r7, sp, #16
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
 8001414:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001418:	2b00      	cmp	r3, #0
 800141a:	d10a      	bne.n	8001432 <xTaskCreateStatic+0x2a>
	__asm volatile
 800141c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001420:	f383 8811 	msr	BASEPRI, r3
 8001424:	f3bf 8f6f 	isb	sy
 8001428:	f3bf 8f4f 	dsb	sy
 800142c:	623b      	str	r3, [r7, #32]
}
 800142e:	bf00      	nop
 8001430:	e7fe      	b.n	8001430 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001434:	2b00      	cmp	r3, #0
 8001436:	d10a      	bne.n	800144e <xTaskCreateStatic+0x46>
	__asm volatile
 8001438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800143c:	f383 8811 	msr	BASEPRI, r3
 8001440:	f3bf 8f6f 	isb	sy
 8001444:	f3bf 8f4f 	dsb	sy
 8001448:	61fb      	str	r3, [r7, #28]
}
 800144a:	bf00      	nop
 800144c:	e7fe      	b.n	800144c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800144e:	235c      	movs	r3, #92	; 0x5c
 8001450:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	2b5c      	cmp	r3, #92	; 0x5c
 8001456:	d00a      	beq.n	800146e <xTaskCreateStatic+0x66>
	__asm volatile
 8001458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800145c:	f383 8811 	msr	BASEPRI, r3
 8001460:	f3bf 8f6f 	isb	sy
 8001464:	f3bf 8f4f 	dsb	sy
 8001468:	61bb      	str	r3, [r7, #24]
}
 800146a:	bf00      	nop
 800146c:	e7fe      	b.n	800146c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800146e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001472:	2b00      	cmp	r3, #0
 8001474:	d01e      	beq.n	80014b4 <xTaskCreateStatic+0xac>
 8001476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001478:	2b00      	cmp	r3, #0
 800147a:	d01b      	beq.n	80014b4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800147c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001482:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001484:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	2202      	movs	r2, #2
 800148a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800148e:	2300      	movs	r3, #0
 8001490:	9303      	str	r3, [sp, #12]
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	9302      	str	r3, [sp, #8]
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	9301      	str	r3, [sp, #4]
 800149c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	68b9      	ldr	r1, [r7, #8]
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f000 f850 	bl	800154c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80014ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014ae:	f000 f8dd 	bl	800166c <prvAddNewTaskToReadyList>
 80014b2:	e001      	b.n	80014b8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80014b8:	697b      	ldr	r3, [r7, #20]
	}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3728      	adds	r7, #40	; 0x28
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b08c      	sub	sp, #48	; 0x30
 80014c6:	af04      	add	r7, sp, #16
 80014c8:	60f8      	str	r0, [r7, #12]
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	603b      	str	r3, [r7, #0]
 80014ce:	4613      	mov	r3, r2
 80014d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4618      	mov	r0, r3
 80014d8:	f001 fc2e 	bl	8002d38 <pvPortMalloc>
 80014dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00e      	beq.n	8001502 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80014e4:	205c      	movs	r0, #92	; 0x5c
 80014e6:	f001 fc27 	bl	8002d38 <pvPortMalloc>
 80014ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	631a      	str	r2, [r3, #48]	; 0x30
 80014f8:	e005      	b.n	8001506 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80014fa:	6978      	ldr	r0, [r7, #20]
 80014fc:	f001 fce8 	bl	8002ed0 <vPortFree>
 8001500:	e001      	b.n	8001506 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d017      	beq.n	800153c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001514:	88fa      	ldrh	r2, [r7, #6]
 8001516:	2300      	movs	r3, #0
 8001518:	9303      	str	r3, [sp, #12]
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	9302      	str	r3, [sp, #8]
 800151e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001520:	9301      	str	r3, [sp, #4]
 8001522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	68b9      	ldr	r1, [r7, #8]
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f000 f80e 	bl	800154c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001530:	69f8      	ldr	r0, [r7, #28]
 8001532:	f000 f89b 	bl	800166c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001536:	2301      	movs	r3, #1
 8001538:	61bb      	str	r3, [r7, #24]
 800153a:	e002      	b.n	8001542 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800153c:	f04f 33ff 	mov.w	r3, #4294967295
 8001540:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001542:	69bb      	ldr	r3, [r7, #24]
	}
 8001544:	4618      	mov	r0, r3
 8001546:	3720      	adds	r7, #32
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
 8001558:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800155a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800155c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	461a      	mov	r2, r3
 8001564:	21a5      	movs	r1, #165	; 0xa5
 8001566:	f001 fe03 	bl	8003170 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800156a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800156c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001574:	3b01      	subs	r3, #1
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	f023 0307 	bic.w	r3, r3, #7
 8001582:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	2b00      	cmp	r3, #0
 800158c:	d00a      	beq.n	80015a4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800158e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001592:	f383 8811 	msr	BASEPRI, r3
 8001596:	f3bf 8f6f 	isb	sy
 800159a:	f3bf 8f4f 	dsb	sy
 800159e:	617b      	str	r3, [r7, #20]
}
 80015a0:	bf00      	nop
 80015a2:	e7fe      	b.n	80015a2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d01f      	beq.n	80015ea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
 80015ae:	e012      	b.n	80015d6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80015b0:	68ba      	ldr	r2, [r7, #8]
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	4413      	add	r3, r2
 80015b6:	7819      	ldrb	r1, [r3, #0]
 80015b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	4413      	add	r3, r2
 80015be:	3334      	adds	r3, #52	; 0x34
 80015c0:	460a      	mov	r2, r1
 80015c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	4413      	add	r3, r2
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d006      	beq.n	80015de <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	3301      	adds	r3, #1
 80015d4:	61fb      	str	r3, [r7, #28]
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	2b0f      	cmp	r3, #15
 80015da:	d9e9      	bls.n	80015b0 <prvInitialiseNewTask+0x64>
 80015dc:	e000      	b.n	80015e0 <prvInitialiseNewTask+0x94>
			{
				break;
 80015de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80015e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80015e8:	e003      	b.n	80015f2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80015ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80015f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f4:	2b37      	cmp	r3, #55	; 0x37
 80015f6:	d901      	bls.n	80015fc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80015f8:	2337      	movs	r3, #55	; 0x37
 80015fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80015fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001600:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001604:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001606:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8001608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800160a:	2200      	movs	r2, #0
 800160c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800160e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001610:	3304      	adds	r3, #4
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff f978 	bl	8000908 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800161a:	3318      	adds	r3, #24
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff f973 	bl	8000908 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001626:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800162a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800162e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001630:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001636:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800163a:	2200      	movs	r2, #0
 800163c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800163e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	68f9      	ldr	r1, [r7, #12]
 800164a:	69b8      	ldr	r0, [r7, #24]
 800164c:	f001 f928 	bl	80028a0 <pxPortInitialiseStack>
 8001650:	4602      	mov	r2, r0
 8001652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001654:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001658:	2b00      	cmp	r3, #0
 800165a:	d002      	beq.n	8001662 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800165c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800165e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001660:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001662:	bf00      	nop
 8001664:	3720      	adds	r7, #32
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001674:	f001 fa3e 	bl	8002af4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001678:	4b2d      	ldr	r3, [pc, #180]	; (8001730 <prvAddNewTaskToReadyList+0xc4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	3301      	adds	r3, #1
 800167e:	4a2c      	ldr	r2, [pc, #176]	; (8001730 <prvAddNewTaskToReadyList+0xc4>)
 8001680:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001682:	4b2c      	ldr	r3, [pc, #176]	; (8001734 <prvAddNewTaskToReadyList+0xc8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d109      	bne.n	800169e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800168a:	4a2a      	ldr	r2, [pc, #168]	; (8001734 <prvAddNewTaskToReadyList+0xc8>)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001690:	4b27      	ldr	r3, [pc, #156]	; (8001730 <prvAddNewTaskToReadyList+0xc4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d110      	bne.n	80016ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001698:	f000 fc16 	bl	8001ec8 <prvInitialiseTaskLists>
 800169c:	e00d      	b.n	80016ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800169e:	4b26      	ldr	r3, [pc, #152]	; (8001738 <prvAddNewTaskToReadyList+0xcc>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d109      	bne.n	80016ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80016a6:	4b23      	ldr	r3, [pc, #140]	; (8001734 <prvAddNewTaskToReadyList+0xc8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d802      	bhi.n	80016ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80016b4:	4a1f      	ldr	r2, [pc, #124]	; (8001734 <prvAddNewTaskToReadyList+0xc8>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80016ba:	4b20      	ldr	r3, [pc, #128]	; (800173c <prvAddNewTaskToReadyList+0xd0>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	3301      	adds	r3, #1
 80016c0:	4a1e      	ldr	r2, [pc, #120]	; (800173c <prvAddNewTaskToReadyList+0xd0>)
 80016c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80016c4:	4b1d      	ldr	r3, [pc, #116]	; (800173c <prvAddNewTaskToReadyList+0xd0>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <prvAddNewTaskToReadyList+0xd4>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d903      	bls.n	80016e0 <prvAddNewTaskToReadyList+0x74>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016dc:	4a18      	ldr	r2, [pc, #96]	; (8001740 <prvAddNewTaskToReadyList+0xd4>)
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4a15      	ldr	r2, [pc, #84]	; (8001744 <prvAddNewTaskToReadyList+0xd8>)
 80016ee:	441a      	add	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3304      	adds	r3, #4
 80016f4:	4619      	mov	r1, r3
 80016f6:	4610      	mov	r0, r2
 80016f8:	f7ff f913 	bl	8000922 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80016fc:	f001 fa2a 	bl	8002b54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001700:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <prvAddNewTaskToReadyList+0xcc>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d00e      	beq.n	8001726 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001708:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <prvAddNewTaskToReadyList+0xc8>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001712:	429a      	cmp	r2, r3
 8001714:	d207      	bcs.n	8001726 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001716:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <prvAddNewTaskToReadyList+0xdc>)
 8001718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	f3bf 8f4f 	dsb	sy
 8001722:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000c38 	.word	0x20000c38
 8001734:	20000764 	.word	0x20000764
 8001738:	20000c44 	.word	0x20000c44
 800173c:	20000c54 	.word	0x20000c54
 8001740:	20000c40 	.word	0x20000c40
 8001744:	20000768 	.word	0x20000768
 8001748:	e000ed04 	.word	0xe000ed04

0800174c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001754:	2300      	movs	r3, #0
 8001756:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d017      	beq.n	800178e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800175e:	4b13      	ldr	r3, [pc, #76]	; (80017ac <vTaskDelay+0x60>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00a      	beq.n	800177c <vTaskDelay+0x30>
	__asm volatile
 8001766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800176a:	f383 8811 	msr	BASEPRI, r3
 800176e:	f3bf 8f6f 	isb	sy
 8001772:	f3bf 8f4f 	dsb	sy
 8001776:	60bb      	str	r3, [r7, #8]
}
 8001778:	bf00      	nop
 800177a:	e7fe      	b.n	800177a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800177c:	f000 f880 	bl	8001880 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001780:	2100      	movs	r1, #0
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 fcea 	bl	800215c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001788:	f000 f888 	bl	800189c <xTaskResumeAll>
 800178c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d107      	bne.n	80017a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <vTaskDelay+0x64>)
 8001796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	f3bf 8f4f 	dsb	sy
 80017a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80017a4:	bf00      	nop
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20000c60 	.word	0x20000c60
 80017b0:	e000ed04 	.word	0xe000ed04

080017b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	; 0x28
 80017b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80017c2:	463a      	mov	r2, r7
 80017c4:	1d39      	adds	r1, r7, #4
 80017c6:	f107 0308 	add.w	r3, r7, #8
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff f848 	bl	8000860 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80017d0:	6839      	ldr	r1, [r7, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68ba      	ldr	r2, [r7, #8]
 80017d6:	9202      	str	r2, [sp, #8]
 80017d8:	9301      	str	r3, [sp, #4]
 80017da:	2300      	movs	r3, #0
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	2300      	movs	r3, #0
 80017e0:	460a      	mov	r2, r1
 80017e2:	4921      	ldr	r1, [pc, #132]	; (8001868 <vTaskStartScheduler+0xb4>)
 80017e4:	4821      	ldr	r0, [pc, #132]	; (800186c <vTaskStartScheduler+0xb8>)
 80017e6:	f7ff fe0f 	bl	8001408 <xTaskCreateStatic>
 80017ea:	4603      	mov	r3, r0
 80017ec:	4a20      	ldr	r2, [pc, #128]	; (8001870 <vTaskStartScheduler+0xbc>)
 80017ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80017f0:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <vTaskStartScheduler+0xbc>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d002      	beq.n	80017fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80017f8:	2301      	movs	r3, #1
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	e001      	b.n	8001802 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d102      	bne.n	800180e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8001808:	f000 fcfc 	bl	8002204 <xTimerCreateTimerTask>
 800180c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d116      	bne.n	8001842 <vTaskStartScheduler+0x8e>
	__asm volatile
 8001814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001818:	f383 8811 	msr	BASEPRI, r3
 800181c:	f3bf 8f6f 	isb	sy
 8001820:	f3bf 8f4f 	dsb	sy
 8001824:	613b      	str	r3, [r7, #16]
}
 8001826:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001828:	4b12      	ldr	r3, [pc, #72]	; (8001874 <vTaskStartScheduler+0xc0>)
 800182a:	f04f 32ff 	mov.w	r2, #4294967295
 800182e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <vTaskStartScheduler+0xc4>)
 8001832:	2201      	movs	r2, #1
 8001834:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001836:	4b11      	ldr	r3, [pc, #68]	; (800187c <vTaskStartScheduler+0xc8>)
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800183c:	f001 f8b8 	bl	80029b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001840:	e00e      	b.n	8001860 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001848:	d10a      	bne.n	8001860 <vTaskStartScheduler+0xac>
	__asm volatile
 800184a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800184e:	f383 8811 	msr	BASEPRI, r3
 8001852:	f3bf 8f6f 	isb	sy
 8001856:	f3bf 8f4f 	dsb	sy
 800185a:	60fb      	str	r3, [r7, #12]
}
 800185c:	bf00      	nop
 800185e:	e7fe      	b.n	800185e <vTaskStartScheduler+0xaa>
}
 8001860:	bf00      	nop
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	080031d8 	.word	0x080031d8
 800186c:	08001e99 	.word	0x08001e99
 8001870:	20000c5c 	.word	0x20000c5c
 8001874:	20000c58 	.word	0x20000c58
 8001878:	20000c44 	.word	0x20000c44
 800187c:	20000c3c 	.word	0x20000c3c

08001880 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001884:	4b04      	ldr	r3, [pc, #16]	; (8001898 <vTaskSuspendAll+0x18>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	3301      	adds	r3, #1
 800188a:	4a03      	ldr	r2, [pc, #12]	; (8001898 <vTaskSuspendAll+0x18>)
 800188c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	20000c60 	.word	0x20000c60

0800189c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80018aa:	4b42      	ldr	r3, [pc, #264]	; (80019b4 <xTaskResumeAll+0x118>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10a      	bne.n	80018c8 <xTaskResumeAll+0x2c>
	__asm volatile
 80018b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018b6:	f383 8811 	msr	BASEPRI, r3
 80018ba:	f3bf 8f6f 	isb	sy
 80018be:	f3bf 8f4f 	dsb	sy
 80018c2:	603b      	str	r3, [r7, #0]
}
 80018c4:	bf00      	nop
 80018c6:	e7fe      	b.n	80018c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80018c8:	f001 f914 	bl	8002af4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80018cc:	4b39      	ldr	r3, [pc, #228]	; (80019b4 <xTaskResumeAll+0x118>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	3b01      	subs	r3, #1
 80018d2:	4a38      	ldr	r2, [pc, #224]	; (80019b4 <xTaskResumeAll+0x118>)
 80018d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80018d6:	4b37      	ldr	r3, [pc, #220]	; (80019b4 <xTaskResumeAll+0x118>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d162      	bne.n	80019a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80018de:	4b36      	ldr	r3, [pc, #216]	; (80019b8 <xTaskResumeAll+0x11c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d05e      	beq.n	80019a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80018e6:	e02f      	b.n	8001948 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80018e8:	4b34      	ldr	r3, [pc, #208]	; (80019bc <xTaskResumeAll+0x120>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	3318      	adds	r3, #24
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff f871 	bl	80009dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	3304      	adds	r3, #4
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff f86c 	bl	80009dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001908:	4b2d      	ldr	r3, [pc, #180]	; (80019c0 <xTaskResumeAll+0x124>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	429a      	cmp	r2, r3
 800190e:	d903      	bls.n	8001918 <xTaskResumeAll+0x7c>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001914:	4a2a      	ldr	r2, [pc, #168]	; (80019c0 <xTaskResumeAll+0x124>)
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800191c:	4613      	mov	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4a27      	ldr	r2, [pc, #156]	; (80019c4 <xTaskResumeAll+0x128>)
 8001926:	441a      	add	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	3304      	adds	r3, #4
 800192c:	4619      	mov	r1, r3
 800192e:	4610      	mov	r0, r2
 8001930:	f7fe fff7 	bl	8000922 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001938:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <xTaskResumeAll+0x12c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193e:	429a      	cmp	r2, r3
 8001940:	d302      	bcc.n	8001948 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8001942:	4b22      	ldr	r3, [pc, #136]	; (80019cc <xTaskResumeAll+0x130>)
 8001944:	2201      	movs	r2, #1
 8001946:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001948:	4b1c      	ldr	r3, [pc, #112]	; (80019bc <xTaskResumeAll+0x120>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1cb      	bne.n	80018e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001956:	f000 fb55 	bl	8002004 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800195a:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <xTaskResumeAll+0x134>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d010      	beq.n	8001988 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001966:	f000 f847 	bl	80019f8 <xTaskIncrementTick>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d002      	beq.n	8001976 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8001970:	4b16      	ldr	r3, [pc, #88]	; (80019cc <xTaskResumeAll+0x130>)
 8001972:	2201      	movs	r2, #1
 8001974:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	3b01      	subs	r3, #1
 800197a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f1      	bne.n	8001966 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8001982:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <xTaskResumeAll+0x134>)
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001988:	4b10      	ldr	r3, [pc, #64]	; (80019cc <xTaskResumeAll+0x130>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d009      	beq.n	80019a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001990:	2301      	movs	r3, #1
 8001992:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001994:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <xTaskResumeAll+0x138>)
 8001996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	f3bf 8f4f 	dsb	sy
 80019a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80019a4:	f001 f8d6 	bl	8002b54 <vPortExitCritical>

	return xAlreadyYielded;
 80019a8:	68bb      	ldr	r3, [r7, #8]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000c60 	.word	0x20000c60
 80019b8:	20000c38 	.word	0x20000c38
 80019bc:	20000bf8 	.word	0x20000bf8
 80019c0:	20000c40 	.word	0x20000c40
 80019c4:	20000768 	.word	0x20000768
 80019c8:	20000764 	.word	0x20000764
 80019cc:	20000c4c 	.word	0x20000c4c
 80019d0:	20000c48 	.word	0x20000c48
 80019d4:	e000ed04 	.word	0xe000ed04

080019d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80019de:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <xTaskGetTickCount+0x1c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80019e4:	687b      	ldr	r3, [r7, #4]
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20000c3c 	.word	0x20000c3c

080019f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a02:	4b4f      	ldr	r3, [pc, #316]	; (8001b40 <xTaskIncrementTick+0x148>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f040 808f 	bne.w	8001b2a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001a0c:	4b4d      	ldr	r3, [pc, #308]	; (8001b44 <xTaskIncrementTick+0x14c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	3301      	adds	r3, #1
 8001a12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001a14:	4a4b      	ldr	r2, [pc, #300]	; (8001b44 <xTaskIncrementTick+0x14c>)
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d120      	bne.n	8001a62 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001a20:	4b49      	ldr	r3, [pc, #292]	; (8001b48 <xTaskIncrementTick+0x150>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00a      	beq.n	8001a40 <xTaskIncrementTick+0x48>
	__asm volatile
 8001a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a2e:	f383 8811 	msr	BASEPRI, r3
 8001a32:	f3bf 8f6f 	isb	sy
 8001a36:	f3bf 8f4f 	dsb	sy
 8001a3a:	603b      	str	r3, [r7, #0]
}
 8001a3c:	bf00      	nop
 8001a3e:	e7fe      	b.n	8001a3e <xTaskIncrementTick+0x46>
 8001a40:	4b41      	ldr	r3, [pc, #260]	; (8001b48 <xTaskIncrementTick+0x150>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	4b41      	ldr	r3, [pc, #260]	; (8001b4c <xTaskIncrementTick+0x154>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a3f      	ldr	r2, [pc, #252]	; (8001b48 <xTaskIncrementTick+0x150>)
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	4a3f      	ldr	r2, [pc, #252]	; (8001b4c <xTaskIncrementTick+0x154>)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	4b3e      	ldr	r3, [pc, #248]	; (8001b50 <xTaskIncrementTick+0x158>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	4a3d      	ldr	r2, [pc, #244]	; (8001b50 <xTaskIncrementTick+0x158>)
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	f000 fad1 	bl	8002004 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001a62:	4b3c      	ldr	r3, [pc, #240]	; (8001b54 <xTaskIncrementTick+0x15c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d349      	bcc.n	8001b00 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a6c:	4b36      	ldr	r3, [pc, #216]	; (8001b48 <xTaskIncrementTick+0x150>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d104      	bne.n	8001a80 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a76:	4b37      	ldr	r3, [pc, #220]	; (8001b54 <xTaskIncrementTick+0x15c>)
 8001a78:	f04f 32ff 	mov.w	r2, #4294967295
 8001a7c:	601a      	str	r2, [r3, #0]
					break;
 8001a7e:	e03f      	b.n	8001b00 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a80:	4b31      	ldr	r3, [pc, #196]	; (8001b48 <xTaskIncrementTick+0x150>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d203      	bcs.n	8001aa0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001a98:	4a2e      	ldr	r2, [pc, #184]	; (8001b54 <xTaskIncrementTick+0x15c>)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001a9e:	e02f      	b.n	8001b00 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	3304      	adds	r3, #4
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7fe ff99 	bl	80009dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d004      	beq.n	8001abc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	3318      	adds	r3, #24
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe ff90 	bl	80009dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ac0:	4b25      	ldr	r3, [pc, #148]	; (8001b58 <xTaskIncrementTick+0x160>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d903      	bls.n	8001ad0 <xTaskIncrementTick+0xd8>
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001acc:	4a22      	ldr	r2, [pc, #136]	; (8001b58 <xTaskIncrementTick+0x160>)
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4a1f      	ldr	r2, [pc, #124]	; (8001b5c <xTaskIncrementTick+0x164>)
 8001ade:	441a      	add	r2, r3
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	f7fe ff1b 	bl	8000922 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001af0:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <xTaskIncrementTick+0x168>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d3b8      	bcc.n	8001a6c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8001afa:	2301      	movs	r3, #1
 8001afc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001afe:	e7b5      	b.n	8001a6c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001b00:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <xTaskIncrementTick+0x168>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b06:	4915      	ldr	r1, [pc, #84]	; (8001b5c <xTaskIncrementTick+0x164>)
 8001b08:	4613      	mov	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	440b      	add	r3, r1
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d901      	bls.n	8001b1c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001b1c:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <xTaskIncrementTick+0x16c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d007      	beq.n	8001b34 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8001b24:	2301      	movs	r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	e004      	b.n	8001b34 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <xTaskIncrementTick+0x170>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	4a0d      	ldr	r2, [pc, #52]	; (8001b68 <xTaskIncrementTick+0x170>)
 8001b32:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001b34:	697b      	ldr	r3, [r7, #20]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000c60 	.word	0x20000c60
 8001b44:	20000c3c 	.word	0x20000c3c
 8001b48:	20000bf0 	.word	0x20000bf0
 8001b4c:	20000bf4 	.word	0x20000bf4
 8001b50:	20000c50 	.word	0x20000c50
 8001b54:	20000c58 	.word	0x20000c58
 8001b58:	20000c40 	.word	0x20000c40
 8001b5c:	20000768 	.word	0x20000768
 8001b60:	20000764 	.word	0x20000764
 8001b64:	20000c4c 	.word	0x20000c4c
 8001b68:	20000c48 	.word	0x20000c48

08001b6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001b72:	4b28      	ldr	r3, [pc, #160]	; (8001c14 <vTaskSwitchContext+0xa8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001b7a:	4b27      	ldr	r3, [pc, #156]	; (8001c18 <vTaskSwitchContext+0xac>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001b80:	e041      	b.n	8001c06 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8001b82:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <vTaskSwitchContext+0xac>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b88:	4b24      	ldr	r3, [pc, #144]	; (8001c1c <vTaskSwitchContext+0xb0>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	e010      	b.n	8001bb2 <vTaskSwitchContext+0x46>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10a      	bne.n	8001bac <vTaskSwitchContext+0x40>
	__asm volatile
 8001b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b9a:	f383 8811 	msr	BASEPRI, r3
 8001b9e:	f3bf 8f6f 	isb	sy
 8001ba2:	f3bf 8f4f 	dsb	sy
 8001ba6:	607b      	str	r3, [r7, #4]
}
 8001ba8:	bf00      	nop
 8001baa:	e7fe      	b.n	8001baa <vTaskSwitchContext+0x3e>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	491b      	ldr	r1, [pc, #108]	; (8001c20 <vTaskSwitchContext+0xb4>)
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0e4      	beq.n	8001b90 <vTaskSwitchContext+0x24>
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4a13      	ldr	r2, [pc, #76]	; (8001c20 <vTaskSwitchContext+0xb4>)
 8001bd2:	4413      	add	r3, r2
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	605a      	str	r2, [r3, #4]
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	3308      	adds	r3, #8
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d104      	bne.n	8001bf6 <vTaskSwitchContext+0x8a>
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	4a09      	ldr	r2, [pc, #36]	; (8001c24 <vTaskSwitchContext+0xb8>)
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	4a06      	ldr	r2, [pc, #24]	; (8001c1c <vTaskSwitchContext+0xb0>)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6013      	str	r3, [r2, #0]
}
 8001c06:	bf00      	nop
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20000c60 	.word	0x20000c60
 8001c18:	20000c4c 	.word	0x20000c4c
 8001c1c:	20000c40 	.word	0x20000c40
 8001c20:	20000768 	.word	0x20000768
 8001c24:	20000764 	.word	0x20000764

08001c28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d10a      	bne.n	8001c4e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8001c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c3c:	f383 8811 	msr	BASEPRI, r3
 8001c40:	f3bf 8f6f 	isb	sy
 8001c44:	f3bf 8f4f 	dsb	sy
 8001c48:	60fb      	str	r3, [r7, #12]
}
 8001c4a:	bf00      	nop
 8001c4c:	e7fe      	b.n	8001c4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001c4e:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <vTaskPlaceOnEventList+0x44>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	3318      	adds	r3, #24
 8001c54:	4619      	mov	r1, r3
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7fe fe87 	bl	800096a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	6838      	ldr	r0, [r7, #0]
 8001c60:	f000 fa7c 	bl	800215c <prvAddCurrentTaskToDelayedList>
}
 8001c64:	bf00      	nop
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20000764 	.word	0x20000764

08001c70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10a      	bne.n	8001c98 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8001c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c86:	f383 8811 	msr	BASEPRI, r3
 8001c8a:	f3bf 8f6f 	isb	sy
 8001c8e:	f3bf 8f4f 	dsb	sy
 8001c92:	617b      	str	r3, [r7, #20]
}
 8001c94:	bf00      	nop
 8001c96:	e7fe      	b.n	8001c96 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001c98:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <vTaskPlaceOnEventListRestricted+0x54>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	3318      	adds	r3, #24
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	f7fe fe3e 	bl	8000922 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d002      	beq.n	8001cb2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8001cac:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	68b8      	ldr	r0, [r7, #8]
 8001cb6:	f000 fa51 	bl	800215c <prvAddCurrentTaskToDelayedList>
	}
 8001cba:	bf00      	nop
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000764 	.word	0x20000764

08001cc8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d10a      	bne.n	8001cf4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8001cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ce2:	f383 8811 	msr	BASEPRI, r3
 8001ce6:	f3bf 8f6f 	isb	sy
 8001cea:	f3bf 8f4f 	dsb	sy
 8001cee:	60fb      	str	r3, [r7, #12]
}
 8001cf0:	bf00      	nop
 8001cf2:	e7fe      	b.n	8001cf2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	3318      	adds	r3, #24
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fe6f 	bl	80009dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001cfe:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <xTaskRemoveFromEventList+0xb0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d11d      	bne.n	8001d42 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fe66 	bl	80009dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d14:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <xTaskRemoveFromEventList+0xb4>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d903      	bls.n	8001d24 <xTaskRemoveFromEventList+0x5c>
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d20:	4a16      	ldr	r2, [pc, #88]	; (8001d7c <xTaskRemoveFromEventList+0xb4>)
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d28:	4613      	mov	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4a13      	ldr	r2, [pc, #76]	; (8001d80 <xTaskRemoveFromEventList+0xb8>)
 8001d32:	441a      	add	r2, r3
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	3304      	adds	r3, #4
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4610      	mov	r0, r2
 8001d3c:	f7fe fdf1 	bl	8000922 <vListInsertEnd>
 8001d40:	e005      	b.n	8001d4e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	3318      	adds	r3, #24
 8001d46:	4619      	mov	r1, r3
 8001d48:	480e      	ldr	r0, [pc, #56]	; (8001d84 <xTaskRemoveFromEventList+0xbc>)
 8001d4a:	f7fe fdea 	bl	8000922 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d52:	4b0d      	ldr	r3, [pc, #52]	; (8001d88 <xTaskRemoveFromEventList+0xc0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d905      	bls.n	8001d68 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001d60:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <xTaskRemoveFromEventList+0xc4>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	e001      	b.n	8001d6c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8001d6c:	697b      	ldr	r3, [r7, #20]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000c60 	.word	0x20000c60
 8001d7c:	20000c40 	.word	0x20000c40
 8001d80:	20000768 	.word	0x20000768
 8001d84:	20000bf8 	.word	0x20000bf8
 8001d88:	20000764 	.word	0x20000764
 8001d8c:	20000c4c 	.word	0x20000c4c

08001d90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <vTaskInternalSetTimeOutState+0x24>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001da0:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <vTaskInternalSetTimeOutState+0x28>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	605a      	str	r2, [r3, #4]
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	20000c50 	.word	0x20000c50
 8001db8:	20000c3c 	.word	0x20000c3c

08001dbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10a      	bne.n	8001de2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8001dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dd0:	f383 8811 	msr	BASEPRI, r3
 8001dd4:	f3bf 8f6f 	isb	sy
 8001dd8:	f3bf 8f4f 	dsb	sy
 8001ddc:	613b      	str	r3, [r7, #16]
}
 8001dde:	bf00      	nop
 8001de0:	e7fe      	b.n	8001de0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d10a      	bne.n	8001dfe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8001de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dec:	f383 8811 	msr	BASEPRI, r3
 8001df0:	f3bf 8f6f 	isb	sy
 8001df4:	f3bf 8f4f 	dsb	sy
 8001df8:	60fb      	str	r3, [r7, #12]
}
 8001dfa:	bf00      	nop
 8001dfc:	e7fe      	b.n	8001dfc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8001dfe:	f000 fe79 	bl	8002af4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001e02:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <xTaskCheckForTimeOut+0xbc>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1a:	d102      	bne.n	8001e22 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	61fb      	str	r3, [r7, #28]
 8001e20:	e023      	b.n	8001e6a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <xTaskCheckForTimeOut+0xc0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d007      	beq.n	8001e3e <xTaskCheckForTimeOut+0x82>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d302      	bcc.n	8001e3e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	61fb      	str	r3, [r7, #28]
 8001e3c:	e015      	b.n	8001e6a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d20b      	bcs.n	8001e60 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	1ad2      	subs	r2, r2, r3
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff ff9b 	bl	8001d90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
 8001e5e:	e004      	b.n	8001e6a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8001e66:	2301      	movs	r3, #1
 8001e68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8001e6a:	f000 fe73 	bl	8002b54 <vPortExitCritical>

	return xReturn;
 8001e6e:	69fb      	ldr	r3, [r7, #28]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3720      	adds	r7, #32
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20000c3c 	.word	0x20000c3c
 8001e7c:	20000c50 	.word	0x20000c50

08001e80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001e84:	4b03      	ldr	r3, [pc, #12]	; (8001e94 <vTaskMissedYield+0x14>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	601a      	str	r2, [r3, #0]
}
 8001e8a:	bf00      	nop
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	20000c4c 	.word	0x20000c4c

08001e98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001ea0:	f000 f852 	bl	8001f48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <prvIdleTask+0x28>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d9f9      	bls.n	8001ea0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <prvIdleTask+0x2c>)
 8001eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	f3bf 8f4f 	dsb	sy
 8001eb8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001ebc:	e7f0      	b.n	8001ea0 <prvIdleTask+0x8>
 8001ebe:	bf00      	nop
 8001ec0:	20000768 	.word	0x20000768
 8001ec4:	e000ed04 	.word	0xe000ed04

08001ec8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001ece:	2300      	movs	r3, #0
 8001ed0:	607b      	str	r3, [r7, #4]
 8001ed2:	e00c      	b.n	8001eee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4a12      	ldr	r2, [pc, #72]	; (8001f28 <prvInitialiseTaskLists+0x60>)
 8001ee0:	4413      	add	r3, r2
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe fcf0 	bl	80008c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3301      	adds	r3, #1
 8001eec:	607b      	str	r3, [r7, #4]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b37      	cmp	r3, #55	; 0x37
 8001ef2:	d9ef      	bls.n	8001ed4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001ef4:	480d      	ldr	r0, [pc, #52]	; (8001f2c <prvInitialiseTaskLists+0x64>)
 8001ef6:	f7fe fce7 	bl	80008c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001efa:	480d      	ldr	r0, [pc, #52]	; (8001f30 <prvInitialiseTaskLists+0x68>)
 8001efc:	f7fe fce4 	bl	80008c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001f00:	480c      	ldr	r0, [pc, #48]	; (8001f34 <prvInitialiseTaskLists+0x6c>)
 8001f02:	f7fe fce1 	bl	80008c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001f06:	480c      	ldr	r0, [pc, #48]	; (8001f38 <prvInitialiseTaskLists+0x70>)
 8001f08:	f7fe fcde 	bl	80008c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001f0c:	480b      	ldr	r0, [pc, #44]	; (8001f3c <prvInitialiseTaskLists+0x74>)
 8001f0e:	f7fe fcdb 	bl	80008c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001f12:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <prvInitialiseTaskLists+0x78>)
 8001f14:	4a05      	ldr	r2, [pc, #20]	; (8001f2c <prvInitialiseTaskLists+0x64>)
 8001f16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001f18:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <prvInitialiseTaskLists+0x7c>)
 8001f1a:	4a05      	ldr	r2, [pc, #20]	; (8001f30 <prvInitialiseTaskLists+0x68>)
 8001f1c:	601a      	str	r2, [r3, #0]
}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000768 	.word	0x20000768
 8001f2c:	20000bc8 	.word	0x20000bc8
 8001f30:	20000bdc 	.word	0x20000bdc
 8001f34:	20000bf8 	.word	0x20000bf8
 8001f38:	20000c0c 	.word	0x20000c0c
 8001f3c:	20000c24 	.word	0x20000c24
 8001f40:	20000bf0 	.word	0x20000bf0
 8001f44:	20000bf4 	.word	0x20000bf4

08001f48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001f4e:	e019      	b.n	8001f84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001f50:	f000 fdd0 	bl	8002af4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f54:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <prvCheckTasksWaitingTermination+0x50>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3304      	adds	r3, #4
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe fd3b 	bl	80009dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001f66:	4b0d      	ldr	r3, [pc, #52]	; (8001f9c <prvCheckTasksWaitingTermination+0x54>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	4a0b      	ldr	r2, [pc, #44]	; (8001f9c <prvCheckTasksWaitingTermination+0x54>)
 8001f6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001f70:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <prvCheckTasksWaitingTermination+0x58>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	3b01      	subs	r3, #1
 8001f76:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <prvCheckTasksWaitingTermination+0x58>)
 8001f78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001f7a:	f000 fdeb 	bl	8002b54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f810 	bl	8001fa4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <prvCheckTasksWaitingTermination+0x58>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1e1      	bne.n	8001f50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001f8c:	bf00      	nop
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000c0c 	.word	0x20000c0c
 8001f9c:	20000c38 	.word	0x20000c38
 8001fa0:	20000c20 	.word	0x20000c20

08001fa4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d108      	bne.n	8001fc8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 ff88 	bl	8002ed0 <vPortFree>
				vPortFree( pxTCB );
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 ff85 	bl	8002ed0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001fc6:	e018      	b.n	8001ffa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d103      	bne.n	8001fda <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 ff7c 	bl	8002ed0 <vPortFree>
	}
 8001fd8:	e00f      	b.n	8001ffa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d00a      	beq.n	8001ffa <prvDeleteTCB+0x56>
	__asm volatile
 8001fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fe8:	f383 8811 	msr	BASEPRI, r3
 8001fec:	f3bf 8f6f 	isb	sy
 8001ff0:	f3bf 8f4f 	dsb	sy
 8001ff4:	60fb      	str	r3, [r7, #12]
}
 8001ff6:	bf00      	nop
 8001ff8:	e7fe      	b.n	8001ff8 <prvDeleteTCB+0x54>
	}
 8001ffa:	bf00      	nop
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800200a:	4b0c      	ldr	r3, [pc, #48]	; (800203c <prvResetNextTaskUnblockTime+0x38>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d104      	bne.n	800201e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002014:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <prvResetNextTaskUnblockTime+0x3c>)
 8002016:	f04f 32ff 	mov.w	r2, #4294967295
 800201a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800201c:	e008      	b.n	8002030 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800201e:	4b07      	ldr	r3, [pc, #28]	; (800203c <prvResetNextTaskUnblockTime+0x38>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	4a04      	ldr	r2, [pc, #16]	; (8002040 <prvResetNextTaskUnblockTime+0x3c>)
 800202e:	6013      	str	r3, [r2, #0]
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	20000bf0 	.word	0x20000bf0
 8002040:	20000c58 	.word	0x20000c58

08002044 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800204a:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <xTaskGetSchedulerState+0x34>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d102      	bne.n	8002058 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002052:	2301      	movs	r3, #1
 8002054:	607b      	str	r3, [r7, #4]
 8002056:	e008      	b.n	800206a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002058:	4b08      	ldr	r3, [pc, #32]	; (800207c <xTaskGetSchedulerState+0x38>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d102      	bne.n	8002066 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002060:	2302      	movs	r3, #2
 8002062:	607b      	str	r3, [r7, #4]
 8002064:	e001      	b.n	800206a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002066:	2300      	movs	r3, #0
 8002068:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800206a:	687b      	ldr	r3, [r7, #4]
	}
 800206c:	4618      	mov	r0, r3
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	20000c44 	.word	0x20000c44
 800207c:	20000c60 	.word	0x20000c60

08002080 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d056      	beq.n	8002144 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002096:	4b2e      	ldr	r3, [pc, #184]	; (8002150 <xTaskPriorityDisinherit+0xd0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	429a      	cmp	r2, r3
 800209e:	d00a      	beq.n	80020b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80020a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020a4:	f383 8811 	msr	BASEPRI, r3
 80020a8:	f3bf 8f6f 	isb	sy
 80020ac:	f3bf 8f4f 	dsb	sy
 80020b0:	60fb      	str	r3, [r7, #12]
}
 80020b2:	bf00      	nop
 80020b4:	e7fe      	b.n	80020b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10a      	bne.n	80020d4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80020be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c2:	f383 8811 	msr	BASEPRI, r3
 80020c6:	f3bf 8f6f 	isb	sy
 80020ca:	f3bf 8f4f 	dsb	sy
 80020ce:	60bb      	str	r3, [r7, #8]
}
 80020d0:	bf00      	nop
 80020d2:	e7fe      	b.n	80020d2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020d8:	1e5a      	subs	r2, r3, #1
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d02c      	beq.n	8002144 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d128      	bne.n	8002144 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	3304      	adds	r3, #4
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe fc70 	bl	80009dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002108:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002114:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <xTaskPriorityDisinherit+0xd4>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	429a      	cmp	r2, r3
 800211a:	d903      	bls.n	8002124 <xTaskPriorityDisinherit+0xa4>
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	4a0c      	ldr	r2, [pc, #48]	; (8002154 <xTaskPriorityDisinherit+0xd4>)
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4a09      	ldr	r2, [pc, #36]	; (8002158 <xTaskPriorityDisinherit+0xd8>)
 8002132:	441a      	add	r2, r3
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	3304      	adds	r3, #4
 8002138:	4619      	mov	r1, r3
 800213a:	4610      	mov	r0, r2
 800213c:	f7fe fbf1 	bl	8000922 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002140:	2301      	movs	r3, #1
 8002142:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002144:	697b      	ldr	r3, [r7, #20]
	}
 8002146:	4618      	mov	r0, r3
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000764 	.word	0x20000764
 8002154:	20000c40 	.word	0x20000c40
 8002158:	20000768 	.word	0x20000768

0800215c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002166:	4b21      	ldr	r3, [pc, #132]	; (80021ec <prvAddCurrentTaskToDelayedList+0x90>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800216c:	4b20      	ldr	r3, [pc, #128]	; (80021f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	3304      	adds	r3, #4
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe fc32 	bl	80009dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217e:	d10a      	bne.n	8002196 <prvAddCurrentTaskToDelayedList+0x3a>
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d007      	beq.n	8002196 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002186:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	3304      	adds	r3, #4
 800218c:	4619      	mov	r1, r3
 800218e:	4819      	ldr	r0, [pc, #100]	; (80021f4 <prvAddCurrentTaskToDelayedList+0x98>)
 8002190:	f7fe fbc7 	bl	8000922 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002194:	e026      	b.n	80021e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4413      	add	r3, r2
 800219c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800219e:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d209      	bcs.n	80021c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021ae:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	3304      	adds	r3, #4
 80021b8:	4619      	mov	r1, r3
 80021ba:	4610      	mov	r0, r2
 80021bc:	f7fe fbd5 	bl	800096a <vListInsert>
}
 80021c0:	e010      	b.n	80021e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021c2:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	3304      	adds	r3, #4
 80021cc:	4619      	mov	r1, r3
 80021ce:	4610      	mov	r0, r2
 80021d0:	f7fe fbcb 	bl	800096a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80021d4:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <prvAddCurrentTaskToDelayedList+0xa4>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68ba      	ldr	r2, [r7, #8]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d202      	bcs.n	80021e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80021de:	4a08      	ldr	r2, [pc, #32]	; (8002200 <prvAddCurrentTaskToDelayedList+0xa4>)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	6013      	str	r3, [r2, #0]
}
 80021e4:	bf00      	nop
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000c3c 	.word	0x20000c3c
 80021f0:	20000764 	.word	0x20000764
 80021f4:	20000c24 	.word	0x20000c24
 80021f8:	20000bf4 	.word	0x20000bf4
 80021fc:	20000bf0 	.word	0x20000bf0
 8002200:	20000c58 	.word	0x20000c58

08002204 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08a      	sub	sp, #40	; 0x28
 8002208:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800220e:	f000 fb07 	bl	8002820 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002212:	4b1c      	ldr	r3, [pc, #112]	; (8002284 <xTimerCreateTimerTask+0x80>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d021      	beq.n	800225e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800221e:	2300      	movs	r3, #0
 8002220:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002222:	1d3a      	adds	r2, r7, #4
 8002224:	f107 0108 	add.w	r1, r7, #8
 8002228:	f107 030c 	add.w	r3, r7, #12
 800222c:	4618      	mov	r0, r3
 800222e:	f7fe fb31 	bl	8000894 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	9202      	str	r2, [sp, #8]
 800223a:	9301      	str	r3, [sp, #4]
 800223c:	2302      	movs	r3, #2
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	2300      	movs	r3, #0
 8002242:	460a      	mov	r2, r1
 8002244:	4910      	ldr	r1, [pc, #64]	; (8002288 <xTimerCreateTimerTask+0x84>)
 8002246:	4811      	ldr	r0, [pc, #68]	; (800228c <xTimerCreateTimerTask+0x88>)
 8002248:	f7ff f8de 	bl	8001408 <xTaskCreateStatic>
 800224c:	4603      	mov	r3, r0
 800224e:	4a10      	ldr	r2, [pc, #64]	; (8002290 <xTimerCreateTimerTask+0x8c>)
 8002250:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8002252:	4b0f      	ldr	r3, [pc, #60]	; (8002290 <xTimerCreateTimerTask+0x8c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800225a:	2301      	movs	r3, #1
 800225c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10a      	bne.n	800227a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8002264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002268:	f383 8811 	msr	BASEPRI, r3
 800226c:	f3bf 8f6f 	isb	sy
 8002270:	f3bf 8f4f 	dsb	sy
 8002274:	613b      	str	r3, [r7, #16]
}
 8002276:	bf00      	nop
 8002278:	e7fe      	b.n	8002278 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800227a:	697b      	ldr	r3, [r7, #20]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000c94 	.word	0x20000c94
 8002288:	080031e0 	.word	0x080031e0
 800228c:	080023c9 	.word	0x080023c9
 8002290:	20000c98 	.word	0x20000c98

08002294 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	; 0x28
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
 80022a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10a      	bne.n	80022c2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80022ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b0:	f383 8811 	msr	BASEPRI, r3
 80022b4:	f3bf 8f6f 	isb	sy
 80022b8:	f3bf 8f4f 	dsb	sy
 80022bc:	623b      	str	r3, [r7, #32]
}
 80022be:	bf00      	nop
 80022c0:	e7fe      	b.n	80022c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80022c2:	4b1a      	ldr	r3, [pc, #104]	; (800232c <xTimerGenericCommand+0x98>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d02a      	beq.n	8002320 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2b05      	cmp	r3, #5
 80022da:	dc18      	bgt.n	800230e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80022dc:	f7ff feb2 	bl	8002044 <xTaskGetSchedulerState>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d109      	bne.n	80022fa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80022e6:	4b11      	ldr	r3, [pc, #68]	; (800232c <xTimerGenericCommand+0x98>)
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	f107 0110 	add.w	r1, r7, #16
 80022ee:	2300      	movs	r3, #0
 80022f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022f2:	f7fe fca1 	bl	8000c38 <xQueueGenericSend>
 80022f6:	6278      	str	r0, [r7, #36]	; 0x24
 80022f8:	e012      	b.n	8002320 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80022fa:	4b0c      	ldr	r3, [pc, #48]	; (800232c <xTimerGenericCommand+0x98>)
 80022fc:	6818      	ldr	r0, [r3, #0]
 80022fe:	f107 0110 	add.w	r1, r7, #16
 8002302:	2300      	movs	r3, #0
 8002304:	2200      	movs	r2, #0
 8002306:	f7fe fc97 	bl	8000c38 <xQueueGenericSend>
 800230a:	6278      	str	r0, [r7, #36]	; 0x24
 800230c:	e008      	b.n	8002320 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800230e:	4b07      	ldr	r3, [pc, #28]	; (800232c <xTimerGenericCommand+0x98>)
 8002310:	6818      	ldr	r0, [r3, #0]
 8002312:	f107 0110 	add.w	r1, r7, #16
 8002316:	2300      	movs	r3, #0
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	f7fe fd8b 	bl	8000e34 <xQueueGenericSendFromISR>
 800231e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002322:	4618      	mov	r0, r3
 8002324:	3728      	adds	r7, #40	; 0x28
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000c94 	.word	0x20000c94

08002330 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af02      	add	r7, sp, #8
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800233a:	4b22      	ldr	r3, [pc, #136]	; (80023c4 <prvProcessExpiredTimer+0x94>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	3304      	adds	r3, #4
 8002348:	4618      	mov	r0, r3
 800234a:	f7fe fb47 	bl	80009dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d022      	beq.n	80023a2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	699a      	ldr	r2, [r3, #24]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	18d1      	adds	r1, r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	6978      	ldr	r0, [r7, #20]
 800236a:	f000 f8d1 	bl	8002510 <prvInsertTimerInActiveList>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d01f      	beq.n	80023b4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002374:	2300      	movs	r3, #0
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	2300      	movs	r3, #0
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	2100      	movs	r1, #0
 800237e:	6978      	ldr	r0, [r7, #20]
 8002380:	f7ff ff88 	bl	8002294 <xTimerGenericCommand>
 8002384:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d113      	bne.n	80023b4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800238c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002390:	f383 8811 	msr	BASEPRI, r3
 8002394:	f3bf 8f6f 	isb	sy
 8002398:	f3bf 8f4f 	dsb	sy
 800239c:	60fb      	str	r3, [r7, #12]
}
 800239e:	bf00      	nop
 80023a0:	e7fe      	b.n	80023a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80023a8:	f023 0301 	bic.w	r3, r3, #1
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	6978      	ldr	r0, [r7, #20]
 80023ba:	4798      	blx	r3
}
 80023bc:	bf00      	nop
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20000c8c 	.word	0x20000c8c

080023c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80023d0:	f107 0308 	add.w	r3, r7, #8
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 f857 	bl	8002488 <prvGetNextExpireTime>
 80023da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	4619      	mov	r1, r3
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f000 f803 	bl	80023ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80023e6:	f000 f8d5 	bl	8002594 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80023ea:	e7f1      	b.n	80023d0 <prvTimerTask+0x8>

080023ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80023f6:	f7ff fa43 	bl	8001880 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80023fa:	f107 0308 	add.w	r3, r7, #8
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 f866 	bl	80024d0 <prvSampleTimeNow>
 8002404:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d130      	bne.n	800246e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10a      	bne.n	8002428 <prvProcessTimerOrBlockTask+0x3c>
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	429a      	cmp	r2, r3
 8002418:	d806      	bhi.n	8002428 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800241a:	f7ff fa3f 	bl	800189c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800241e:	68f9      	ldr	r1, [r7, #12]
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff ff85 	bl	8002330 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002426:	e024      	b.n	8002472 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d008      	beq.n	8002440 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800242e:	4b13      	ldr	r3, [pc, #76]	; (800247c <prvProcessTimerOrBlockTask+0x90>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <prvProcessTimerOrBlockTask+0x50>
 8002438:	2301      	movs	r3, #1
 800243a:	e000      	b.n	800243e <prvProcessTimerOrBlockTask+0x52>
 800243c:	2300      	movs	r3, #0
 800243e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002440:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <prvProcessTimerOrBlockTask+0x94>)
 8002442:	6818      	ldr	r0, [r3, #0]
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	4619      	mov	r1, r3
 800244e:	f7fe ffa7 	bl	80013a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002452:	f7ff fa23 	bl	800189c <xTaskResumeAll>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10a      	bne.n	8002472 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800245c:	4b09      	ldr	r3, [pc, #36]	; (8002484 <prvProcessTimerOrBlockTask+0x98>)
 800245e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	f3bf 8f4f 	dsb	sy
 8002468:	f3bf 8f6f 	isb	sy
}
 800246c:	e001      	b.n	8002472 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800246e:	f7ff fa15 	bl	800189c <xTaskResumeAll>
}
 8002472:	bf00      	nop
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000c90 	.word	0x20000c90
 8002480:	20000c94 	.word	0x20000c94
 8002484:	e000ed04 	.word	0xe000ed04

08002488 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002490:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <prvGetNextExpireTime+0x44>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <prvGetNextExpireTime+0x16>
 800249a:	2201      	movs	r2, #1
 800249c:	e000      	b.n	80024a0 <prvGetNextExpireTime+0x18>
 800249e:	2200      	movs	r2, #0
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d105      	bne.n	80024b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80024ac:	4b07      	ldr	r3, [pc, #28]	; (80024cc <prvGetNextExpireTime+0x44>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	e001      	b.n	80024bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80024bc:	68fb      	ldr	r3, [r7, #12]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	20000c8c 	.word	0x20000c8c

080024d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80024d8:	f7ff fa7e 	bl	80019d8 <xTaskGetTickCount>
 80024dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80024de:	4b0b      	ldr	r3, [pc, #44]	; (800250c <prvSampleTimeNow+0x3c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d205      	bcs.n	80024f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80024e8:	f000 f936 	bl	8002758 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	e002      	b.n	80024fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80024fa:	4a04      	ldr	r2, [pc, #16]	; (800250c <prvSampleTimeNow+0x3c>)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002500:	68fb      	ldr	r3, [r7, #12]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000c9c 	.word	0x20000c9c

08002510 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
 800251c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	429a      	cmp	r2, r3
 8002534:	d812      	bhi.n	800255c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	1ad2      	subs	r2, r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	429a      	cmp	r2, r3
 8002542:	d302      	bcc.n	800254a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002544:	2301      	movs	r3, #1
 8002546:	617b      	str	r3, [r7, #20]
 8002548:	e01b      	b.n	8002582 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800254a:	4b10      	ldr	r3, [pc, #64]	; (800258c <prvInsertTimerInActiveList+0x7c>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	3304      	adds	r3, #4
 8002552:	4619      	mov	r1, r3
 8002554:	4610      	mov	r0, r2
 8002556:	f7fe fa08 	bl	800096a <vListInsert>
 800255a:	e012      	b.n	8002582 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d206      	bcs.n	8002572 <prvInsertTimerInActiveList+0x62>
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d302      	bcc.n	8002572 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800256c:	2301      	movs	r3, #1
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	e007      	b.n	8002582 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002572:	4b07      	ldr	r3, [pc, #28]	; (8002590 <prvInsertTimerInActiveList+0x80>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	3304      	adds	r3, #4
 800257a:	4619      	mov	r1, r3
 800257c:	4610      	mov	r0, r2
 800257e:	f7fe f9f4 	bl	800096a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002582:	697b      	ldr	r3, [r7, #20]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3718      	adds	r7, #24
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20000c90 	.word	0x20000c90
 8002590:	20000c8c 	.word	0x20000c8c

08002594 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08e      	sub	sp, #56	; 0x38
 8002598:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800259a:	e0ca      	b.n	8002732 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	da18      	bge.n	80025d4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80025a2:	1d3b      	adds	r3, r7, #4
 80025a4:	3304      	adds	r3, #4
 80025a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80025a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10a      	bne.n	80025c4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80025ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b2:	f383 8811 	msr	BASEPRI, r3
 80025b6:	f3bf 8f6f 	isb	sy
 80025ba:	f3bf 8f4f 	dsb	sy
 80025be:	61fb      	str	r3, [r7, #28]
}
 80025c0:	bf00      	nop
 80025c2:	e7fe      	b.n	80025c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80025c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025ca:	6850      	ldr	r0, [r2, #4]
 80025cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025ce:	6892      	ldr	r2, [r2, #8]
 80025d0:	4611      	mov	r1, r2
 80025d2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f2c0 80aa 	blt.w	8002730 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80025e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d004      	beq.n	80025f2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80025e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ea:	3304      	adds	r3, #4
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fe f9f5 	bl	80009dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80025f2:	463b      	mov	r3, r7
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff ff6b 	bl	80024d0 <prvSampleTimeNow>
 80025fa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b09      	cmp	r3, #9
 8002600:	f200 8097 	bhi.w	8002732 <prvProcessReceivedCommands+0x19e>
 8002604:	a201      	add	r2, pc, #4	; (adr r2, 800260c <prvProcessReceivedCommands+0x78>)
 8002606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800260a:	bf00      	nop
 800260c:	08002635 	.word	0x08002635
 8002610:	08002635 	.word	0x08002635
 8002614:	08002635 	.word	0x08002635
 8002618:	080026a9 	.word	0x080026a9
 800261c:	080026bd 	.word	0x080026bd
 8002620:	08002707 	.word	0x08002707
 8002624:	08002635 	.word	0x08002635
 8002628:	08002635 	.word	0x08002635
 800262c:	080026a9 	.word	0x080026a9
 8002630:	080026bd 	.word	0x080026bd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002636:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	b2da      	uxtb	r2, r3
 8002640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002642:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	18d1      	adds	r1, r2, r3
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002654:	f7ff ff5c 	bl	8002510 <prvInsertTimerInActiveList>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d069      	beq.n	8002732 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800265e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002664:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002668:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d05e      	beq.n	8002732 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	441a      	add	r2, r3
 800267c:	2300      	movs	r3, #0
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	2300      	movs	r3, #0
 8002682:	2100      	movs	r1, #0
 8002684:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002686:	f7ff fe05 	bl	8002294 <xTimerGenericCommand>
 800268a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d14f      	bne.n	8002732 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8002692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002696:	f383 8811 	msr	BASEPRI, r3
 800269a:	f3bf 8f6f 	isb	sy
 800269e:	f3bf 8f4f 	dsb	sy
 80026a2:	61bb      	str	r3, [r7, #24]
}
 80026a4:	bf00      	nop
 80026a6:	e7fe      	b.n	80026a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80026a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026ae:	f023 0301 	bic.w	r3, r3, #1
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80026ba:	e03a      	b.n	8002732 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80026bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80026d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10a      	bne.n	80026f2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80026dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e0:	f383 8811 	msr	BASEPRI, r3
 80026e4:	f3bf 8f6f 	isb	sy
 80026e8:	f3bf 8f4f 	dsb	sy
 80026ec:	617b      	str	r3, [r7, #20]
}
 80026ee:	bf00      	nop
 80026f0:	e7fe      	b.n	80026f0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80026f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f4:	699a      	ldr	r2, [r3, #24]
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	18d1      	adds	r1, r2, r3
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002700:	f7ff ff06 	bl	8002510 <prvInsertTimerInActiveList>
					break;
 8002704:	e015      	b.n	8002732 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002708:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d103      	bne.n	800271c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8002714:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002716:	f000 fbdb 	bl	8002ed0 <vPortFree>
 800271a:	e00a      	b.n	8002732 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800271c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002722:	f023 0301 	bic.w	r3, r3, #1
 8002726:	b2da      	uxtb	r2, r3
 8002728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800272e:	e000      	b.n	8002732 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8002730:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002732:	4b08      	ldr	r3, [pc, #32]	; (8002754 <prvProcessReceivedCommands+0x1c0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	1d39      	adds	r1, r7, #4
 8002738:	2200      	movs	r2, #0
 800273a:	4618      	mov	r0, r3
 800273c:	f7fe fc16 	bl	8000f6c <xQueueReceive>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	f47f af2a 	bne.w	800259c <prvProcessReceivedCommands+0x8>
	}
}
 8002748:	bf00      	nop
 800274a:	bf00      	nop
 800274c:	3730      	adds	r7, #48	; 0x30
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20000c94 	.word	0x20000c94

08002758 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b088      	sub	sp, #32
 800275c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800275e:	e048      	b.n	80027f2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002760:	4b2d      	ldr	r3, [pc, #180]	; (8002818 <prvSwitchTimerLists+0xc0>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800276a:	4b2b      	ldr	r3, [pc, #172]	; (8002818 <prvSwitchTimerLists+0xc0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	3304      	adds	r3, #4
 8002778:	4618      	mov	r0, r3
 800277a:	f7fe f92f 	bl	80009dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	d02e      	beq.n	80027f2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	4413      	add	r3, r2
 800279c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d90e      	bls.n	80027c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80027b2:	4b19      	ldr	r3, [pc, #100]	; (8002818 <prvSwitchTimerLists+0xc0>)
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	3304      	adds	r3, #4
 80027ba:	4619      	mov	r1, r3
 80027bc:	4610      	mov	r0, r2
 80027be:	f7fe f8d4 	bl	800096a <vListInsert>
 80027c2:	e016      	b.n	80027f2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80027c4:	2300      	movs	r3, #0
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	2300      	movs	r3, #0
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	2100      	movs	r1, #0
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f7ff fd60 	bl	8002294 <xTimerGenericCommand>
 80027d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10a      	bne.n	80027f2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80027dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e0:	f383 8811 	msr	BASEPRI, r3
 80027e4:	f3bf 8f6f 	isb	sy
 80027e8:	f3bf 8f4f 	dsb	sy
 80027ec:	603b      	str	r3, [r7, #0]
}
 80027ee:	bf00      	nop
 80027f0:	e7fe      	b.n	80027f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80027f2:	4b09      	ldr	r3, [pc, #36]	; (8002818 <prvSwitchTimerLists+0xc0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1b1      	bne.n	8002760 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <prvSwitchTimerLists+0xc0>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8002802:	4b06      	ldr	r3, [pc, #24]	; (800281c <prvSwitchTimerLists+0xc4>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a04      	ldr	r2, [pc, #16]	; (8002818 <prvSwitchTimerLists+0xc0>)
 8002808:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800280a:	4a04      	ldr	r2, [pc, #16]	; (800281c <prvSwitchTimerLists+0xc4>)
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	6013      	str	r3, [r2, #0]
}
 8002810:	bf00      	nop
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	20000c8c 	.word	0x20000c8c
 800281c:	20000c90 	.word	0x20000c90

08002820 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002826:	f000 f965 	bl	8002af4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800282a:	4b15      	ldr	r3, [pc, #84]	; (8002880 <prvCheckForValidListAndQueue+0x60>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d120      	bne.n	8002874 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8002832:	4814      	ldr	r0, [pc, #80]	; (8002884 <prvCheckForValidListAndQueue+0x64>)
 8002834:	f7fe f848 	bl	80008c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002838:	4813      	ldr	r0, [pc, #76]	; (8002888 <prvCheckForValidListAndQueue+0x68>)
 800283a:	f7fe f845 	bl	80008c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800283e:	4b13      	ldr	r3, [pc, #76]	; (800288c <prvCheckForValidListAndQueue+0x6c>)
 8002840:	4a10      	ldr	r2, [pc, #64]	; (8002884 <prvCheckForValidListAndQueue+0x64>)
 8002842:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002844:	4b12      	ldr	r3, [pc, #72]	; (8002890 <prvCheckForValidListAndQueue+0x70>)
 8002846:	4a10      	ldr	r2, [pc, #64]	; (8002888 <prvCheckForValidListAndQueue+0x68>)
 8002848:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800284a:	2300      	movs	r3, #0
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	4b11      	ldr	r3, [pc, #68]	; (8002894 <prvCheckForValidListAndQueue+0x74>)
 8002850:	4a11      	ldr	r2, [pc, #68]	; (8002898 <prvCheckForValidListAndQueue+0x78>)
 8002852:	2110      	movs	r1, #16
 8002854:	200a      	movs	r0, #10
 8002856:	f7fe f953 	bl	8000b00 <xQueueGenericCreateStatic>
 800285a:	4603      	mov	r3, r0
 800285c:	4a08      	ldr	r2, [pc, #32]	; (8002880 <prvCheckForValidListAndQueue+0x60>)
 800285e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002860:	4b07      	ldr	r3, [pc, #28]	; (8002880 <prvCheckForValidListAndQueue+0x60>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002868:	4b05      	ldr	r3, [pc, #20]	; (8002880 <prvCheckForValidListAndQueue+0x60>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	490b      	ldr	r1, [pc, #44]	; (800289c <prvCheckForValidListAndQueue+0x7c>)
 800286e:	4618      	mov	r0, r3
 8002870:	f7fe fd6c 	bl	800134c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002874:	f000 f96e 	bl	8002b54 <vPortExitCritical>
}
 8002878:	bf00      	nop
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000c94 	.word	0x20000c94
 8002884:	20000c64 	.word	0x20000c64
 8002888:	20000c78 	.word	0x20000c78
 800288c:	20000c8c 	.word	0x20000c8c
 8002890:	20000c90 	.word	0x20000c90
 8002894:	20000d40 	.word	0x20000d40
 8002898:	20000ca0 	.word	0x20000ca0
 800289c:	080031e8 	.word	0x080031e8

080028a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	3b04      	subs	r3, #4
 80028b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	3b04      	subs	r3, #4
 80028be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	f023 0201 	bic.w	r2, r3, #1
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	3b04      	subs	r3, #4
 80028ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80028d0:	4a0c      	ldr	r2, [pc, #48]	; (8002904 <pxPortInitialiseStack+0x64>)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	3b14      	subs	r3, #20
 80028da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	3b04      	subs	r3, #4
 80028e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f06f 0202 	mvn.w	r2, #2
 80028ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	3b20      	subs	r3, #32
 80028f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80028f6:	68fb      	ldr	r3, [r7, #12]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3714      	adds	r7, #20
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	08002909 	.word	0x08002909

08002908 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800290e:	2300      	movs	r3, #0
 8002910:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002912:	4b12      	ldr	r3, [pc, #72]	; (800295c <prvTaskExitError+0x54>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291a:	d00a      	beq.n	8002932 <prvTaskExitError+0x2a>
	__asm volatile
 800291c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002920:	f383 8811 	msr	BASEPRI, r3
 8002924:	f3bf 8f6f 	isb	sy
 8002928:	f3bf 8f4f 	dsb	sy
 800292c:	60fb      	str	r3, [r7, #12]
}
 800292e:	bf00      	nop
 8002930:	e7fe      	b.n	8002930 <prvTaskExitError+0x28>
	__asm volatile
 8002932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002936:	f383 8811 	msr	BASEPRI, r3
 800293a:	f3bf 8f6f 	isb	sy
 800293e:	f3bf 8f4f 	dsb	sy
 8002942:	60bb      	str	r3, [r7, #8]
}
 8002944:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002946:	bf00      	nop
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0fc      	beq.n	8002948 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800294e:	bf00      	nop
 8002950:	bf00      	nop
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	20000004 	.word	0x20000004

08002960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002960:	4b07      	ldr	r3, [pc, #28]	; (8002980 <pxCurrentTCBConst2>)
 8002962:	6819      	ldr	r1, [r3, #0]
 8002964:	6808      	ldr	r0, [r1, #0]
 8002966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800296a:	f380 8809 	msr	PSP, r0
 800296e:	f3bf 8f6f 	isb	sy
 8002972:	f04f 0000 	mov.w	r0, #0
 8002976:	f380 8811 	msr	BASEPRI, r0
 800297a:	4770      	bx	lr
 800297c:	f3af 8000 	nop.w

08002980 <pxCurrentTCBConst2>:
 8002980:	20000764 	.word	0x20000764
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002984:	bf00      	nop
 8002986:	bf00      	nop

08002988 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002988:	4808      	ldr	r0, [pc, #32]	; (80029ac <prvPortStartFirstTask+0x24>)
 800298a:	6800      	ldr	r0, [r0, #0]
 800298c:	6800      	ldr	r0, [r0, #0]
 800298e:	f380 8808 	msr	MSP, r0
 8002992:	f04f 0000 	mov.w	r0, #0
 8002996:	f380 8814 	msr	CONTROL, r0
 800299a:	b662      	cpsie	i
 800299c:	b661      	cpsie	f
 800299e:	f3bf 8f4f 	dsb	sy
 80029a2:	f3bf 8f6f 	isb	sy
 80029a6:	df00      	svc	0
 80029a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80029aa:	bf00      	nop
 80029ac:	e000ed08 	.word	0xe000ed08

080029b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80029b6:	4b46      	ldr	r3, [pc, #280]	; (8002ad0 <xPortStartScheduler+0x120>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a46      	ldr	r2, [pc, #280]	; (8002ad4 <xPortStartScheduler+0x124>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d10a      	bne.n	80029d6 <xPortStartScheduler+0x26>
	__asm volatile
 80029c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c4:	f383 8811 	msr	BASEPRI, r3
 80029c8:	f3bf 8f6f 	isb	sy
 80029cc:	f3bf 8f4f 	dsb	sy
 80029d0:	613b      	str	r3, [r7, #16]
}
 80029d2:	bf00      	nop
 80029d4:	e7fe      	b.n	80029d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80029d6:	4b3e      	ldr	r3, [pc, #248]	; (8002ad0 <xPortStartScheduler+0x120>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a3f      	ldr	r2, [pc, #252]	; (8002ad8 <xPortStartScheduler+0x128>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d10a      	bne.n	80029f6 <xPortStartScheduler+0x46>
	__asm volatile
 80029e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e4:	f383 8811 	msr	BASEPRI, r3
 80029e8:	f3bf 8f6f 	isb	sy
 80029ec:	f3bf 8f4f 	dsb	sy
 80029f0:	60fb      	str	r3, [r7, #12]
}
 80029f2:	bf00      	nop
 80029f4:	e7fe      	b.n	80029f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80029f6:	4b39      	ldr	r3, [pc, #228]	; (8002adc <xPortStartScheduler+0x12c>)
 80029f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	22ff      	movs	r2, #255	; 0xff
 8002a06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002a10:	78fb      	ldrb	r3, [r7, #3]
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	4b31      	ldr	r3, [pc, #196]	; (8002ae0 <xPortStartScheduler+0x130>)
 8002a1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002a1e:	4b31      	ldr	r3, [pc, #196]	; (8002ae4 <xPortStartScheduler+0x134>)
 8002a20:	2207      	movs	r2, #7
 8002a22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a24:	e009      	b.n	8002a3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002a26:	4b2f      	ldr	r3, [pc, #188]	; (8002ae4 <xPortStartScheduler+0x134>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	4a2d      	ldr	r2, [pc, #180]	; (8002ae4 <xPortStartScheduler+0x134>)
 8002a2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002a30:	78fb      	ldrb	r3, [r7, #3]
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a3a:	78fb      	ldrb	r3, [r7, #3]
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a42:	2b80      	cmp	r3, #128	; 0x80
 8002a44:	d0ef      	beq.n	8002a26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002a46:	4b27      	ldr	r3, [pc, #156]	; (8002ae4 <xPortStartScheduler+0x134>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f1c3 0307 	rsb	r3, r3, #7
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d00a      	beq.n	8002a68 <xPortStartScheduler+0xb8>
	__asm volatile
 8002a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a56:	f383 8811 	msr	BASEPRI, r3
 8002a5a:	f3bf 8f6f 	isb	sy
 8002a5e:	f3bf 8f4f 	dsb	sy
 8002a62:	60bb      	str	r3, [r7, #8]
}
 8002a64:	bf00      	nop
 8002a66:	e7fe      	b.n	8002a66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002a68:	4b1e      	ldr	r3, [pc, #120]	; (8002ae4 <xPortStartScheduler+0x134>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	021b      	lsls	r3, r3, #8
 8002a6e:	4a1d      	ldr	r2, [pc, #116]	; (8002ae4 <xPortStartScheduler+0x134>)
 8002a70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002a72:	4b1c      	ldr	r3, [pc, #112]	; (8002ae4 <xPortStartScheduler+0x134>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a7a:	4a1a      	ldr	r2, [pc, #104]	; (8002ae4 <xPortStartScheduler+0x134>)
 8002a7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002a86:	4b18      	ldr	r3, [pc, #96]	; (8002ae8 <xPortStartScheduler+0x138>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a17      	ldr	r2, [pc, #92]	; (8002ae8 <xPortStartScheduler+0x138>)
 8002a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002a92:	4b15      	ldr	r3, [pc, #84]	; (8002ae8 <xPortStartScheduler+0x138>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a14      	ldr	r2, [pc, #80]	; (8002ae8 <xPortStartScheduler+0x138>)
 8002a98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002a9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002a9e:	f000 f8dd 	bl	8002c5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002aa2:	4b12      	ldr	r3, [pc, #72]	; (8002aec <xPortStartScheduler+0x13c>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002aa8:	f000 f8fc 	bl	8002ca4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002aac:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <xPortStartScheduler+0x140>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a0f      	ldr	r2, [pc, #60]	; (8002af0 <xPortStartScheduler+0x140>)
 8002ab2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002ab6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002ab8:	f7ff ff66 	bl	8002988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002abc:	f7ff f856 	bl	8001b6c <vTaskSwitchContext>
	prvTaskExitError();
 8002ac0:	f7ff ff22 	bl	8002908 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	e000ed00 	.word	0xe000ed00
 8002ad4:	410fc271 	.word	0x410fc271
 8002ad8:	410fc270 	.word	0x410fc270
 8002adc:	e000e400 	.word	0xe000e400
 8002ae0:	20000d90 	.word	0x20000d90
 8002ae4:	20000d94 	.word	0x20000d94
 8002ae8:	e000ed20 	.word	0xe000ed20
 8002aec:	20000004 	.word	0x20000004
 8002af0:	e000ef34 	.word	0xe000ef34

08002af4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
	__asm volatile
 8002afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afe:	f383 8811 	msr	BASEPRI, r3
 8002b02:	f3bf 8f6f 	isb	sy
 8002b06:	f3bf 8f4f 	dsb	sy
 8002b0a:	607b      	str	r3, [r7, #4]
}
 8002b0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002b0e:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <vPortEnterCritical+0x58>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	3301      	adds	r3, #1
 8002b14:	4a0d      	ldr	r2, [pc, #52]	; (8002b4c <vPortEnterCritical+0x58>)
 8002b16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002b18:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <vPortEnterCritical+0x58>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d10f      	bne.n	8002b40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002b20:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <vPortEnterCritical+0x5c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00a      	beq.n	8002b40 <vPortEnterCritical+0x4c>
	__asm volatile
 8002b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2e:	f383 8811 	msr	BASEPRI, r3
 8002b32:	f3bf 8f6f 	isb	sy
 8002b36:	f3bf 8f4f 	dsb	sy
 8002b3a:	603b      	str	r3, [r7, #0]
}
 8002b3c:	bf00      	nop
 8002b3e:	e7fe      	b.n	8002b3e <vPortEnterCritical+0x4a>
	}
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	20000004 	.word	0x20000004
 8002b50:	e000ed04 	.word	0xe000ed04

08002b54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002b5a:	4b12      	ldr	r3, [pc, #72]	; (8002ba4 <vPortExitCritical+0x50>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10a      	bne.n	8002b78 <vPortExitCritical+0x24>
	__asm volatile
 8002b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b66:	f383 8811 	msr	BASEPRI, r3
 8002b6a:	f3bf 8f6f 	isb	sy
 8002b6e:	f3bf 8f4f 	dsb	sy
 8002b72:	607b      	str	r3, [r7, #4]
}
 8002b74:	bf00      	nop
 8002b76:	e7fe      	b.n	8002b76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002b78:	4b0a      	ldr	r3, [pc, #40]	; (8002ba4 <vPortExitCritical+0x50>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	4a09      	ldr	r2, [pc, #36]	; (8002ba4 <vPortExitCritical+0x50>)
 8002b80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002b82:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <vPortExitCritical+0x50>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d105      	bne.n	8002b96 <vPortExitCritical+0x42>
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	f383 8811 	msr	BASEPRI, r3
}
 8002b94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	20000004 	.word	0x20000004
	...

08002bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002bb0:	f3ef 8009 	mrs	r0, PSP
 8002bb4:	f3bf 8f6f 	isb	sy
 8002bb8:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <pxCurrentTCBConst>)
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	f01e 0f10 	tst.w	lr, #16
 8002bc0:	bf08      	it	eq
 8002bc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002bc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bca:	6010      	str	r0, [r2, #0]
 8002bcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002bd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002bd4:	f380 8811 	msr	BASEPRI, r0
 8002bd8:	f3bf 8f4f 	dsb	sy
 8002bdc:	f3bf 8f6f 	isb	sy
 8002be0:	f7fe ffc4 	bl	8001b6c <vTaskSwitchContext>
 8002be4:	f04f 0000 	mov.w	r0, #0
 8002be8:	f380 8811 	msr	BASEPRI, r0
 8002bec:	bc09      	pop	{r0, r3}
 8002bee:	6819      	ldr	r1, [r3, #0]
 8002bf0:	6808      	ldr	r0, [r1, #0]
 8002bf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bf6:	f01e 0f10 	tst.w	lr, #16
 8002bfa:	bf08      	it	eq
 8002bfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002c00:	f380 8809 	msr	PSP, r0
 8002c04:	f3bf 8f6f 	isb	sy
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	f3af 8000 	nop.w

08002c10 <pxCurrentTCBConst>:
 8002c10:	20000764 	.word	0x20000764
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002c14:	bf00      	nop
 8002c16:	bf00      	nop

08002c18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
	__asm volatile
 8002c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c22:	f383 8811 	msr	BASEPRI, r3
 8002c26:	f3bf 8f6f 	isb	sy
 8002c2a:	f3bf 8f4f 	dsb	sy
 8002c2e:	607b      	str	r3, [r7, #4]
}
 8002c30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002c32:	f7fe fee1 	bl	80019f8 <xTaskIncrementTick>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002c3c:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <xPortSysTickHandler+0x40>)
 8002c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	2300      	movs	r3, #0
 8002c46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	f383 8811 	msr	BASEPRI, r3
}
 8002c4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002c50:	bf00      	nop
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	e000ed04 	.word	0xe000ed04

08002c5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002c60:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <vPortSetupTimerInterrupt+0x34>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002c66:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <vPortSetupTimerInterrupt+0x38>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002c6c:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <vPortSetupTimerInterrupt+0x3c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a0a      	ldr	r2, [pc, #40]	; (8002c9c <vPortSetupTimerInterrupt+0x40>)
 8002c72:	fba2 2303 	umull	r2, r3, r2, r3
 8002c76:	099b      	lsrs	r3, r3, #6
 8002c78:	4a09      	ldr	r2, [pc, #36]	; (8002ca0 <vPortSetupTimerInterrupt+0x44>)
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002c7e:	4b04      	ldr	r3, [pc, #16]	; (8002c90 <vPortSetupTimerInterrupt+0x34>)
 8002c80:	2207      	movs	r2, #7
 8002c82:	601a      	str	r2, [r3, #0]
}
 8002c84:	bf00      	nop
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	e000e010 	.word	0xe000e010
 8002c94:	e000e018 	.word	0xe000e018
 8002c98:	20000000 	.word	0x20000000
 8002c9c:	10624dd3 	.word	0x10624dd3
 8002ca0:	e000e014 	.word	0xe000e014

08002ca4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002ca4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002cb4 <vPortEnableVFP+0x10>
 8002ca8:	6801      	ldr	r1, [r0, #0]
 8002caa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002cae:	6001      	str	r1, [r0, #0]
 8002cb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002cb2:	bf00      	nop
 8002cb4:	e000ed88 	.word	0xe000ed88

08002cb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002cbe:	f3ef 8305 	mrs	r3, IPSR
 8002cc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2b0f      	cmp	r3, #15
 8002cc8:	d914      	bls.n	8002cf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002cca:	4a17      	ldr	r2, [pc, #92]	; (8002d28 <vPortValidateInterruptPriority+0x70>)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4413      	add	r3, r2
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002cd4:	4b15      	ldr	r3, [pc, #84]	; (8002d2c <vPortValidateInterruptPriority+0x74>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	7afa      	ldrb	r2, [r7, #11]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d20a      	bcs.n	8002cf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8002cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce2:	f383 8811 	msr	BASEPRI, r3
 8002ce6:	f3bf 8f6f 	isb	sy
 8002cea:	f3bf 8f4f 	dsb	sy
 8002cee:	607b      	str	r3, [r7, #4]
}
 8002cf0:	bf00      	nop
 8002cf2:	e7fe      	b.n	8002cf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002cf4:	4b0e      	ldr	r3, [pc, #56]	; (8002d30 <vPortValidateInterruptPriority+0x78>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002cfc:	4b0d      	ldr	r3, [pc, #52]	; (8002d34 <vPortValidateInterruptPriority+0x7c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d90a      	bls.n	8002d1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8002d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d08:	f383 8811 	msr	BASEPRI, r3
 8002d0c:	f3bf 8f6f 	isb	sy
 8002d10:	f3bf 8f4f 	dsb	sy
 8002d14:	603b      	str	r3, [r7, #0]
}
 8002d16:	bf00      	nop
 8002d18:	e7fe      	b.n	8002d18 <vPortValidateInterruptPriority+0x60>
	}
 8002d1a:	bf00      	nop
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	e000e3f0 	.word	0xe000e3f0
 8002d2c:	20000d90 	.word	0x20000d90
 8002d30:	e000ed0c 	.word	0xe000ed0c
 8002d34:	20000d94 	.word	0x20000d94

08002d38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08a      	sub	sp, #40	; 0x28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002d44:	f7fe fd9c 	bl	8001880 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002d48:	4b5b      	ldr	r3, [pc, #364]	; (8002eb8 <pvPortMalloc+0x180>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002d50:	f000 f920 	bl	8002f94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002d54:	4b59      	ldr	r3, [pc, #356]	; (8002ebc <pvPortMalloc+0x184>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f040 8093 	bne.w	8002e88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d01d      	beq.n	8002da4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002d68:	2208      	movs	r2, #8
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d014      	beq.n	8002da4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f023 0307 	bic.w	r3, r3, #7
 8002d80:	3308      	adds	r3, #8
 8002d82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00a      	beq.n	8002da4 <pvPortMalloc+0x6c>
	__asm volatile
 8002d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d92:	f383 8811 	msr	BASEPRI, r3
 8002d96:	f3bf 8f6f 	isb	sy
 8002d9a:	f3bf 8f4f 	dsb	sy
 8002d9e:	617b      	str	r3, [r7, #20]
}
 8002da0:	bf00      	nop
 8002da2:	e7fe      	b.n	8002da2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d06e      	beq.n	8002e88 <pvPortMalloc+0x150>
 8002daa:	4b45      	ldr	r3, [pc, #276]	; (8002ec0 <pvPortMalloc+0x188>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d869      	bhi.n	8002e88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002db4:	4b43      	ldr	r3, [pc, #268]	; (8002ec4 <pvPortMalloc+0x18c>)
 8002db6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002db8:	4b42      	ldr	r3, [pc, #264]	; (8002ec4 <pvPortMalloc+0x18c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002dbe:	e004      	b.n	8002dca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d903      	bls.n	8002ddc <pvPortMalloc+0xa4>
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1f1      	bne.n	8002dc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002ddc:	4b36      	ldr	r3, [pc, #216]	; (8002eb8 <pvPortMalloc+0x180>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d050      	beq.n	8002e88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2208      	movs	r2, #8
 8002dec:	4413      	add	r3, r2
 8002dee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	1ad2      	subs	r2, r2, r3
 8002e00:	2308      	movs	r3, #8
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d91f      	bls.n	8002e48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00a      	beq.n	8002e30 <pvPortMalloc+0xf8>
	__asm volatile
 8002e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1e:	f383 8811 	msr	BASEPRI, r3
 8002e22:	f3bf 8f6f 	isb	sy
 8002e26:	f3bf 8f4f 	dsb	sy
 8002e2a:	613b      	str	r3, [r7, #16]
}
 8002e2c:	bf00      	nop
 8002e2e:	e7fe      	b.n	8002e2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	1ad2      	subs	r2, r2, r3
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002e42:	69b8      	ldr	r0, [r7, #24]
 8002e44:	f000 f908 	bl	8003058 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002e48:	4b1d      	ldr	r3, [pc, #116]	; (8002ec0 <pvPortMalloc+0x188>)
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	4a1b      	ldr	r2, [pc, #108]	; (8002ec0 <pvPortMalloc+0x188>)
 8002e54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002e56:	4b1a      	ldr	r3, [pc, #104]	; (8002ec0 <pvPortMalloc+0x188>)
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	4b1b      	ldr	r3, [pc, #108]	; (8002ec8 <pvPortMalloc+0x190>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d203      	bcs.n	8002e6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002e62:	4b17      	ldr	r3, [pc, #92]	; (8002ec0 <pvPortMalloc+0x188>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a18      	ldr	r2, [pc, #96]	; (8002ec8 <pvPortMalloc+0x190>)
 8002e68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	4b13      	ldr	r3, [pc, #76]	; (8002ebc <pvPortMalloc+0x184>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	431a      	orrs	r2, r3
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002e7e:	4b13      	ldr	r3, [pc, #76]	; (8002ecc <pvPortMalloc+0x194>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	3301      	adds	r3, #1
 8002e84:	4a11      	ldr	r2, [pc, #68]	; (8002ecc <pvPortMalloc+0x194>)
 8002e86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002e88:	f7fe fd08 	bl	800189c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00a      	beq.n	8002eac <pvPortMalloc+0x174>
	__asm volatile
 8002e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9a:	f383 8811 	msr	BASEPRI, r3
 8002e9e:	f3bf 8f6f 	isb	sy
 8002ea2:	f3bf 8f4f 	dsb	sy
 8002ea6:	60fb      	str	r3, [r7, #12]
}
 8002ea8:	bf00      	nop
 8002eaa:	e7fe      	b.n	8002eaa <pvPortMalloc+0x172>
	return pvReturn;
 8002eac:	69fb      	ldr	r3, [r7, #28]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3728      	adds	r7, #40	; 0x28
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	200049a0 	.word	0x200049a0
 8002ebc:	200049b4 	.word	0x200049b4
 8002ec0:	200049a4 	.word	0x200049a4
 8002ec4:	20004998 	.word	0x20004998
 8002ec8:	200049a8 	.word	0x200049a8
 8002ecc:	200049ac 	.word	0x200049ac

08002ed0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d04d      	beq.n	8002f7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002ee2:	2308      	movs	r3, #8
 8002ee4:	425b      	negs	r3, r3
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	4413      	add	r3, r2
 8002eea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	4b24      	ldr	r3, [pc, #144]	; (8002f88 <vPortFree+0xb8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10a      	bne.n	8002f14 <vPortFree+0x44>
	__asm volatile
 8002efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f02:	f383 8811 	msr	BASEPRI, r3
 8002f06:	f3bf 8f6f 	isb	sy
 8002f0a:	f3bf 8f4f 	dsb	sy
 8002f0e:	60fb      	str	r3, [r7, #12]
}
 8002f10:	bf00      	nop
 8002f12:	e7fe      	b.n	8002f12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00a      	beq.n	8002f32 <vPortFree+0x62>
	__asm volatile
 8002f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f20:	f383 8811 	msr	BASEPRI, r3
 8002f24:	f3bf 8f6f 	isb	sy
 8002f28:	f3bf 8f4f 	dsb	sy
 8002f2c:	60bb      	str	r3, [r7, #8]
}
 8002f2e:	bf00      	nop
 8002f30:	e7fe      	b.n	8002f30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	4b14      	ldr	r3, [pc, #80]	; (8002f88 <vPortFree+0xb8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d01e      	beq.n	8002f7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d11a      	bne.n	8002f7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	4b0e      	ldr	r3, [pc, #56]	; (8002f88 <vPortFree+0xb8>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	43db      	mvns	r3, r3
 8002f52:	401a      	ands	r2, r3
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002f58:	f7fe fc92 	bl	8001880 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <vPortFree+0xbc>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4413      	add	r3, r2
 8002f66:	4a09      	ldr	r2, [pc, #36]	; (8002f8c <vPortFree+0xbc>)
 8002f68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002f6a:	6938      	ldr	r0, [r7, #16]
 8002f6c:	f000 f874 	bl	8003058 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002f70:	4b07      	ldr	r3, [pc, #28]	; (8002f90 <vPortFree+0xc0>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	3301      	adds	r3, #1
 8002f76:	4a06      	ldr	r2, [pc, #24]	; (8002f90 <vPortFree+0xc0>)
 8002f78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002f7a:	f7fe fc8f 	bl	800189c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002f7e:	bf00      	nop
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	200049b4 	.word	0x200049b4
 8002f8c:	200049a4 	.word	0x200049a4
 8002f90:	200049b0 	.word	0x200049b0

08002f94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002f9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002f9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002fa0:	4b27      	ldr	r3, [pc, #156]	; (8003040 <prvHeapInit+0xac>)
 8002fa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00c      	beq.n	8002fc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	3307      	adds	r3, #7
 8002fb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f023 0307 	bic.w	r3, r3, #7
 8002fba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	4a1f      	ldr	r2, [pc, #124]	; (8003040 <prvHeapInit+0xac>)
 8002fc4:	4413      	add	r3, r2
 8002fc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002fcc:	4a1d      	ldr	r2, [pc, #116]	; (8003044 <prvHeapInit+0xb0>)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002fd2:	4b1c      	ldr	r3, [pc, #112]	; (8003044 <prvHeapInit+0xb0>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	4413      	add	r3, r2
 8002fde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002fe0:	2208      	movs	r2, #8
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	1a9b      	subs	r3, r3, r2
 8002fe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f023 0307 	bic.w	r3, r3, #7
 8002fee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4a15      	ldr	r2, [pc, #84]	; (8003048 <prvHeapInit+0xb4>)
 8002ff4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002ff6:	4b14      	ldr	r3, [pc, #80]	; (8003048 <prvHeapInit+0xb4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002ffe:	4b12      	ldr	r3, [pc, #72]	; (8003048 <prvHeapInit+0xb4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	1ad2      	subs	r2, r2, r3
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003014:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <prvHeapInit+0xb4>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	4a0a      	ldr	r2, [pc, #40]	; (800304c <prvHeapInit+0xb8>)
 8003022:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	4a09      	ldr	r2, [pc, #36]	; (8003050 <prvHeapInit+0xbc>)
 800302a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800302c:	4b09      	ldr	r3, [pc, #36]	; (8003054 <prvHeapInit+0xc0>)
 800302e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003032:	601a      	str	r2, [r3, #0]
}
 8003034:	bf00      	nop
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	20000d98 	.word	0x20000d98
 8003044:	20004998 	.word	0x20004998
 8003048:	200049a0 	.word	0x200049a0
 800304c:	200049a8 	.word	0x200049a8
 8003050:	200049a4 	.word	0x200049a4
 8003054:	200049b4 	.word	0x200049b4

08003058 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003060:	4b28      	ldr	r3, [pc, #160]	; (8003104 <prvInsertBlockIntoFreeList+0xac>)
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	e002      	b.n	800306c <prvInsertBlockIntoFreeList+0x14>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	429a      	cmp	r2, r3
 8003074:	d8f7      	bhi.n	8003066 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	4413      	add	r3, r2
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	429a      	cmp	r2, r3
 8003086:	d108      	bne.n	800309a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	441a      	add	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	441a      	add	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d118      	bne.n	80030e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	4b15      	ldr	r3, [pc, #84]	; (8003108 <prvInsertBlockIntoFreeList+0xb0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d00d      	beq.n	80030d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	441a      	add	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	e008      	b.n	80030e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80030d6:	4b0c      	ldr	r3, [pc, #48]	; (8003108 <prvInsertBlockIntoFreeList+0xb0>)
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	e003      	b.n	80030e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d002      	beq.n	80030f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030f6:	bf00      	nop
 80030f8:	3714      	adds	r7, #20
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	20004998 	.word	0x20004998
 8003108:	200049a0 	.word	0x200049a0

0800310c <__libc_init_array>:
 800310c:	b570      	push	{r4, r5, r6, lr}
 800310e:	4d0d      	ldr	r5, [pc, #52]	; (8003144 <__libc_init_array+0x38>)
 8003110:	4c0d      	ldr	r4, [pc, #52]	; (8003148 <__libc_init_array+0x3c>)
 8003112:	1b64      	subs	r4, r4, r5
 8003114:	10a4      	asrs	r4, r4, #2
 8003116:	2600      	movs	r6, #0
 8003118:	42a6      	cmp	r6, r4
 800311a:	d109      	bne.n	8003130 <__libc_init_array+0x24>
 800311c:	4d0b      	ldr	r5, [pc, #44]	; (800314c <__libc_init_array+0x40>)
 800311e:	4c0c      	ldr	r4, [pc, #48]	; (8003150 <__libc_init_array+0x44>)
 8003120:	f000 f82e 	bl	8003180 <_init>
 8003124:	1b64      	subs	r4, r4, r5
 8003126:	10a4      	asrs	r4, r4, #2
 8003128:	2600      	movs	r6, #0
 800312a:	42a6      	cmp	r6, r4
 800312c:	d105      	bne.n	800313a <__libc_init_array+0x2e>
 800312e:	bd70      	pop	{r4, r5, r6, pc}
 8003130:	f855 3b04 	ldr.w	r3, [r5], #4
 8003134:	4798      	blx	r3
 8003136:	3601      	adds	r6, #1
 8003138:	e7ee      	b.n	8003118 <__libc_init_array+0xc>
 800313a:	f855 3b04 	ldr.w	r3, [r5], #4
 800313e:	4798      	blx	r3
 8003140:	3601      	adds	r6, #1
 8003142:	e7f2      	b.n	800312a <__libc_init_array+0x1e>
 8003144:	080031f0 	.word	0x080031f0
 8003148:	080031f0 	.word	0x080031f0
 800314c:	080031f0 	.word	0x080031f0
 8003150:	080031f4 	.word	0x080031f4

08003154 <memcpy>:
 8003154:	440a      	add	r2, r1
 8003156:	4291      	cmp	r1, r2
 8003158:	f100 33ff 	add.w	r3, r0, #4294967295
 800315c:	d100      	bne.n	8003160 <memcpy+0xc>
 800315e:	4770      	bx	lr
 8003160:	b510      	push	{r4, lr}
 8003162:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003166:	f803 4f01 	strb.w	r4, [r3, #1]!
 800316a:	4291      	cmp	r1, r2
 800316c:	d1f9      	bne.n	8003162 <memcpy+0xe>
 800316e:	bd10      	pop	{r4, pc}

08003170 <memset>:
 8003170:	4402      	add	r2, r0
 8003172:	4603      	mov	r3, r0
 8003174:	4293      	cmp	r3, r2
 8003176:	d100      	bne.n	800317a <memset+0xa>
 8003178:	4770      	bx	lr
 800317a:	f803 1b01 	strb.w	r1, [r3], #1
 800317e:	e7f9      	b.n	8003174 <memset+0x4>

08003180 <_init>:
 8003180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003182:	bf00      	nop
 8003184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003186:	bc08      	pop	{r3}
 8003188:	469e      	mov	lr, r3
 800318a:	4770      	bx	lr

0800318c <_fini>:
 800318c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800318e:	bf00      	nop
 8003190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003192:	bc08      	pop	{r3}
 8003194:	469e      	mov	lr, r3
 8003196:	4770      	bx	lr
