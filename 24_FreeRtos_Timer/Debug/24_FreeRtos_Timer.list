
24_FreeRtos_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003974  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08003b04  08003b04  00013b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b9c  08003b9c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08003b9c  08003b9c  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b9c  08003b9c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b9c  08003b9c  00013b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ba0  08003ba0  00013ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003ba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          000049cc  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004a38  20004a38  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010c7d  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002457  00000000  00000000  00030d19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f40  00000000  00000000  00033170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e28  00000000  00000000  000340b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002a50  00000000  00000000  00034ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000108dd  00000000  00000000  00037928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2bdc  00000000  00000000  00048205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011ade1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000043a0  00000000  00000000  0011ae34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003aec 	.word	0x08003aec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08003aec 	.word	0x08003aec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <led_init>:
#include "stm32f4xx.h"
#include "led.h"

void led_init()
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIODEN;
 8000274:	4b11      	ldr	r3, [pc, #68]	; (80002bc <led_init+0x4c>)
 8000276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000278:	4a10      	ldr	r2, [pc, #64]	; (80002bc <led_init+0x4c>)
 800027a:	f043 0308 	orr.w	r3, r3, #8
 800027e:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOD->MODER |= (1U<<24);
 8000280:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <led_init+0x50>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a0e      	ldr	r2, [pc, #56]	; (80002c0 <led_init+0x50>)
 8000286:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800028a:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1U<<25);
 800028c:	4b0c      	ldr	r3, [pc, #48]	; (80002c0 <led_init+0x50>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a0b      	ldr	r2, [pc, #44]	; (80002c0 <led_init+0x50>)
 8000292:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000296:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1U<<26);
 8000298:	4b09      	ldr	r3, [pc, #36]	; (80002c0 <led_init+0x50>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a08      	ldr	r2, [pc, #32]	; (80002c0 <led_init+0x50>)
 800029e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80002a2:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1U<<27);
 80002a4:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <led_init+0x50>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a05      	ldr	r2, [pc, #20]	; (80002c0 <led_init+0x50>)
 80002aa:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80002ae:	6013      	str	r3, [r2, #0]
}
 80002b0:	bf00      	nop
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	40023800 	.word	0x40023800
 80002c0:	40020c00 	.word	0x40020c00

080002c4 <led_toggle>:
	GPIOD->BSRR = (1U<<28);
	GPIOD->BSRR = (1U<<29);
}

void led_toggle()
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOD, LED_PIN);
 80002c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002cc:	4804      	ldr	r0, [pc, #16]	; (80002e0 <led_toggle+0x1c>)
 80002ce:	f000 f9b8 	bl	8000642 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOD, LED_PIN1);
 80002d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002d6:	4802      	ldr	r0, [pc, #8]	; (80002e0 <led_toggle+0x1c>)
 80002d8:	f000 f9b3 	bl	8000642 <HAL_GPIO_TogglePin>
}
 80002dc:	bf00      	nop
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	40020c00 	.word	0x40020c00

080002e4 <OneShotTimerCallback>:


TimerHandle_t Auto_Reload_Timer, One_Shot_Timer;

void OneShotTimerCallback(TimerHandle_t xtimer)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b090      	sub	sp, #64	; 0x40
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
	TickType_t Current_Time = xTaskGetTickCount();
 80002ec:	f001 fb64 	bl	80019b8 <xTaskGetTickCount>
 80002f0:	63f8      	str	r0, [r7, #60]	; 0x3c

	led_toggle();
 80002f2:	f7ff ffe7 	bl	80002c4 <led_toggle>

	char string[50];

	sprintf(string, "One-Shot Timer: %d\r\n", Current_Time);
 80002f6:	f107 0308 	add.w	r3, r7, #8
 80002fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80002fc:	4906      	ldr	r1, [pc, #24]	; (8000318 <OneShotTimerCallback+0x34>)
 80002fe:	4618      	mov	r0, r3
 8000300:	f002 ff94 	bl	800322c <siprintf>
	uart2_write_string(string);
 8000304:	f107 0308 	add.w	r3, r7, #8
 8000308:	4618      	mov	r0, r3
 800030a:	f000 f937 	bl	800057c <uart2_write_string>
}
 800030e:	bf00      	nop
 8000310:	3740      	adds	r7, #64	; 0x40
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	08003b04 	.word	0x08003b04

0800031c <AutoReloadTimerCallback>:

void AutoReloadTimerCallback(TimerHandle_t xTimer)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b090      	sub	sp, #64	; 0x40
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
	TickType_t Current_Time = xTaskGetTickCount();
 8000324:	f001 fb48 	bl	80019b8 <xTaskGetTickCount>
 8000328:	63f8      	str	r0, [r7, #60]	; 0x3c

	led_toggle();
 800032a:	f7ff ffcb 	bl	80002c4 <led_toggle>

	char string[50];

	sprintf(string, "Auto-Reload Timer: %d\r\n", Current_Time);
 800032e:	f107 0308 	add.w	r3, r7, #8
 8000332:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000334:	4906      	ldr	r1, [pc, #24]	; (8000350 <AutoReloadTimerCallback+0x34>)
 8000336:	4618      	mov	r0, r3
 8000338:	f002 ff78 	bl	800322c <siprintf>
	uart2_write_string(string);
 800033c:	f107 0308 	add.w	r3, r7, #8
 8000340:	4618      	mov	r0, r3
 8000342:	f000 f91b 	bl	800057c <uart2_write_string>

}
 8000346:	bf00      	nop
 8000348:	3740      	adds	r7, #64	; 0x40
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	08003b1c 	.word	0x08003b1c

08000354 <main>:


int main(int argc, char **argv)
{
 8000354:	b590      	push	{r4, r7, lr}
 8000356:	b085      	sub	sp, #20
 8000358:	af02      	add	r7, sp, #8
 800035a:	6078      	str	r0, [r7, #4]
 800035c:	6039      	str	r1, [r7, #0]
	uart2_tx_init();
 800035e:	f000 f8a9 	bl	80004b4 <uart2_tx_init>
	led_init();
 8000362:	f7ff ff85 	bl	8000270 <led_init>


	One_Shot_Timer = xTimerCreate("One-Shot", pdMS_TO_TICKS(500), pdFALSE, 0, OneShotTimerCallback);
 8000366:	4b19      	ldr	r3, [pc, #100]	; (80003cc <main+0x78>)
 8000368:	9300      	str	r3, [sp, #0]
 800036a:	2300      	movs	r3, #0
 800036c:	2200      	movs	r2, #0
 800036e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000372:	4817      	ldr	r0, [pc, #92]	; (80003d0 <main+0x7c>)
 8000374:	f001 ff7e 	bl	8002274 <xTimerCreate>
 8000378:	4603      	mov	r3, r0
 800037a:	4a16      	ldr	r2, [pc, #88]	; (80003d4 <main+0x80>)
 800037c:	6013      	str	r3, [r2, #0]
	Auto_Reload_Timer = xTimerCreate("Auto-Reload-Timer", pdMS_TO_TICKS(700), pdTRUE, 0, AutoReloadTimerCallback);
 800037e:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <main+0x84>)
 8000380:	9300      	str	r3, [sp, #0]
 8000382:	2300      	movs	r3, #0
 8000384:	2201      	movs	r2, #1
 8000386:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 800038a:	4814      	ldr	r0, [pc, #80]	; (80003dc <main+0x88>)
 800038c:	f001 ff72 	bl	8002274 <xTimerCreate>
 8000390:	4603      	mov	r3, r0
 8000392:	4a13      	ldr	r2, [pc, #76]	; (80003e0 <main+0x8c>)
 8000394:	6013      	str	r3, [r2, #0]

	xTimerStart(One_Shot_Timer, 0);
 8000396:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <main+0x80>)
 8000398:	681c      	ldr	r4, [r3, #0]
 800039a:	f001 fb0d 	bl	80019b8 <xTaskGetTickCount>
 800039e:	4602      	mov	r2, r0
 80003a0:	2300      	movs	r3, #0
 80003a2:	9300      	str	r3, [sp, #0]
 80003a4:	2300      	movs	r3, #0
 80003a6:	2101      	movs	r1, #1
 80003a8:	4620      	mov	r0, r4
 80003aa:	f001 ffbf 	bl	800232c <xTimerGenericCommand>
	xTimerStart(Auto_Reload_Timer, 0);
 80003ae:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <main+0x8c>)
 80003b0:	681c      	ldr	r4, [r3, #0]
 80003b2:	f001 fb01 	bl	80019b8 <xTaskGetTickCount>
 80003b6:	4602      	mov	r2, r0
 80003b8:	2300      	movs	r3, #0
 80003ba:	9300      	str	r3, [sp, #0]
 80003bc:	2300      	movs	r3, #0
 80003be:	2101      	movs	r1, #1
 80003c0:	4620      	mov	r0, r4
 80003c2:	f001 ffb3 	bl	800232c <xTimerGenericCommand>

	vTaskStartScheduler();
 80003c6:	f001 f9e5 	bl	8001794 <vTaskStartScheduler>

	while(1)
 80003ca:	e7fe      	b.n	80003ca <main+0x76>
 80003cc:	080002e5 	.word	0x080002e5
 80003d0:	08003b34 	.word	0x08003b34
 80003d4:	2000008c 	.word	0x2000008c
 80003d8:	0800031d 	.word	0x0800031d
 80003dc:	08003b40 	.word	0x08003b40
 80003e0:	20000088 	.word	0x20000088

080003e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003e8:	e7fe      	b.n	80003e8 <NMI_Handler+0x4>

080003ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003ea:	b480      	push	{r7}
 80003ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003ee:	e7fe      	b.n	80003ee <HardFault_Handler+0x4>

080003f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003f4:	e7fe      	b.n	80003f4 <MemManage_Handler+0x4>

080003f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003f6:	b480      	push	{r7}
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003fa:	e7fe      	b.n	80003fa <BusFault_Handler+0x4>

080003fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000400:	e7fe      	b.n	8000400 <UsageFault_Handler+0x4>

08000402 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000402:	b480      	push	{r7}
 8000404:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000406:	bf00      	nop
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000414:	4802      	ldr	r0, [pc, #8]	; (8000420 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000416:	f000 f92e 	bl	8000676 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800041a:	bf00      	nop
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	20000090 	.word	0x20000090

08000424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b086      	sub	sp, #24
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800042c:	4a14      	ldr	r2, [pc, #80]	; (8000480 <_sbrk+0x5c>)
 800042e:	4b15      	ldr	r3, [pc, #84]	; (8000484 <_sbrk+0x60>)
 8000430:	1ad3      	subs	r3, r2, r3
 8000432:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000434:	697b      	ldr	r3, [r7, #20]
 8000436:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000438:	4b13      	ldr	r3, [pc, #76]	; (8000488 <_sbrk+0x64>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d102      	bne.n	8000446 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000440:	4b11      	ldr	r3, [pc, #68]	; (8000488 <_sbrk+0x64>)
 8000442:	4a12      	ldr	r2, [pc, #72]	; (800048c <_sbrk+0x68>)
 8000444:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000446:	4b10      	ldr	r3, [pc, #64]	; (8000488 <_sbrk+0x64>)
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4413      	add	r3, r2
 800044e:	693a      	ldr	r2, [r7, #16]
 8000450:	429a      	cmp	r2, r3
 8000452:	d207      	bcs.n	8000464 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000454:	f002 feaa 	bl	80031ac <__errno>
 8000458:	4603      	mov	r3, r0
 800045a:	220c      	movs	r2, #12
 800045c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800045e:	f04f 33ff 	mov.w	r3, #4294967295
 8000462:	e009      	b.n	8000478 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000464:	4b08      	ldr	r3, [pc, #32]	; (8000488 <_sbrk+0x64>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800046a:	4b07      	ldr	r3, [pc, #28]	; (8000488 <_sbrk+0x64>)
 800046c:	681a      	ldr	r2, [r3, #0]
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4413      	add	r3, r2
 8000472:	4a05      	ldr	r2, [pc, #20]	; (8000488 <_sbrk+0x64>)
 8000474:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000476:	68fb      	ldr	r3, [r7, #12]
}
 8000478:	4618      	mov	r0, r3
 800047a:	3718      	adds	r7, #24
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	20020000 	.word	0x20020000
 8000484:	00000400 	.word	0x00000400
 8000488:	200000d8 	.word	0x200000d8
 800048c:	20004a38 	.word	0x20004a38

08000490 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000494:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <SystemInit+0x20>)
 8000496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800049a:	4a05      	ldr	r2, [pc, #20]	; (80004b0 <SystemInit+0x20>)
 800049c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	e000ed00 	.word	0xe000ed00

080004b4 <uart2_tx_init>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t Baudrate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t Baudrate);


void uart2_tx_init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOAEN;
 80004b8:	4b20      	ldr	r3, [pc, #128]	; (800053c <uart2_tx_init+0x88>)
 80004ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004bc:	4a1f      	ldr	r2, [pc, #124]	; (800053c <uart2_tx_init+0x88>)
 80004be:	f043 0301 	orr.w	r3, r3, #1
 80004c2:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER &=~(1U<<4);
 80004c4:	4b1e      	ldr	r3, [pc, #120]	; (8000540 <uart2_tx_init+0x8c>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a1d      	ldr	r2, [pc, #116]	; (8000540 <uart2_tx_init+0x8c>)
 80004ca:	f023 0310 	bic.w	r3, r3, #16
 80004ce:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80004d0:	4b1b      	ldr	r3, [pc, #108]	; (8000540 <uart2_tx_init+0x8c>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a1a      	ldr	r2, [pc, #104]	; (8000540 <uart2_tx_init+0x8c>)
 80004d6:	f043 0320 	orr.w	r3, r3, #32
 80004da:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] |= (1U<<8);
 80004dc:	4b18      	ldr	r3, [pc, #96]	; (8000540 <uart2_tx_init+0x8c>)
 80004de:	6a1b      	ldr	r3, [r3, #32]
 80004e0:	4a17      	ldr	r2, [pc, #92]	; (8000540 <uart2_tx_init+0x8c>)
 80004e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004e6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 80004e8:	4b15      	ldr	r3, [pc, #84]	; (8000540 <uart2_tx_init+0x8c>)
 80004ea:	6a1b      	ldr	r3, [r3, #32]
 80004ec:	4a14      	ldr	r2, [pc, #80]	; (8000540 <uart2_tx_init+0x8c>)
 80004ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004f2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 80004f4:	4b12      	ldr	r3, [pc, #72]	; (8000540 <uart2_tx_init+0x8c>)
 80004f6:	6a1b      	ldr	r3, [r3, #32]
 80004f8:	4a11      	ldr	r2, [pc, #68]	; (8000540 <uart2_tx_init+0x8c>)
 80004fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004fe:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8000500:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <uart2_tx_init+0x8c>)
 8000502:	6a1b      	ldr	r3, [r3, #32]
 8000504:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <uart2_tx_init+0x8c>)
 8000506:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800050a:	6213      	str	r3, [r2, #32]

	RCC->APB1ENR |= UART2EN;
 800050c:	4b0b      	ldr	r3, [pc, #44]	; (800053c <uart2_tx_init+0x88>)
 800050e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000510:	4a0a      	ldr	r2, [pc, #40]	; (800053c <uart2_tx_init+0x88>)
 8000512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000516:	6413      	str	r3, [r2, #64]	; 0x40

	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000518:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800051c:	4909      	ldr	r1, [pc, #36]	; (8000544 <uart2_tx_init+0x90>)
 800051e:	480a      	ldr	r0, [pc, #40]	; (8000548 <uart2_tx_init+0x94>)
 8000520:	f000 f841 	bl	80005a6 <uart_set_baudrate>

	USART2->CR1 = CR1_TE;
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <uart2_tx_init+0x94>)
 8000526:	2208      	movs	r2, #8
 8000528:	60da      	str	r2, [r3, #12]

	USART2->CR1 |= CR1_UE;
 800052a:	4b07      	ldr	r3, [pc, #28]	; (8000548 <uart2_tx_init+0x94>)
 800052c:	68db      	ldr	r3, [r3, #12]
 800052e:	4a06      	ldr	r2, [pc, #24]	; (8000548 <uart2_tx_init+0x94>)
 8000530:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000534:	60d3      	str	r3, [r2, #12]
}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40023800 	.word	0x40023800
 8000540:	40020000 	.word	0x40020000
 8000544:	00f42400 	.word	0x00f42400
 8000548:	40004400 	.word	0x40004400

0800054c <uart2_write_char>:

void uart2_write_char(char ch)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	71fb      	strb	r3, [r7, #7]
	while(! (USART2->SR & SR_TXE)) { }
 8000556:	bf00      	nop
 8000558:	4b07      	ldr	r3, [pc, #28]	; (8000578 <uart2_write_char+0x2c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000560:	2b00      	cmp	r3, #0
 8000562:	d0f9      	beq.n	8000558 <uart2_write_char+0xc>

	USART2->DR = (ch & 0xFF);
 8000564:	4a04      	ldr	r2, [pc, #16]	; (8000578 <uart2_write_char+0x2c>)
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	6053      	str	r3, [r2, #4]
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	40004400 	.word	0x40004400

0800057c <uart2_write_string>:

void uart2_write_string(const char* str) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000584:	e006      	b.n	8000594 <uart2_write_string+0x18>
    	uart2_write_char(*str++);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	1c5a      	adds	r2, r3, #1
 800058a:	607a      	str	r2, [r7, #4]
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff ffdc 	bl	800054c <uart2_write_char>
    while (*str) {
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d1f4      	bne.n	8000586 <uart2_write_string+0xa>
    }
}
 800059c:	bf00      	nop
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t Baudrate)
{
 80005a6:	b580      	push	{r7, lr}
 80005a8:	b084      	sub	sp, #16
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	60f8      	str	r0, [r7, #12]
 80005ae:	60b9      	str	r1, [r7, #8]
 80005b0:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, Baudrate);
 80005b2:	6879      	ldr	r1, [r7, #4]
 80005b4:	68b8      	ldr	r0, [r7, #8]
 80005b6:	f000 f808 	bl	80005ca <compute_uart_bd>
 80005ba:	4603      	mov	r3, r0
 80005bc:	461a      	mov	r2, r3
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	609a      	str	r2, [r3, #8]
}
 80005c2:	bf00      	nop
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t Baudrate)
{
 80005ca:	b480      	push	{r7}
 80005cc:	b083      	sub	sp, #12
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
 80005d2:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (Baudrate/2U))/Baudrate);
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	085a      	lsrs	r2, r3, #1
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	441a      	add	r2, r3
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e2:	b29b      	uxth	r3, r3

}
 80005e4:	4618      	mov	r0, r3
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80005f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000628 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005f4:	480d      	ldr	r0, [pc, #52]	; (800062c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80005f6:	490e      	ldr	r1, [pc, #56]	; (8000630 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80005f8:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005fc:	e002      	b.n	8000604 <LoopCopyDataInit>

080005fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000602:	3304      	adds	r3, #4

08000604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000608:	d3f9      	bcc.n	80005fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800060a:	4a0b      	ldr	r2, [pc, #44]	; (8000638 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800060c:	4c0b      	ldr	r4, [pc, #44]	; (800063c <LoopFillZerobss+0x26>)
  movs r3, #0
 800060e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000610:	e001      	b.n	8000616 <LoopFillZerobss>

08000612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000614:	3204      	adds	r2, #4

08000616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000618:	d3fb      	bcc.n	8000612 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800061a:	f7ff ff39 	bl	8000490 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800061e:	f002 fdcb 	bl	80031b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000622:	f7ff fe97 	bl	8000354 <main>
  bx  lr    
 8000626:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000628:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800062c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000630:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000634:	08003ba4 	.word	0x08003ba4
  ldr r2, =_sbss
 8000638:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800063c:	20004a38 	.word	0x20004a38

08000640 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000640:	e7fe      	b.n	8000640 <ADC_IRQHandler>

08000642 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000642:	b480      	push	{r7}
 8000644:	b085      	sub	sp, #20
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
 800064a:	460b      	mov	r3, r1
 800064c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000654:	887a      	ldrh	r2, [r7, #2]
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	4013      	ands	r3, r2
 800065a:	041a      	lsls	r2, r3, #16
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	43d9      	mvns	r1, r3
 8000660:	887b      	ldrh	r3, [r7, #2]
 8000662:	400b      	ands	r3, r1
 8000664:	431a      	orrs	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	619a      	str	r2, [r3, #24]
}
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b082      	sub	sp, #8
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	691b      	ldr	r3, [r3, #16]
 8000684:	f003 0302 	and.w	r3, r3, #2
 8000688:	2b02      	cmp	r3, #2
 800068a:	d122      	bne.n	80006d2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	68db      	ldr	r3, [r3, #12]
 8000692:	f003 0302 	and.w	r3, r3, #2
 8000696:	2b02      	cmp	r3, #2
 8000698:	d11b      	bne.n	80006d2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f06f 0202 	mvn.w	r2, #2
 80006a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2201      	movs	r2, #1
 80006a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f003 0303 	and.w	r3, r3, #3
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d003      	beq.n	80006c0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f000 f8f8 	bl	80008ae <HAL_TIM_IC_CaptureCallback>
 80006be:	e005      	b.n	80006cc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f000 f8ea 	bl	800089a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f000 f8fb 	bl	80008c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2200      	movs	r2, #0
 80006d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	691b      	ldr	r3, [r3, #16]
 80006d8:	f003 0304 	and.w	r3, r3, #4
 80006dc:	2b04      	cmp	r3, #4
 80006de:	d122      	bne.n	8000726 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	68db      	ldr	r3, [r3, #12]
 80006e6:	f003 0304 	and.w	r3, r3, #4
 80006ea:	2b04      	cmp	r3, #4
 80006ec:	d11b      	bne.n	8000726 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f06f 0204 	mvn.w	r2, #4
 80006f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2202      	movs	r2, #2
 80006fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000708:	2b00      	cmp	r3, #0
 800070a:	d003      	beq.n	8000714 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f000 f8ce 	bl	80008ae <HAL_TIM_IC_CaptureCallback>
 8000712:	e005      	b.n	8000720 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f000 f8c0 	bl	800089a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f000 f8d1 	bl	80008c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2200      	movs	r2, #0
 8000724:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	691b      	ldr	r3, [r3, #16]
 800072c:	f003 0308 	and.w	r3, r3, #8
 8000730:	2b08      	cmp	r3, #8
 8000732:	d122      	bne.n	800077a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	68db      	ldr	r3, [r3, #12]
 800073a:	f003 0308 	and.w	r3, r3, #8
 800073e:	2b08      	cmp	r3, #8
 8000740:	d11b      	bne.n	800077a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f06f 0208 	mvn.w	r2, #8
 800074a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2204      	movs	r2, #4
 8000750:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	69db      	ldr	r3, [r3, #28]
 8000758:	f003 0303 	and.w	r3, r3, #3
 800075c:	2b00      	cmp	r3, #0
 800075e:	d003      	beq.n	8000768 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f000 f8a4 	bl	80008ae <HAL_TIM_IC_CaptureCallback>
 8000766:	e005      	b.n	8000774 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f000 f896 	bl	800089a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f000 f8a7 	bl	80008c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2200      	movs	r2, #0
 8000778:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	691b      	ldr	r3, [r3, #16]
 8000780:	f003 0310 	and.w	r3, r3, #16
 8000784:	2b10      	cmp	r3, #16
 8000786:	d122      	bne.n	80007ce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	68db      	ldr	r3, [r3, #12]
 800078e:	f003 0310 	and.w	r3, r3, #16
 8000792:	2b10      	cmp	r3, #16
 8000794:	d11b      	bne.n	80007ce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f06f 0210 	mvn.w	r2, #16
 800079e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2208      	movs	r2, #8
 80007a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	69db      	ldr	r3, [r3, #28]
 80007ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d003      	beq.n	80007bc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f000 f87a 	bl	80008ae <HAL_TIM_IC_CaptureCallback>
 80007ba:	e005      	b.n	80007c8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f000 f86c 	bl	800089a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f000 f87d 	bl	80008c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2200      	movs	r2, #0
 80007cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	691b      	ldr	r3, [r3, #16]
 80007d4:	f003 0301 	and.w	r3, r3, #1
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d10e      	bne.n	80007fa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	68db      	ldr	r3, [r3, #12]
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d107      	bne.n	80007fa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f06f 0201 	mvn.w	r2, #1
 80007f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f000 f846 	bl	8000886 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	691b      	ldr	r3, [r3, #16]
 8000800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000804:	2b80      	cmp	r3, #128	; 0x80
 8000806:	d10e      	bne.n	8000826 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	68db      	ldr	r3, [r3, #12]
 800080e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000812:	2b80      	cmp	r3, #128	; 0x80
 8000814:	d107      	bne.n	8000826 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800081e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f000 f86c 	bl	80008fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	691b      	ldr	r3, [r3, #16]
 800082c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000830:	2b40      	cmp	r3, #64	; 0x40
 8000832:	d10e      	bne.n	8000852 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	68db      	ldr	r3, [r3, #12]
 800083a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800083e:	2b40      	cmp	r3, #64	; 0x40
 8000840:	d107      	bne.n	8000852 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800084a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f000 f842 	bl	80008d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	691b      	ldr	r3, [r3, #16]
 8000858:	f003 0320 	and.w	r3, r3, #32
 800085c:	2b20      	cmp	r3, #32
 800085e:	d10e      	bne.n	800087e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	68db      	ldr	r3, [r3, #12]
 8000866:	f003 0320 	and.w	r3, r3, #32
 800086a:	2b20      	cmp	r3, #32
 800086c:	d107      	bne.n	800087e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f06f 0220 	mvn.w	r2, #32
 8000876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f000 f836 	bl	80008ea <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000886:	b480      	push	{r7}
 8000888:	b083      	sub	sp, #12
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800089a:	b480      	push	{r7}
 800089c:	b083      	sub	sp, #12
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80008ae:	b480      	push	{r7}
 80008b0:	b083      	sub	sp, #12
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80008c2:	b480      	push	{r7}
 80008c4:	b083      	sub	sp, #12
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr

080008d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80008d6:	b480      	push	{r7}
 80008d8:	b083      	sub	sp, #12
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80008ea:	b480      	push	{r7}
 80008ec:	b083      	sub	sp, #12
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80008fe:	b480      	push	{r7}
 8000900:	b083      	sub	sp, #12
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
	...

08000914 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <SysTick_Handler+0x1c>)
 800091a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800091c:	f001 fb82 	bl	8002024 <xTaskGetSchedulerState>
 8000920:	4603      	mov	r3, r0
 8000922:	2b01      	cmp	r3, #1
 8000924:	d001      	beq.n	800092a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8000926:	f002 f9c7 	bl	8002cb8 <xPortSysTickHandler>
  }
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	e000e010 	.word	0xe000e010

08000934 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	4a07      	ldr	r2, [pc, #28]	; (8000960 <vApplicationGetIdleTaskMemory+0x2c>)
 8000944:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	4a06      	ldr	r2, [pc, #24]	; (8000964 <vApplicationGetIdleTaskMemory+0x30>)
 800094a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2280      	movs	r2, #128	; 0x80
 8000950:	601a      	str	r2, [r3, #0]
}
 8000952:	bf00      	nop
 8000954:	3714      	adds	r7, #20
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	200000dc 	.word	0x200000dc
 8000964:	20000138 	.word	0x20000138

08000968 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	4a07      	ldr	r2, [pc, #28]	; (8000994 <vApplicationGetTimerTaskMemory+0x2c>)
 8000978:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	4a06      	ldr	r2, [pc, #24]	; (8000998 <vApplicationGetTimerTaskMemory+0x30>)
 800097e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000986:	601a      	str	r2, [r3, #0]
}
 8000988:	bf00      	nop
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	20000338 	.word	0x20000338
 8000998:	20000394 	.word	0x20000394

0800099c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f103 0208 	add.w	r2, r3, #8
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	f04f 32ff 	mov.w	r2, #4294967295
 80009b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f103 0208 	add.w	r2, r3, #8
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f103 0208 	add.w	r2, r3, #8
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80009f6:	b480      	push	{r7}
 80009f8:	b085      	sub	sp, #20
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	689a      	ldr	r2, [r3, #8]
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	683a      	ldr	r2, [r7, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	683a      	ldr	r2, [r7, #0]
 8000a20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	1c5a      	adds	r2, r3, #1
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	601a      	str	r2, [r3, #0]
}
 8000a32:	bf00      	nop
 8000a34:	3714      	adds	r7, #20
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b085      	sub	sp, #20
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
 8000a46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a54:	d103      	bne.n	8000a5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	691b      	ldr	r3, [r3, #16]
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	e00c      	b.n	8000a78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	3308      	adds	r3, #8
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	e002      	b.n	8000a6c <vListInsert+0x2e>
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d2f6      	bcs.n	8000a66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	685a      	ldr	r2, [r3, #4]
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	683a      	ldr	r2, [r7, #0]
 8000a86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	68fa      	ldr	r2, [r7, #12]
 8000a8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	683a      	ldr	r2, [r7, #0]
 8000a92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	1c5a      	adds	r2, r3, #1
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	601a      	str	r2, [r3, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	691b      	ldr	r3, [r3, #16]
 8000abc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	6892      	ldr	r2, [r2, #8]
 8000ac6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	6852      	ldr	r2, [r2, #4]
 8000ad0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d103      	bne.n	8000ae4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	689a      	ldr	r2, [r3, #8]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	1e5a      	subs	r2, r3, #1
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d10a      	bne.n	8000b2e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b1c:	f383 8811 	msr	BASEPRI, r3
 8000b20:	f3bf 8f6f 	isb	sy
 8000b24:	f3bf 8f4f 	dsb	sy
 8000b28:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000b2a:	bf00      	nop
 8000b2c:	e7fe      	b.n	8000b2c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8000b2e:	f002 f831 	bl	8002b94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b3a:	68f9      	ldr	r1, [r7, #12]
 8000b3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000b3e:	fb01 f303 	mul.w	r3, r1, r3
 8000b42:	441a      	add	r2, r3
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	68f9      	ldr	r1, [r7, #12]
 8000b62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000b64:	fb01 f303 	mul.w	r3, r1, r3
 8000b68:	441a      	add	r2, r3
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	22ff      	movs	r2, #255	; 0xff
 8000b72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	22ff      	movs	r2, #255	; 0xff
 8000b7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d114      	bne.n	8000bae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	691b      	ldr	r3, [r3, #16]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d01a      	beq.n	8000bc2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	3310      	adds	r3, #16
 8000b90:	4618      	mov	r0, r3
 8000b92:	f001 f889 	bl	8001ca8 <xTaskRemoveFromEventList>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d012      	beq.n	8000bc2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <xQueueGenericReset+0xcc>)
 8000b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	f3bf 8f4f 	dsb	sy
 8000ba8:	f3bf 8f6f 	isb	sy
 8000bac:	e009      	b.n	8000bc2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	3310      	adds	r3, #16
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fef2 	bl	800099c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	3324      	adds	r3, #36	; 0x24
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff feed 	bl	800099c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000bc2:	f002 f817 	bl	8002bf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000bc6:	2301      	movs	r3, #1
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	e000ed04 	.word	0xe000ed04

08000bd4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08e      	sub	sp, #56	; 0x38
 8000bd8:	af02      	add	r7, sp, #8
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
 8000be0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d10a      	bne.n	8000bfe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8000be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bec:	f383 8811 	msr	BASEPRI, r3
 8000bf0:	f3bf 8f6f 	isb	sy
 8000bf4:	f3bf 8f4f 	dsb	sy
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000bfa:	bf00      	nop
 8000bfc:	e7fe      	b.n	8000bfc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d10a      	bne.n	8000c1a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8000c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c08:	f383 8811 	msr	BASEPRI, r3
 8000c0c:	f3bf 8f6f 	isb	sy
 8000c10:	f3bf 8f4f 	dsb	sy
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000c16:	bf00      	nop
 8000c18:	e7fe      	b.n	8000c18 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d002      	beq.n	8000c26 <xQueueGenericCreateStatic+0x52>
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <xQueueGenericCreateStatic+0x56>
 8000c26:	2301      	movs	r3, #1
 8000c28:	e000      	b.n	8000c2c <xQueueGenericCreateStatic+0x58>
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d10a      	bne.n	8000c46 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8000c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c34:	f383 8811 	msr	BASEPRI, r3
 8000c38:	f3bf 8f6f 	isb	sy
 8000c3c:	f3bf 8f4f 	dsb	sy
 8000c40:	623b      	str	r3, [r7, #32]
}
 8000c42:	bf00      	nop
 8000c44:	e7fe      	b.n	8000c44 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d102      	bne.n	8000c52 <xQueueGenericCreateStatic+0x7e>
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d101      	bne.n	8000c56 <xQueueGenericCreateStatic+0x82>
 8000c52:	2301      	movs	r3, #1
 8000c54:	e000      	b.n	8000c58 <xQueueGenericCreateStatic+0x84>
 8000c56:	2300      	movs	r3, #0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d10a      	bne.n	8000c72 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8000c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c60:	f383 8811 	msr	BASEPRI, r3
 8000c64:	f3bf 8f6f 	isb	sy
 8000c68:	f3bf 8f4f 	dsb	sy
 8000c6c:	61fb      	str	r3, [r7, #28]
}
 8000c6e:	bf00      	nop
 8000c70:	e7fe      	b.n	8000c70 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8000c72:	2350      	movs	r3, #80	; 0x50
 8000c74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	2b50      	cmp	r3, #80	; 0x50
 8000c7a:	d00a      	beq.n	8000c92 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8000c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c80:	f383 8811 	msr	BASEPRI, r3
 8000c84:	f3bf 8f6f 	isb	sy
 8000c88:	f3bf 8f4f 	dsb	sy
 8000c8c:	61bb      	str	r3, [r7, #24]
}
 8000c8e:	bf00      	nop
 8000c90:	e7fe      	b.n	8000c90 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8000c92:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8000c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d00d      	beq.n	8000cba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8000c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000ca6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	4613      	mov	r3, r2
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	68b9      	ldr	r1, [r7, #8]
 8000cb4:	68f8      	ldr	r0, [r7, #12]
 8000cb6:	f000 f805 	bl	8000cc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3730      	adds	r7, #48	; 0x30
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
 8000cd0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d103      	bne.n	8000ce0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	e002      	b.n	8000ce6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	68fa      	ldr	r2, [r7, #12]
 8000cea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	69b8      	ldr	r0, [r7, #24]
 8000cf6:	f7ff ff05 	bl	8000b04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	78fa      	ldrb	r2, [r7, #3]
 8000cfe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08e      	sub	sp, #56	; 0x38
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
 8000d18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d10a      	bne.n	8000d3e <xQueueGenericSend+0x32>
	__asm volatile
 8000d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d2c:	f383 8811 	msr	BASEPRI, r3
 8000d30:	f3bf 8f6f 	isb	sy
 8000d34:	f3bf 8f4f 	dsb	sy
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000d3a:	bf00      	nop
 8000d3c:	e7fe      	b.n	8000d3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d103      	bne.n	8000d4c <xQueueGenericSend+0x40>
 8000d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d101      	bne.n	8000d50 <xQueueGenericSend+0x44>
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e000      	b.n	8000d52 <xQueueGenericSend+0x46>
 8000d50:	2300      	movs	r3, #0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d10a      	bne.n	8000d6c <xQueueGenericSend+0x60>
	__asm volatile
 8000d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d5a:	f383 8811 	msr	BASEPRI, r3
 8000d5e:	f3bf 8f6f 	isb	sy
 8000d62:	f3bf 8f4f 	dsb	sy
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000d68:	bf00      	nop
 8000d6a:	e7fe      	b.n	8000d6a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d103      	bne.n	8000d7a <xQueueGenericSend+0x6e>
 8000d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d101      	bne.n	8000d7e <xQueueGenericSend+0x72>
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e000      	b.n	8000d80 <xQueueGenericSend+0x74>
 8000d7e:	2300      	movs	r3, #0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d10a      	bne.n	8000d9a <xQueueGenericSend+0x8e>
	__asm volatile
 8000d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d88:	f383 8811 	msr	BASEPRI, r3
 8000d8c:	f3bf 8f6f 	isb	sy
 8000d90:	f3bf 8f4f 	dsb	sy
 8000d94:	623b      	str	r3, [r7, #32]
}
 8000d96:	bf00      	nop
 8000d98:	e7fe      	b.n	8000d98 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000d9a:	f001 f943 	bl	8002024 <xTaskGetSchedulerState>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d102      	bne.n	8000daa <xQueueGenericSend+0x9e>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d101      	bne.n	8000dae <xQueueGenericSend+0xa2>
 8000daa:	2301      	movs	r3, #1
 8000dac:	e000      	b.n	8000db0 <xQueueGenericSend+0xa4>
 8000dae:	2300      	movs	r3, #0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d10a      	bne.n	8000dca <xQueueGenericSend+0xbe>
	__asm volatile
 8000db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000db8:	f383 8811 	msr	BASEPRI, r3
 8000dbc:	f3bf 8f6f 	isb	sy
 8000dc0:	f3bf 8f4f 	dsb	sy
 8000dc4:	61fb      	str	r3, [r7, #28]
}
 8000dc6:	bf00      	nop
 8000dc8:	e7fe      	b.n	8000dc8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000dca:	f001 fee3 	bl	8002b94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d302      	bcc.n	8000de0 <xQueueGenericSend+0xd4>
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d129      	bne.n	8000e34 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000de0:	683a      	ldr	r2, [r7, #0]
 8000de2:	68b9      	ldr	r1, [r7, #8]
 8000de4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000de6:	f000 fa0b 	bl	8001200 <prvCopyDataToQueue>
 8000dea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d010      	beq.n	8000e16 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000df6:	3324      	adds	r3, #36	; 0x24
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 ff55 	bl	8001ca8 <xTaskRemoveFromEventList>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d013      	beq.n	8000e2c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000e04:	4b3f      	ldr	r3, [pc, #252]	; (8000f04 <xQueueGenericSend+0x1f8>)
 8000e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	f3bf 8f4f 	dsb	sy
 8000e10:	f3bf 8f6f 	isb	sy
 8000e14:	e00a      	b.n	8000e2c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d007      	beq.n	8000e2c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000e1c:	4b39      	ldr	r3, [pc, #228]	; (8000f04 <xQueueGenericSend+0x1f8>)
 8000e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	f3bf 8f4f 	dsb	sy
 8000e28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000e2c:	f001 fee2 	bl	8002bf4 <vPortExitCritical>
				return pdPASS;
 8000e30:	2301      	movs	r3, #1
 8000e32:	e063      	b.n	8000efc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d103      	bne.n	8000e42 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000e3a:	f001 fedb 	bl	8002bf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e05c      	b.n	8000efc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d106      	bne.n	8000e56 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f000 ff8f 	bl	8001d70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000e52:	2301      	movs	r3, #1
 8000e54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000e56:	f001 fecd 	bl	8002bf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000e5a:	f000 fd01 	bl	8001860 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000e5e:	f001 fe99 	bl	8002b94 <vPortEnterCritical>
 8000e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e68:	b25b      	sxtb	r3, r3
 8000e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e6e:	d103      	bne.n	8000e78 <xQueueGenericSend+0x16c>
 8000e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e72:	2200      	movs	r2, #0
 8000e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e7e:	b25b      	sxtb	r3, r3
 8000e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e84:	d103      	bne.n	8000e8e <xQueueGenericSend+0x182>
 8000e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000e8e:	f001 feb1 	bl	8002bf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e92:	1d3a      	adds	r2, r7, #4
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	4611      	mov	r1, r2
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 ff7e 	bl	8001d9c <xTaskCheckForTimeOut>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d124      	bne.n	8000ef0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000ea6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ea8:	f000 faa2 	bl	80013f0 <prvIsQueueFull>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d018      	beq.n	8000ee4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eb4:	3310      	adds	r3, #16
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	4611      	mov	r1, r2
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 fea4 	bl	8001c08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000ec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ec2:	f000 fa2d 	bl	8001320 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000ec6:	f000 fcd9 	bl	800187c <xTaskResumeAll>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f47f af7c 	bne.w	8000dca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <xQueueGenericSend+0x1f8>)
 8000ed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	f3bf 8f4f 	dsb	sy
 8000ede:	f3bf 8f6f 	isb	sy
 8000ee2:	e772      	b.n	8000dca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000ee4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ee6:	f000 fa1b 	bl	8001320 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000eea:	f000 fcc7 	bl	800187c <xTaskResumeAll>
 8000eee:	e76c      	b.n	8000dca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000ef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ef2:	f000 fa15 	bl	8001320 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000ef6:	f000 fcc1 	bl	800187c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000efa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3738      	adds	r7, #56	; 0x38
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	e000ed04 	.word	0xe000ed04

08000f08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b090      	sub	sp, #64	; 0x40
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
 8000f14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8000f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d10a      	bne.n	8000f36 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8000f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f24:	f383 8811 	msr	BASEPRI, r3
 8000f28:	f3bf 8f6f 	isb	sy
 8000f2c:	f3bf 8f4f 	dsb	sy
 8000f30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000f32:	bf00      	nop
 8000f34:	e7fe      	b.n	8000f34 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d103      	bne.n	8000f44 <xQueueGenericSendFromISR+0x3c>
 8000f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d101      	bne.n	8000f48 <xQueueGenericSendFromISR+0x40>
 8000f44:	2301      	movs	r3, #1
 8000f46:	e000      	b.n	8000f4a <xQueueGenericSendFromISR+0x42>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d10a      	bne.n	8000f64 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8000f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f52:	f383 8811 	msr	BASEPRI, r3
 8000f56:	f3bf 8f6f 	isb	sy
 8000f5a:	f3bf 8f4f 	dsb	sy
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000f60:	bf00      	nop
 8000f62:	e7fe      	b.n	8000f62 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d103      	bne.n	8000f72 <xQueueGenericSendFromISR+0x6a>
 8000f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d101      	bne.n	8000f76 <xQueueGenericSendFromISR+0x6e>
 8000f72:	2301      	movs	r3, #1
 8000f74:	e000      	b.n	8000f78 <xQueueGenericSendFromISR+0x70>
 8000f76:	2300      	movs	r3, #0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d10a      	bne.n	8000f92 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8000f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f80:	f383 8811 	msr	BASEPRI, r3
 8000f84:	f3bf 8f6f 	isb	sy
 8000f88:	f3bf 8f4f 	dsb	sy
 8000f8c:	623b      	str	r3, [r7, #32]
}
 8000f8e:	bf00      	nop
 8000f90:	e7fe      	b.n	8000f90 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000f92:	f001 fee1 	bl	8002d58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000f96:	f3ef 8211 	mrs	r2, BASEPRI
 8000f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f9e:	f383 8811 	msr	BASEPRI, r3
 8000fa2:	f3bf 8f6f 	isb	sy
 8000fa6:	f3bf 8f4f 	dsb	sy
 8000faa:	61fa      	str	r2, [r7, #28]
 8000fac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000fae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000fb0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d302      	bcc.n	8000fc4 <xQueueGenericSendFromISR+0xbc>
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d12f      	bne.n	8001024 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	68b9      	ldr	r1, [r7, #8]
 8000fd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000fda:	f000 f911 	bl	8001200 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000fde:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe6:	d112      	bne.n	800100e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d016      	beq.n	800101e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ff2:	3324      	adds	r3, #36	; 0x24
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 fe57 	bl	8001ca8 <xTaskRemoveFromEventList>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d00e      	beq.n	800101e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d00b      	beq.n	800101e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2201      	movs	r2, #1
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	e007      	b.n	800101e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800100e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001012:	3301      	adds	r3, #1
 8001014:	b2db      	uxtb	r3, r3
 8001016:	b25a      	sxtb	r2, r3
 8001018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800101a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800101e:	2301      	movs	r3, #1
 8001020:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8001022:	e001      	b.n	8001028 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001024:	2300      	movs	r3, #0
 8001026:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800102a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001032:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001036:	4618      	mov	r0, r3
 8001038:	3740      	adds	r7, #64	; 0x40
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08c      	sub	sp, #48	; 0x30
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800104c:	2300      	movs	r3, #0
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001056:	2b00      	cmp	r3, #0
 8001058:	d10a      	bne.n	8001070 <xQueueReceive+0x30>
	__asm volatile
 800105a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800105e:	f383 8811 	msr	BASEPRI, r3
 8001062:	f3bf 8f6f 	isb	sy
 8001066:	f3bf 8f4f 	dsb	sy
 800106a:	623b      	str	r3, [r7, #32]
}
 800106c:	bf00      	nop
 800106e:	e7fe      	b.n	800106e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d103      	bne.n	800107e <xQueueReceive+0x3e>
 8001076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <xQueueReceive+0x42>
 800107e:	2301      	movs	r3, #1
 8001080:	e000      	b.n	8001084 <xQueueReceive+0x44>
 8001082:	2300      	movs	r3, #0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d10a      	bne.n	800109e <xQueueReceive+0x5e>
	__asm volatile
 8001088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800108c:	f383 8811 	msr	BASEPRI, r3
 8001090:	f3bf 8f6f 	isb	sy
 8001094:	f3bf 8f4f 	dsb	sy
 8001098:	61fb      	str	r3, [r7, #28]
}
 800109a:	bf00      	nop
 800109c:	e7fe      	b.n	800109c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800109e:	f000 ffc1 	bl	8002024 <xTaskGetSchedulerState>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d102      	bne.n	80010ae <xQueueReceive+0x6e>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <xQueueReceive+0x72>
 80010ae:	2301      	movs	r3, #1
 80010b0:	e000      	b.n	80010b4 <xQueueReceive+0x74>
 80010b2:	2300      	movs	r3, #0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d10a      	bne.n	80010ce <xQueueReceive+0x8e>
	__asm volatile
 80010b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010bc:	f383 8811 	msr	BASEPRI, r3
 80010c0:	f3bf 8f6f 	isb	sy
 80010c4:	f3bf 8f4f 	dsb	sy
 80010c8:	61bb      	str	r3, [r7, #24]
}
 80010ca:	bf00      	nop
 80010cc:	e7fe      	b.n	80010cc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80010ce:	f001 fd61 	bl	8002b94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80010d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80010d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d01f      	beq.n	800111e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80010de:	68b9      	ldr	r1, [r7, #8]
 80010e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80010e2:	f000 f8f7 	bl	80012d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	1e5a      	subs	r2, r3, #1
 80010ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80010ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f0:	691b      	ldr	r3, [r3, #16]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d00f      	beq.n	8001116 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80010f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f8:	3310      	adds	r3, #16
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 fdd4 	bl	8001ca8 <xTaskRemoveFromEventList>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d007      	beq.n	8001116 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001106:	4b3d      	ldr	r3, [pc, #244]	; (80011fc <xQueueReceive+0x1bc>)
 8001108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	f3bf 8f4f 	dsb	sy
 8001112:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001116:	f001 fd6d 	bl	8002bf4 <vPortExitCritical>
				return pdPASS;
 800111a:	2301      	movs	r3, #1
 800111c:	e069      	b.n	80011f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d103      	bne.n	800112c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001124:	f001 fd66 	bl	8002bf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001128:	2300      	movs	r3, #0
 800112a:	e062      	b.n	80011f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800112c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800112e:	2b00      	cmp	r3, #0
 8001130:	d106      	bne.n	8001140 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001132:	f107 0310 	add.w	r3, r7, #16
 8001136:	4618      	mov	r0, r3
 8001138:	f000 fe1a 	bl	8001d70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800113c:	2301      	movs	r3, #1
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001140:	f001 fd58 	bl	8002bf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001144:	f000 fb8c 	bl	8001860 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001148:	f001 fd24 	bl	8002b94 <vPortEnterCritical>
 800114c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001152:	b25b      	sxtb	r3, r3
 8001154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001158:	d103      	bne.n	8001162 <xQueueReceive+0x122>
 800115a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115c:	2200      	movs	r2, #0
 800115e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001164:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001168:	b25b      	sxtb	r3, r3
 800116a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800116e:	d103      	bne.n	8001178 <xQueueReceive+0x138>
 8001170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001172:	2200      	movs	r2, #0
 8001174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001178:	f001 fd3c 	bl	8002bf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800117c:	1d3a      	adds	r2, r7, #4
 800117e:	f107 0310 	add.w	r3, r7, #16
 8001182:	4611      	mov	r1, r2
 8001184:	4618      	mov	r0, r3
 8001186:	f000 fe09 	bl	8001d9c <xTaskCheckForTimeOut>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d123      	bne.n	80011d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001192:	f000 f917 	bl	80013c4 <prvIsQueueEmpty>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d017      	beq.n	80011cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800119c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800119e:	3324      	adds	r3, #36	; 0x24
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 fd2f 	bl	8001c08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80011aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011ac:	f000 f8b8 	bl	8001320 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80011b0:	f000 fb64 	bl	800187c <xTaskResumeAll>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d189      	bne.n	80010ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <xQueueReceive+0x1bc>)
 80011bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	f3bf 8f4f 	dsb	sy
 80011c6:	f3bf 8f6f 	isb	sy
 80011ca:	e780      	b.n	80010ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80011cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011ce:	f000 f8a7 	bl	8001320 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80011d2:	f000 fb53 	bl	800187c <xTaskResumeAll>
 80011d6:	e77a      	b.n	80010ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80011d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011da:	f000 f8a1 	bl	8001320 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80011de:	f000 fb4d 	bl	800187c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80011e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011e4:	f000 f8ee 	bl	80013c4 <prvIsQueueEmpty>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f43f af6f 	beq.w	80010ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80011f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3730      	adds	r7, #48	; 0x30
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	e000ed04 	.word	0xe000ed04

08001200 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001214:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	2b00      	cmp	r3, #0
 800121c:	d10d      	bne.n	800123a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d14d      	bne.n	80012c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	4618      	mov	r0, r3
 800122c:	f000 ff18 	bl	8002060 <xTaskPriorityDisinherit>
 8001230:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	e043      	b.n	80012c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d119      	bne.n	8001274 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6858      	ldr	r0, [r3, #4]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	461a      	mov	r2, r3
 800124a:	68b9      	ldr	r1, [r7, #8]
 800124c:	f001 ffd8 	bl	8003200 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001258:	441a      	add	r2, r3
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	429a      	cmp	r2, r3
 8001268:	d32b      	bcc.n	80012c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	e026      	b.n	80012c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	68d8      	ldr	r0, [r3, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	461a      	mov	r2, r3
 800127e:	68b9      	ldr	r1, [r7, #8]
 8001280:	f001 ffbe 	bl	8003200 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	68da      	ldr	r2, [r3, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	425b      	negs	r3, r3
 800128e:	441a      	add	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	68da      	ldr	r2, [r3, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	429a      	cmp	r2, r3
 800129e:	d207      	bcs.n	80012b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	425b      	negs	r3, r3
 80012aa:	441a      	add	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d105      	bne.n	80012c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d002      	beq.n	80012c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	3b01      	subs	r3, #1
 80012c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1c5a      	adds	r2, r3, #1
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80012ca:	697b      	ldr	r3, [r7, #20]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d018      	beq.n	8001318 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68da      	ldr	r2, [r3, #12]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	441a      	add	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68da      	ldr	r2, [r3, #12]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d303      	bcc.n	8001308 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68d9      	ldr	r1, [r3, #12]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	461a      	mov	r2, r3
 8001312:	6838      	ldr	r0, [r7, #0]
 8001314:	f001 ff74 	bl	8003200 <memcpy>
	}
}
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001328:	f001 fc34 	bl	8002b94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001332:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001334:	e011      	b.n	800135a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133a:	2b00      	cmp	r3, #0
 800133c:	d012      	beq.n	8001364 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3324      	adds	r3, #36	; 0x24
 8001342:	4618      	mov	r0, r3
 8001344:	f000 fcb0 	bl	8001ca8 <xTaskRemoveFromEventList>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800134e:	f000 fd87 	bl	8001e60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	3b01      	subs	r3, #1
 8001356:	b2db      	uxtb	r3, r3
 8001358:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800135a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135e:	2b00      	cmp	r3, #0
 8001360:	dce9      	bgt.n	8001336 <prvUnlockQueue+0x16>
 8001362:	e000      	b.n	8001366 <prvUnlockQueue+0x46>
					break;
 8001364:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	22ff      	movs	r2, #255	; 0xff
 800136a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800136e:	f001 fc41 	bl	8002bf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001372:	f001 fc0f 	bl	8002b94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800137c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800137e:	e011      	b.n	80013a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d012      	beq.n	80013ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3310      	adds	r3, #16
 800138c:	4618      	mov	r0, r3
 800138e:	f000 fc8b 	bl	8001ca8 <xTaskRemoveFromEventList>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001398:	f000 fd62 	bl	8001e60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800139c:	7bbb      	ldrb	r3, [r7, #14]
 800139e:	3b01      	subs	r3, #1
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80013a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	dce9      	bgt.n	8001380 <prvUnlockQueue+0x60>
 80013ac:	e000      	b.n	80013b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80013ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	22ff      	movs	r2, #255	; 0xff
 80013b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80013b8:	f001 fc1c 	bl	8002bf4 <vPortExitCritical>
}
 80013bc:	bf00      	nop
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80013cc:	f001 fbe2 	bl	8002b94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d102      	bne.n	80013de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80013d8:	2301      	movs	r3, #1
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	e001      	b.n	80013e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80013e2:	f001 fc07 	bl	8002bf4 <vPortExitCritical>

	return xReturn;
 80013e6:	68fb      	ldr	r3, [r7, #12]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80013f8:	f001 fbcc 	bl	8002b94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001404:	429a      	cmp	r2, r3
 8001406:	d102      	bne.n	800140e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001408:	2301      	movs	r3, #1
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	e001      	b.n	8001412 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001412:	f001 fbef 	bl	8002bf4 <vPortExitCritical>

	return xReturn;
 8001416:	68fb      	ldr	r3, [r7, #12]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	e014      	b.n	800145a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001430:	4a0f      	ldr	r2, [pc, #60]	; (8001470 <vQueueAddToRegistry+0x50>)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d10b      	bne.n	8001454 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800143c:	490c      	ldr	r1, [pc, #48]	; (8001470 <vQueueAddToRegistry+0x50>)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001446:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <vQueueAddToRegistry+0x50>)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	4413      	add	r3, r2
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001452:	e006      	b.n	8001462 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	3301      	adds	r3, #1
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2b07      	cmp	r3, #7
 800145e:	d9e7      	bls.n	8001430 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001460:	bf00      	nop
 8001462:	bf00      	nop
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000794 	.word	0x20000794

08001474 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001484:	f001 fb86 	bl	8002b94 <vPortEnterCritical>
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800148e:	b25b      	sxtb	r3, r3
 8001490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001494:	d103      	bne.n	800149e <vQueueWaitForMessageRestricted+0x2a>
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014a4:	b25b      	sxtb	r3, r3
 80014a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014aa:	d103      	bne.n	80014b4 <vQueueWaitForMessageRestricted+0x40>
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80014b4:	f001 fb9e 	bl	8002bf4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d106      	bne.n	80014ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	3324      	adds	r3, #36	; 0x24
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	68b9      	ldr	r1, [r7, #8]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 fbc1 	bl	8001c50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80014ce:	6978      	ldr	r0, [r7, #20]
 80014d0:	f7ff ff26 	bl	8001320 <prvUnlockQueue>
	}
 80014d4:	bf00      	nop
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08e      	sub	sp, #56	; 0x38
 80014e0:	af04      	add	r7, sp, #16
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
 80014e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80014ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d10a      	bne.n	8001506 <xTaskCreateStatic+0x2a>
	__asm volatile
 80014f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014f4:	f383 8811 	msr	BASEPRI, r3
 80014f8:	f3bf 8f6f 	isb	sy
 80014fc:	f3bf 8f4f 	dsb	sy
 8001500:	623b      	str	r3, [r7, #32]
}
 8001502:	bf00      	nop
 8001504:	e7fe      	b.n	8001504 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001508:	2b00      	cmp	r3, #0
 800150a:	d10a      	bne.n	8001522 <xTaskCreateStatic+0x46>
	__asm volatile
 800150c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001510:	f383 8811 	msr	BASEPRI, r3
 8001514:	f3bf 8f6f 	isb	sy
 8001518:	f3bf 8f4f 	dsb	sy
 800151c:	61fb      	str	r3, [r7, #28]
}
 800151e:	bf00      	nop
 8001520:	e7fe      	b.n	8001520 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001522:	235c      	movs	r3, #92	; 0x5c
 8001524:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	2b5c      	cmp	r3, #92	; 0x5c
 800152a:	d00a      	beq.n	8001542 <xTaskCreateStatic+0x66>
	__asm volatile
 800152c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001530:	f383 8811 	msr	BASEPRI, r3
 8001534:	f3bf 8f6f 	isb	sy
 8001538:	f3bf 8f4f 	dsb	sy
 800153c:	61bb      	str	r3, [r7, #24]
}
 800153e:	bf00      	nop
 8001540:	e7fe      	b.n	8001540 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001542:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001546:	2b00      	cmp	r3, #0
 8001548:	d01e      	beq.n	8001588 <xTaskCreateStatic+0xac>
 800154a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800154c:	2b00      	cmp	r3, #0
 800154e:	d01b      	beq.n	8001588 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001558:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	2202      	movs	r2, #2
 800155e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001562:	2300      	movs	r3, #0
 8001564:	9303      	str	r3, [sp, #12]
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	9302      	str	r3, [sp, #8]
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	9301      	str	r3, [sp, #4]
 8001570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	68b9      	ldr	r1, [r7, #8]
 800157a:	68f8      	ldr	r0, [r7, #12]
 800157c:	f000 f80b 	bl	8001596 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001580:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001582:	f000 f897 	bl	80016b4 <prvAddNewTaskToReadyList>
 8001586:	e001      	b.n	800158c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800158c:	697b      	ldr	r3, [r7, #20]
	}
 800158e:	4618      	mov	r0, r3
 8001590:	3728      	adds	r7, #40	; 0x28
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b088      	sub	sp, #32
 800159a:	af00      	add	r7, sp, #0
 800159c:	60f8      	str	r0, [r7, #12]
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80015a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	461a      	mov	r2, r3
 80015ae:	21a5      	movs	r1, #165	; 0xa5
 80015b0:	f001 fe34 	bl	800321c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80015b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015be:	3b01      	subs	r3, #1
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	f023 0307 	bic.w	r3, r3, #7
 80015cc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	f003 0307 	and.w	r3, r3, #7
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d00a      	beq.n	80015ee <prvInitialiseNewTask+0x58>
	__asm volatile
 80015d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015dc:	f383 8811 	msr	BASEPRI, r3
 80015e0:	f3bf 8f6f 	isb	sy
 80015e4:	f3bf 8f4f 	dsb	sy
 80015e8:	617b      	str	r3, [r7, #20]
}
 80015ea:	bf00      	nop
 80015ec:	e7fe      	b.n	80015ec <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d01f      	beq.n	8001634 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80015f4:	2300      	movs	r3, #0
 80015f6:	61fb      	str	r3, [r7, #28]
 80015f8:	e012      	b.n	8001620 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	4413      	add	r3, r2
 8001600:	7819      	ldrb	r1, [r3, #0]
 8001602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	4413      	add	r3, r2
 8001608:	3334      	adds	r3, #52	; 0x34
 800160a:	460a      	mov	r2, r1
 800160c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800160e:	68ba      	ldr	r2, [r7, #8]
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	4413      	add	r3, r2
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d006      	beq.n	8001628 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	3301      	adds	r3, #1
 800161e:	61fb      	str	r3, [r7, #28]
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	2b0f      	cmp	r3, #15
 8001624:	d9e9      	bls.n	80015fa <prvInitialiseNewTask+0x64>
 8001626:	e000      	b.n	800162a <prvInitialiseNewTask+0x94>
			{
				break;
 8001628:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800162a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001632:	e003      	b.n	800163c <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800163c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163e:	2b37      	cmp	r3, #55	; 0x37
 8001640:	d901      	bls.n	8001646 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001642:	2337      	movs	r3, #55	; 0x37
 8001644:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001648:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800164a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800164c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800164e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001650:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8001652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001654:	2200      	movs	r2, #0
 8001656:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800165a:	3304      	adds	r3, #4
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff f9bd 	bl	80009dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001664:	3318      	adds	r3, #24
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff f9b8 	bl	80009dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800166c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800166e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001670:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001674:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8001678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800167a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800167c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800167e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001680:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001684:	2200      	movs	r2, #0
 8001686:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	68f9      	ldr	r1, [r7, #12]
 8001694:	69b8      	ldr	r0, [r7, #24]
 8001696:	f001 f94f 	bl	8002938 <pxPortInitialiseStack>
 800169a:	4602      	mov	r2, r0
 800169c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800169e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80016a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d002      	beq.n	80016ac <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80016a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80016ac:	bf00      	nop
 80016ae:	3720      	adds	r7, #32
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80016bc:	f001 fa6a 	bl	8002b94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80016c0:	4b2d      	ldr	r3, [pc, #180]	; (8001778 <prvAddNewTaskToReadyList+0xc4>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	3301      	adds	r3, #1
 80016c6:	4a2c      	ldr	r2, [pc, #176]	; (8001778 <prvAddNewTaskToReadyList+0xc4>)
 80016c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80016ca:	4b2c      	ldr	r3, [pc, #176]	; (800177c <prvAddNewTaskToReadyList+0xc8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d109      	bne.n	80016e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80016d2:	4a2a      	ldr	r2, [pc, #168]	; (800177c <prvAddNewTaskToReadyList+0xc8>)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80016d8:	4b27      	ldr	r3, [pc, #156]	; (8001778 <prvAddNewTaskToReadyList+0xc4>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d110      	bne.n	8001702 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80016e0:	f000 fbe2 	bl	8001ea8 <prvInitialiseTaskLists>
 80016e4:	e00d      	b.n	8001702 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80016e6:	4b26      	ldr	r3, [pc, #152]	; (8001780 <prvAddNewTaskToReadyList+0xcc>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d109      	bne.n	8001702 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80016ee:	4b23      	ldr	r3, [pc, #140]	; (800177c <prvAddNewTaskToReadyList+0xc8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d802      	bhi.n	8001702 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80016fc:	4a1f      	ldr	r2, [pc, #124]	; (800177c <prvAddNewTaskToReadyList+0xc8>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001702:	4b20      	ldr	r3, [pc, #128]	; (8001784 <prvAddNewTaskToReadyList+0xd0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	3301      	adds	r3, #1
 8001708:	4a1e      	ldr	r2, [pc, #120]	; (8001784 <prvAddNewTaskToReadyList+0xd0>)
 800170a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800170c:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <prvAddNewTaskToReadyList+0xd0>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001718:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <prvAddNewTaskToReadyList+0xd4>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	429a      	cmp	r2, r3
 800171e:	d903      	bls.n	8001728 <prvAddNewTaskToReadyList+0x74>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001724:	4a18      	ldr	r2, [pc, #96]	; (8001788 <prvAddNewTaskToReadyList+0xd4>)
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800172c:	4613      	mov	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4a15      	ldr	r2, [pc, #84]	; (800178c <prvAddNewTaskToReadyList+0xd8>)
 8001736:	441a      	add	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3304      	adds	r3, #4
 800173c:	4619      	mov	r1, r3
 800173e:	4610      	mov	r0, r2
 8001740:	f7ff f959 	bl	80009f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001744:	f001 fa56 	bl	8002bf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001748:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <prvAddNewTaskToReadyList+0xcc>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d00e      	beq.n	800176e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001750:	4b0a      	ldr	r3, [pc, #40]	; (800177c <prvAddNewTaskToReadyList+0xc8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175a:	429a      	cmp	r2, r3
 800175c:	d207      	bcs.n	800176e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800175e:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <prvAddNewTaskToReadyList+0xdc>)
 8001760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	f3bf 8f4f 	dsb	sy
 800176a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000ca8 	.word	0x20000ca8
 800177c:	200007d4 	.word	0x200007d4
 8001780:	20000cb4 	.word	0x20000cb4
 8001784:	20000cc4 	.word	0x20000cc4
 8001788:	20000cb0 	.word	0x20000cb0
 800178c:	200007d8 	.word	0x200007d8
 8001790:	e000ed04 	.word	0xe000ed04

08001794 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	; 0x28
 8001798:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800179a:	2300      	movs	r3, #0
 800179c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80017a2:	463a      	mov	r2, r7
 80017a4:	1d39      	adds	r1, r7, #4
 80017a6:	f107 0308 	add.w	r3, r7, #8
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff f8c2 	bl	8000934 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80017b0:	6839      	ldr	r1, [r7, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68ba      	ldr	r2, [r7, #8]
 80017b6:	9202      	str	r2, [sp, #8]
 80017b8:	9301      	str	r3, [sp, #4]
 80017ba:	2300      	movs	r3, #0
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	2300      	movs	r3, #0
 80017c0:	460a      	mov	r2, r1
 80017c2:	4921      	ldr	r1, [pc, #132]	; (8001848 <vTaskStartScheduler+0xb4>)
 80017c4:	4821      	ldr	r0, [pc, #132]	; (800184c <vTaskStartScheduler+0xb8>)
 80017c6:	f7ff fe89 	bl	80014dc <xTaskCreateStatic>
 80017ca:	4603      	mov	r3, r0
 80017cc:	4a20      	ldr	r2, [pc, #128]	; (8001850 <vTaskStartScheduler+0xbc>)
 80017ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80017d0:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <vTaskStartScheduler+0xbc>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d002      	beq.n	80017de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80017d8:	2301      	movs	r3, #1
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	e001      	b.n	80017e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d102      	bne.n	80017ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80017e8:	f000 fcfc 	bl	80021e4 <xTimerCreateTimerTask>
 80017ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d116      	bne.n	8001822 <vTaskStartScheduler+0x8e>
	__asm volatile
 80017f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017f8:	f383 8811 	msr	BASEPRI, r3
 80017fc:	f3bf 8f6f 	isb	sy
 8001800:	f3bf 8f4f 	dsb	sy
 8001804:	613b      	str	r3, [r7, #16]
}
 8001806:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001808:	4b12      	ldr	r3, [pc, #72]	; (8001854 <vTaskStartScheduler+0xc0>)
 800180a:	f04f 32ff 	mov.w	r2, #4294967295
 800180e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <vTaskStartScheduler+0xc4>)
 8001812:	2201      	movs	r2, #1
 8001814:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001816:	4b11      	ldr	r3, [pc, #68]	; (800185c <vTaskStartScheduler+0xc8>)
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800181c:	f001 f918 	bl	8002a50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001820:	e00e      	b.n	8001840 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001828:	d10a      	bne.n	8001840 <vTaskStartScheduler+0xac>
	__asm volatile
 800182a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800182e:	f383 8811 	msr	BASEPRI, r3
 8001832:	f3bf 8f6f 	isb	sy
 8001836:	f3bf 8f4f 	dsb	sy
 800183a:	60fb      	str	r3, [r7, #12]
}
 800183c:	bf00      	nop
 800183e:	e7fe      	b.n	800183e <vTaskStartScheduler+0xaa>
}
 8001840:	bf00      	nop
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	08003b54 	.word	0x08003b54
 800184c:	08001e79 	.word	0x08001e79
 8001850:	20000ccc 	.word	0x20000ccc
 8001854:	20000cc8 	.word	0x20000cc8
 8001858:	20000cb4 	.word	0x20000cb4
 800185c:	20000cac 	.word	0x20000cac

08001860 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001864:	4b04      	ldr	r3, [pc, #16]	; (8001878 <vTaskSuspendAll+0x18>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	3301      	adds	r3, #1
 800186a:	4a03      	ldr	r2, [pc, #12]	; (8001878 <vTaskSuspendAll+0x18>)
 800186c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	20000cd0 	.word	0x20000cd0

0800187c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001886:	2300      	movs	r3, #0
 8001888:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800188a:	4b42      	ldr	r3, [pc, #264]	; (8001994 <xTaskResumeAll+0x118>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10a      	bne.n	80018a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8001892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001896:	f383 8811 	msr	BASEPRI, r3
 800189a:	f3bf 8f6f 	isb	sy
 800189e:	f3bf 8f4f 	dsb	sy
 80018a2:	603b      	str	r3, [r7, #0]
}
 80018a4:	bf00      	nop
 80018a6:	e7fe      	b.n	80018a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80018a8:	f001 f974 	bl	8002b94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80018ac:	4b39      	ldr	r3, [pc, #228]	; (8001994 <xTaskResumeAll+0x118>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	3b01      	subs	r3, #1
 80018b2:	4a38      	ldr	r2, [pc, #224]	; (8001994 <xTaskResumeAll+0x118>)
 80018b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80018b6:	4b37      	ldr	r3, [pc, #220]	; (8001994 <xTaskResumeAll+0x118>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d162      	bne.n	8001984 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80018be:	4b36      	ldr	r3, [pc, #216]	; (8001998 <xTaskResumeAll+0x11c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d05e      	beq.n	8001984 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80018c6:	e02f      	b.n	8001928 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80018c8:	4b34      	ldr	r3, [pc, #208]	; (800199c <xTaskResumeAll+0x120>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	3318      	adds	r3, #24
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff f8eb 	bl	8000ab0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	3304      	adds	r3, #4
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff f8e6 	bl	8000ab0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018e8:	4b2d      	ldr	r3, [pc, #180]	; (80019a0 <xTaskResumeAll+0x124>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d903      	bls.n	80018f8 <xTaskResumeAll+0x7c>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f4:	4a2a      	ldr	r2, [pc, #168]	; (80019a0 <xTaskResumeAll+0x124>)
 80018f6:	6013      	str	r3, [r2, #0]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018fc:	4613      	mov	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4a27      	ldr	r2, [pc, #156]	; (80019a4 <xTaskResumeAll+0x128>)
 8001906:	441a      	add	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	3304      	adds	r3, #4
 800190c:	4619      	mov	r1, r3
 800190e:	4610      	mov	r0, r2
 8001910:	f7ff f871 	bl	80009f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001918:	4b23      	ldr	r3, [pc, #140]	; (80019a8 <xTaskResumeAll+0x12c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191e:	429a      	cmp	r2, r3
 8001920:	d302      	bcc.n	8001928 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8001922:	4b22      	ldr	r3, [pc, #136]	; (80019ac <xTaskResumeAll+0x130>)
 8001924:	2201      	movs	r2, #1
 8001926:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001928:	4b1c      	ldr	r3, [pc, #112]	; (800199c <xTaskResumeAll+0x120>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1cb      	bne.n	80018c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001936:	f000 fb55 	bl	8001fe4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800193a:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <xTaskResumeAll+0x134>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d010      	beq.n	8001968 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001946:	f000 f847 	bl	80019d8 <xTaskIncrementTick>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d002      	beq.n	8001956 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8001950:	4b16      	ldr	r3, [pc, #88]	; (80019ac <xTaskResumeAll+0x130>)
 8001952:	2201      	movs	r2, #1
 8001954:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	3b01      	subs	r3, #1
 800195a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1f1      	bne.n	8001946 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8001962:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <xTaskResumeAll+0x134>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001968:	4b10      	ldr	r3, [pc, #64]	; (80019ac <xTaskResumeAll+0x130>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d009      	beq.n	8001984 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001970:	2301      	movs	r3, #1
 8001972:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001974:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <xTaskResumeAll+0x138>)
 8001976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	f3bf 8f4f 	dsb	sy
 8001980:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001984:	f001 f936 	bl	8002bf4 <vPortExitCritical>

	return xAlreadyYielded;
 8001988:	68bb      	ldr	r3, [r7, #8]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000cd0 	.word	0x20000cd0
 8001998:	20000ca8 	.word	0x20000ca8
 800199c:	20000c68 	.word	0x20000c68
 80019a0:	20000cb0 	.word	0x20000cb0
 80019a4:	200007d8 	.word	0x200007d8
 80019a8:	200007d4 	.word	0x200007d4
 80019ac:	20000cbc 	.word	0x20000cbc
 80019b0:	20000cb8 	.word	0x20000cb8
 80019b4:	e000ed04 	.word	0xe000ed04

080019b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80019be:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <xTaskGetTickCount+0x1c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80019c4:	687b      	ldr	r3, [r7, #4]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	20000cac 	.word	0x20000cac

080019d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80019e2:	4b4f      	ldr	r3, [pc, #316]	; (8001b20 <xTaskIncrementTick+0x148>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f040 808f 	bne.w	8001b0a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80019ec:	4b4d      	ldr	r3, [pc, #308]	; (8001b24 <xTaskIncrementTick+0x14c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	3301      	adds	r3, #1
 80019f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80019f4:	4a4b      	ldr	r2, [pc, #300]	; (8001b24 <xTaskIncrementTick+0x14c>)
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d120      	bne.n	8001a42 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001a00:	4b49      	ldr	r3, [pc, #292]	; (8001b28 <xTaskIncrementTick+0x150>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00a      	beq.n	8001a20 <xTaskIncrementTick+0x48>
	__asm volatile
 8001a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a0e:	f383 8811 	msr	BASEPRI, r3
 8001a12:	f3bf 8f6f 	isb	sy
 8001a16:	f3bf 8f4f 	dsb	sy
 8001a1a:	603b      	str	r3, [r7, #0]
}
 8001a1c:	bf00      	nop
 8001a1e:	e7fe      	b.n	8001a1e <xTaskIncrementTick+0x46>
 8001a20:	4b41      	ldr	r3, [pc, #260]	; (8001b28 <xTaskIncrementTick+0x150>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	4b41      	ldr	r3, [pc, #260]	; (8001b2c <xTaskIncrementTick+0x154>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a3f      	ldr	r2, [pc, #252]	; (8001b28 <xTaskIncrementTick+0x150>)
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	4a3f      	ldr	r2, [pc, #252]	; (8001b2c <xTaskIncrementTick+0x154>)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	4b3e      	ldr	r3, [pc, #248]	; (8001b30 <xTaskIncrementTick+0x158>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	4a3d      	ldr	r2, [pc, #244]	; (8001b30 <xTaskIncrementTick+0x158>)
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	f000 fad1 	bl	8001fe4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001a42:	4b3c      	ldr	r3, [pc, #240]	; (8001b34 <xTaskIncrementTick+0x15c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d349      	bcc.n	8001ae0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a4c:	4b36      	ldr	r3, [pc, #216]	; (8001b28 <xTaskIncrementTick+0x150>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d104      	bne.n	8001a60 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a56:	4b37      	ldr	r3, [pc, #220]	; (8001b34 <xTaskIncrementTick+0x15c>)
 8001a58:	f04f 32ff 	mov.w	r2, #4294967295
 8001a5c:	601a      	str	r2, [r3, #0]
					break;
 8001a5e:	e03f      	b.n	8001ae0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a60:	4b31      	ldr	r3, [pc, #196]	; (8001b28 <xTaskIncrementTick+0x150>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d203      	bcs.n	8001a80 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001a78:	4a2e      	ldr	r2, [pc, #184]	; (8001b34 <xTaskIncrementTick+0x15c>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001a7e:	e02f      	b.n	8001ae0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	3304      	adds	r3, #4
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff f813 	bl	8000ab0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d004      	beq.n	8001a9c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	3318      	adds	r3, #24
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff f80a 	bl	8000ab0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aa0:	4b25      	ldr	r3, [pc, #148]	; (8001b38 <xTaskIncrementTick+0x160>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d903      	bls.n	8001ab0 <xTaskIncrementTick+0xd8>
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aac:	4a22      	ldr	r2, [pc, #136]	; (8001b38 <xTaskIncrementTick+0x160>)
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4a1f      	ldr	r2, [pc, #124]	; (8001b3c <xTaskIncrementTick+0x164>)
 8001abe:	441a      	add	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	3304      	adds	r3, #4
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	f7fe ff95 	bl	80009f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <xTaskIncrementTick+0x168>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d3b8      	bcc.n	8001a4c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8001ada:	2301      	movs	r3, #1
 8001adc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ade:	e7b5      	b.n	8001a4c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001ae0:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <xTaskIncrementTick+0x168>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ae6:	4915      	ldr	r1, [pc, #84]	; (8001b3c <xTaskIncrementTick+0x164>)
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d901      	bls.n	8001afc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8001af8:	2301      	movs	r3, #1
 8001afa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <xTaskIncrementTick+0x16c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d007      	beq.n	8001b14 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8001b04:	2301      	movs	r3, #1
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	e004      	b.n	8001b14 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <xTaskIncrementTick+0x170>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	4a0d      	ldr	r2, [pc, #52]	; (8001b48 <xTaskIncrementTick+0x170>)
 8001b12:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001b14:	697b      	ldr	r3, [r7, #20]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000cd0 	.word	0x20000cd0
 8001b24:	20000cac 	.word	0x20000cac
 8001b28:	20000c60 	.word	0x20000c60
 8001b2c:	20000c64 	.word	0x20000c64
 8001b30:	20000cc0 	.word	0x20000cc0
 8001b34:	20000cc8 	.word	0x20000cc8
 8001b38:	20000cb0 	.word	0x20000cb0
 8001b3c:	200007d8 	.word	0x200007d8
 8001b40:	200007d4 	.word	0x200007d4
 8001b44:	20000cbc 	.word	0x20000cbc
 8001b48:	20000cb8 	.word	0x20000cb8

08001b4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001b52:	4b28      	ldr	r3, [pc, #160]	; (8001bf4 <vTaskSwitchContext+0xa8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001b5a:	4b27      	ldr	r3, [pc, #156]	; (8001bf8 <vTaskSwitchContext+0xac>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001b60:	e041      	b.n	8001be6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8001b62:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <vTaskSwitchContext+0xac>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b68:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <vTaskSwitchContext+0xb0>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	e010      	b.n	8001b92 <vTaskSwitchContext+0x46>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10a      	bne.n	8001b8c <vTaskSwitchContext+0x40>
	__asm volatile
 8001b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b7a:	f383 8811 	msr	BASEPRI, r3
 8001b7e:	f3bf 8f6f 	isb	sy
 8001b82:	f3bf 8f4f 	dsb	sy
 8001b86:	607b      	str	r3, [r7, #4]
}
 8001b88:	bf00      	nop
 8001b8a:	e7fe      	b.n	8001b8a <vTaskSwitchContext+0x3e>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	491b      	ldr	r1, [pc, #108]	; (8001c00 <vTaskSwitchContext+0xb4>)
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0e4      	beq.n	8001b70 <vTaskSwitchContext+0x24>
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4a13      	ldr	r2, [pc, #76]	; (8001c00 <vTaskSwitchContext+0xb4>)
 8001bb2:	4413      	add	r3, r2
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	3308      	adds	r3, #8
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d104      	bne.n	8001bd6 <vTaskSwitchContext+0x8a>
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	4a09      	ldr	r2, [pc, #36]	; (8001c04 <vTaskSwitchContext+0xb8>)
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	4a06      	ldr	r2, [pc, #24]	; (8001bfc <vTaskSwitchContext+0xb0>)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6013      	str	r3, [r2, #0]
}
 8001be6:	bf00      	nop
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20000cd0 	.word	0x20000cd0
 8001bf8:	20000cbc 	.word	0x20000cbc
 8001bfc:	20000cb0 	.word	0x20000cb0
 8001c00:	200007d8 	.word	0x200007d8
 8001c04:	200007d4 	.word	0x200007d4

08001c08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d10a      	bne.n	8001c2e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8001c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c1c:	f383 8811 	msr	BASEPRI, r3
 8001c20:	f3bf 8f6f 	isb	sy
 8001c24:	f3bf 8f4f 	dsb	sy
 8001c28:	60fb      	str	r3, [r7, #12]
}
 8001c2a:	bf00      	nop
 8001c2c:	e7fe      	b.n	8001c2c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001c2e:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <vTaskPlaceOnEventList+0x44>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	3318      	adds	r3, #24
 8001c34:	4619      	mov	r1, r3
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7fe ff01 	bl	8000a3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	6838      	ldr	r0, [r7, #0]
 8001c40:	f000 fa7c 	bl	800213c <prvAddCurrentTaskToDelayedList>
}
 8001c44:	bf00      	nop
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	200007d4 	.word	0x200007d4

08001c50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10a      	bne.n	8001c78 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8001c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c66:	f383 8811 	msr	BASEPRI, r3
 8001c6a:	f3bf 8f6f 	isb	sy
 8001c6e:	f3bf 8f4f 	dsb	sy
 8001c72:	617b      	str	r3, [r7, #20]
}
 8001c74:	bf00      	nop
 8001c76:	e7fe      	b.n	8001c76 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001c78:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <vTaskPlaceOnEventListRestricted+0x54>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	3318      	adds	r3, #24
 8001c7e:	4619      	mov	r1, r3
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f7fe feb8 	bl	80009f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d002      	beq.n	8001c92 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8001c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c90:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	68b8      	ldr	r0, [r7, #8]
 8001c96:	f000 fa51 	bl	800213c <prvAddCurrentTaskToDelayedList>
	}
 8001c9a:	bf00      	nop
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	200007d4 	.word	0x200007d4

08001ca8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10a      	bne.n	8001cd4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8001cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cc2:	f383 8811 	msr	BASEPRI, r3
 8001cc6:	f3bf 8f6f 	isb	sy
 8001cca:	f3bf 8f4f 	dsb	sy
 8001cce:	60fb      	str	r3, [r7, #12]
}
 8001cd0:	bf00      	nop
 8001cd2:	e7fe      	b.n	8001cd2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	3318      	adds	r3, #24
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe fee9 	bl	8000ab0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001cde:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <xTaskRemoveFromEventList+0xb0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d11d      	bne.n	8001d22 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	3304      	adds	r3, #4
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fee0 	bl	8000ab0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cf4:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <xTaskRemoveFromEventList+0xb4>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d903      	bls.n	8001d04 <xTaskRemoveFromEventList+0x5c>
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d00:	4a16      	ldr	r2, [pc, #88]	; (8001d5c <xTaskRemoveFromEventList+0xb4>)
 8001d02:	6013      	str	r3, [r2, #0]
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4a13      	ldr	r2, [pc, #76]	; (8001d60 <xTaskRemoveFromEventList+0xb8>)
 8001d12:	441a      	add	r2, r3
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	3304      	adds	r3, #4
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	f7fe fe6b 	bl	80009f6 <vListInsertEnd>
 8001d20:	e005      	b.n	8001d2e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	3318      	adds	r3, #24
 8001d26:	4619      	mov	r1, r3
 8001d28:	480e      	ldr	r0, [pc, #56]	; (8001d64 <xTaskRemoveFromEventList+0xbc>)
 8001d2a:	f7fe fe64 	bl	80009f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d32:	4b0d      	ldr	r3, [pc, #52]	; (8001d68 <xTaskRemoveFromEventList+0xc0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d905      	bls.n	8001d48 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001d40:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <xTaskRemoveFromEventList+0xc4>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	e001      	b.n	8001d4c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8001d4c:	697b      	ldr	r3, [r7, #20]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3718      	adds	r7, #24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000cd0 	.word	0x20000cd0
 8001d5c:	20000cb0 	.word	0x20000cb0
 8001d60:	200007d8 	.word	0x200007d8
 8001d64:	20000c68 	.word	0x20000c68
 8001d68:	200007d4 	.word	0x200007d4
 8001d6c:	20000cbc 	.word	0x20000cbc

08001d70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001d78:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <vTaskInternalSetTimeOutState+0x24>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <vTaskInternalSetTimeOutState+0x28>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	605a      	str	r2, [r3, #4]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	20000cc0 	.word	0x20000cc0
 8001d98:	20000cac 	.word	0x20000cac

08001d9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b088      	sub	sp, #32
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d10a      	bne.n	8001dc2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8001dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db0:	f383 8811 	msr	BASEPRI, r3
 8001db4:	f3bf 8f6f 	isb	sy
 8001db8:	f3bf 8f4f 	dsb	sy
 8001dbc:	613b      	str	r3, [r7, #16]
}
 8001dbe:	bf00      	nop
 8001dc0:	e7fe      	b.n	8001dc0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10a      	bne.n	8001dde <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8001dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dcc:	f383 8811 	msr	BASEPRI, r3
 8001dd0:	f3bf 8f6f 	isb	sy
 8001dd4:	f3bf 8f4f 	dsb	sy
 8001dd8:	60fb      	str	r3, [r7, #12]
}
 8001dda:	bf00      	nop
 8001ddc:	e7fe      	b.n	8001ddc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8001dde:	f000 fed9 	bl	8002b94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001de2:	4b1d      	ldr	r3, [pc, #116]	; (8001e58 <xTaskCheckForTimeOut+0xbc>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dfa:	d102      	bne.n	8001e02 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61fb      	str	r3, [r7, #28]
 8001e00:	e023      	b.n	8001e4a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <xTaskCheckForTimeOut+0xc0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d007      	beq.n	8001e1e <xTaskCheckForTimeOut+0x82>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d302      	bcc.n	8001e1e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	61fb      	str	r3, [r7, #28]
 8001e1c:	e015      	b.n	8001e4a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d20b      	bcs.n	8001e40 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	1ad2      	subs	r2, r2, r3
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff ff9b 	bl	8001d70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
 8001e3e:	e004      	b.n	8001e4a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8001e46:	2301      	movs	r3, #1
 8001e48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8001e4a:	f000 fed3 	bl	8002bf4 <vPortExitCritical>

	return xReturn;
 8001e4e:	69fb      	ldr	r3, [r7, #28]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3720      	adds	r7, #32
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20000cac 	.word	0x20000cac
 8001e5c:	20000cc0 	.word	0x20000cc0

08001e60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001e64:	4b03      	ldr	r3, [pc, #12]	; (8001e74 <vTaskMissedYield+0x14>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	601a      	str	r2, [r3, #0]
}
 8001e6a:	bf00      	nop
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	20000cbc 	.word	0x20000cbc

08001e78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001e80:	f000 f852 	bl	8001f28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <prvIdleTask+0x28>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d9f9      	bls.n	8001e80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <prvIdleTask+0x2c>)
 8001e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	f3bf 8f4f 	dsb	sy
 8001e98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001e9c:	e7f0      	b.n	8001e80 <prvIdleTask+0x8>
 8001e9e:	bf00      	nop
 8001ea0:	200007d8 	.word	0x200007d8
 8001ea4:	e000ed04 	.word	0xe000ed04

08001ea8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]
 8001eb2:	e00c      	b.n	8001ece <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <prvInitialiseTaskLists+0x60>)
 8001ec0:	4413      	add	r3, r2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7fe fd6a 	bl	800099c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	607b      	str	r3, [r7, #4]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b37      	cmp	r3, #55	; 0x37
 8001ed2:	d9ef      	bls.n	8001eb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001ed4:	480d      	ldr	r0, [pc, #52]	; (8001f0c <prvInitialiseTaskLists+0x64>)
 8001ed6:	f7fe fd61 	bl	800099c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001eda:	480d      	ldr	r0, [pc, #52]	; (8001f10 <prvInitialiseTaskLists+0x68>)
 8001edc:	f7fe fd5e 	bl	800099c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001ee0:	480c      	ldr	r0, [pc, #48]	; (8001f14 <prvInitialiseTaskLists+0x6c>)
 8001ee2:	f7fe fd5b 	bl	800099c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001ee6:	480c      	ldr	r0, [pc, #48]	; (8001f18 <prvInitialiseTaskLists+0x70>)
 8001ee8:	f7fe fd58 	bl	800099c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001eec:	480b      	ldr	r0, [pc, #44]	; (8001f1c <prvInitialiseTaskLists+0x74>)
 8001eee:	f7fe fd55 	bl	800099c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001ef2:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <prvInitialiseTaskLists+0x78>)
 8001ef4:	4a05      	ldr	r2, [pc, #20]	; (8001f0c <prvInitialiseTaskLists+0x64>)
 8001ef6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <prvInitialiseTaskLists+0x7c>)
 8001efa:	4a05      	ldr	r2, [pc, #20]	; (8001f10 <prvInitialiseTaskLists+0x68>)
 8001efc:	601a      	str	r2, [r3, #0]
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	200007d8 	.word	0x200007d8
 8001f0c:	20000c38 	.word	0x20000c38
 8001f10:	20000c4c 	.word	0x20000c4c
 8001f14:	20000c68 	.word	0x20000c68
 8001f18:	20000c7c 	.word	0x20000c7c
 8001f1c:	20000c94 	.word	0x20000c94
 8001f20:	20000c60 	.word	0x20000c60
 8001f24:	20000c64 	.word	0x20000c64

08001f28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001f2e:	e019      	b.n	8001f64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001f30:	f000 fe30 	bl	8002b94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f34:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <prvCheckTasksWaitingTermination+0x50>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3304      	adds	r3, #4
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe fdb5 	bl	8000ab0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001f46:	4b0d      	ldr	r3, [pc, #52]	; (8001f7c <prvCheckTasksWaitingTermination+0x54>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	4a0b      	ldr	r2, [pc, #44]	; (8001f7c <prvCheckTasksWaitingTermination+0x54>)
 8001f4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001f50:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <prvCheckTasksWaitingTermination+0x58>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	3b01      	subs	r3, #1
 8001f56:	4a0a      	ldr	r2, [pc, #40]	; (8001f80 <prvCheckTasksWaitingTermination+0x58>)
 8001f58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001f5a:	f000 fe4b 	bl	8002bf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f810 	bl	8001f84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <prvCheckTasksWaitingTermination+0x58>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1e1      	bne.n	8001f30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001f6c:	bf00      	nop
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000c7c 	.word	0x20000c7c
 8001f7c:	20000ca8 	.word	0x20000ca8
 8001f80:	20000c90 	.word	0x20000c90

08001f84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d108      	bne.n	8001fa8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 ffe8 	bl	8002f70 <vPortFree>
				vPortFree( pxTCB );
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 ffe5 	bl	8002f70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001fa6:	e018      	b.n	8001fda <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d103      	bne.n	8001fba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 ffdc 	bl	8002f70 <vPortFree>
	}
 8001fb8:	e00f      	b.n	8001fda <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d00a      	beq.n	8001fda <prvDeleteTCB+0x56>
	__asm volatile
 8001fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fc8:	f383 8811 	msr	BASEPRI, r3
 8001fcc:	f3bf 8f6f 	isb	sy
 8001fd0:	f3bf 8f4f 	dsb	sy
 8001fd4:	60fb      	str	r3, [r7, #12]
}
 8001fd6:	bf00      	nop
 8001fd8:	e7fe      	b.n	8001fd8 <prvDeleteTCB+0x54>
	}
 8001fda:	bf00      	nop
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fea:	4b0c      	ldr	r3, [pc, #48]	; (800201c <prvResetNextTaskUnblockTime+0x38>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d104      	bne.n	8001ffe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001ff4:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <prvResetNextTaskUnblockTime+0x3c>)
 8001ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8001ffa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001ffc:	e008      	b.n	8002010 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ffe:	4b07      	ldr	r3, [pc, #28]	; (800201c <prvResetNextTaskUnblockTime+0x38>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	4a04      	ldr	r2, [pc, #16]	; (8002020 <prvResetNextTaskUnblockTime+0x3c>)
 800200e:	6013      	str	r3, [r2, #0]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	20000c60 	.word	0x20000c60
 8002020:	20000cc8 	.word	0x20000cc8

08002024 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800202a:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <xTaskGetSchedulerState+0x34>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d102      	bne.n	8002038 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002032:	2301      	movs	r3, #1
 8002034:	607b      	str	r3, [r7, #4]
 8002036:	e008      	b.n	800204a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002038:	4b08      	ldr	r3, [pc, #32]	; (800205c <xTaskGetSchedulerState+0x38>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d102      	bne.n	8002046 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002040:	2302      	movs	r3, #2
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	e001      	b.n	800204a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002046:	2300      	movs	r3, #0
 8002048:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800204a:	687b      	ldr	r3, [r7, #4]
	}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	20000cb4 	.word	0x20000cb4
 800205c:	20000cd0 	.word	0x20000cd0

08002060 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d056      	beq.n	8002124 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002076:	4b2e      	ldr	r3, [pc, #184]	; (8002130 <xTaskPriorityDisinherit+0xd0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	429a      	cmp	r2, r3
 800207e:	d00a      	beq.n	8002096 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8002080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002084:	f383 8811 	msr	BASEPRI, r3
 8002088:	f3bf 8f6f 	isb	sy
 800208c:	f3bf 8f4f 	dsb	sy
 8002090:	60fb      	str	r3, [r7, #12]
}
 8002092:	bf00      	nop
 8002094:	e7fe      	b.n	8002094 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10a      	bne.n	80020b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800209e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020a2:	f383 8811 	msr	BASEPRI, r3
 80020a6:	f3bf 8f6f 	isb	sy
 80020aa:	f3bf 8f4f 	dsb	sy
 80020ae:	60bb      	str	r3, [r7, #8]
}
 80020b0:	bf00      	nop
 80020b2:	e7fe      	b.n	80020b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020b8:	1e5a      	subs	r2, r3, #1
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d02c      	beq.n	8002124 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d128      	bne.n	8002124 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	3304      	adds	r3, #4
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe fcea 	bl	8000ab0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020f4:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <xTaskPriorityDisinherit+0xd4>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d903      	bls.n	8002104 <xTaskPriorityDisinherit+0xa4>
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002100:	4a0c      	ldr	r2, [pc, #48]	; (8002134 <xTaskPriorityDisinherit+0xd4>)
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4a09      	ldr	r2, [pc, #36]	; (8002138 <xTaskPriorityDisinherit+0xd8>)
 8002112:	441a      	add	r2, r3
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	3304      	adds	r3, #4
 8002118:	4619      	mov	r1, r3
 800211a:	4610      	mov	r0, r2
 800211c:	f7fe fc6b 	bl	80009f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002120:	2301      	movs	r3, #1
 8002122:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002124:	697b      	ldr	r3, [r7, #20]
	}
 8002126:	4618      	mov	r0, r3
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	200007d4 	.word	0x200007d4
 8002134:	20000cb0 	.word	0x20000cb0
 8002138:	200007d8 	.word	0x200007d8

0800213c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002146:	4b21      	ldr	r3, [pc, #132]	; (80021cc <prvAddCurrentTaskToDelayedList+0x90>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800214c:	4b20      	ldr	r3, [pc, #128]	; (80021d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	3304      	adds	r3, #4
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe fcac 	bl	8000ab0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215e:	d10a      	bne.n	8002176 <prvAddCurrentTaskToDelayedList+0x3a>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d007      	beq.n	8002176 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002166:	4b1a      	ldr	r3, [pc, #104]	; (80021d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	3304      	adds	r3, #4
 800216c:	4619      	mov	r1, r3
 800216e:	4819      	ldr	r0, [pc, #100]	; (80021d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8002170:	f7fe fc41 	bl	80009f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002174:	e026      	b.n	80021c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4413      	add	r3, r2
 800217c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800217e:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68ba      	ldr	r2, [r7, #8]
 8002184:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	429a      	cmp	r2, r3
 800218c:	d209      	bcs.n	80021a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800218e:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	3304      	adds	r3, #4
 8002198:	4619      	mov	r1, r3
 800219a:	4610      	mov	r0, r2
 800219c:	f7fe fc4f 	bl	8000a3e <vListInsert>
}
 80021a0:	e010      	b.n	80021c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021a2:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	3304      	adds	r3, #4
 80021ac:	4619      	mov	r1, r3
 80021ae:	4610      	mov	r0, r2
 80021b0:	f7fe fc45 	bl	8000a3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80021b4:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d202      	bcs.n	80021c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80021be:	4a08      	ldr	r2, [pc, #32]	; (80021e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	6013      	str	r3, [r2, #0]
}
 80021c4:	bf00      	nop
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20000cac 	.word	0x20000cac
 80021d0:	200007d4 	.word	0x200007d4
 80021d4:	20000c94 	.word	0x20000c94
 80021d8:	20000c64 	.word	0x20000c64
 80021dc:	20000c60 	.word	0x20000c60
 80021e0:	20000cc8 	.word	0x20000cc8

080021e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08a      	sub	sp, #40	; 0x28
 80021e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80021ee:	f000 fb63 	bl	80028b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80021f2:	4b1c      	ldr	r3, [pc, #112]	; (8002264 <xTimerCreateTimerTask+0x80>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d021      	beq.n	800223e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002202:	1d3a      	adds	r2, r7, #4
 8002204:	f107 0108 	add.w	r1, r7, #8
 8002208:	f107 030c 	add.w	r3, r7, #12
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe fbab 	bl	8000968 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	9202      	str	r2, [sp, #8]
 800221a:	9301      	str	r3, [sp, #4]
 800221c:	2302      	movs	r3, #2
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	2300      	movs	r3, #0
 8002222:	460a      	mov	r2, r1
 8002224:	4910      	ldr	r1, [pc, #64]	; (8002268 <xTimerCreateTimerTask+0x84>)
 8002226:	4811      	ldr	r0, [pc, #68]	; (800226c <xTimerCreateTimerTask+0x88>)
 8002228:	f7ff f958 	bl	80014dc <xTaskCreateStatic>
 800222c:	4603      	mov	r3, r0
 800222e:	4a10      	ldr	r2, [pc, #64]	; (8002270 <xTimerCreateTimerTask+0x8c>)
 8002230:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8002232:	4b0f      	ldr	r3, [pc, #60]	; (8002270 <xTimerCreateTimerTask+0x8c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800223a:	2301      	movs	r3, #1
 800223c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d10a      	bne.n	800225a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8002244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002248:	f383 8811 	msr	BASEPRI, r3
 800224c:	f3bf 8f6f 	isb	sy
 8002250:	f3bf 8f4f 	dsb	sy
 8002254:	613b      	str	r3, [r7, #16]
}
 8002256:	bf00      	nop
 8002258:	e7fe      	b.n	8002258 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800225a:	697b      	ldr	r3, [r7, #20]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	20000d04 	.word	0x20000d04
 8002268:	08003b5c 	.word	0x08003b5c
 800226c:	08002461 	.word	0x08002461
 8002270:	20000d08 	.word	0x20000d08

08002274 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af02      	add	r7, sp, #8
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
 8002280:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8002282:	202c      	movs	r0, #44	; 0x2c
 8002284:	f000 fda8 	bl	8002dd8 <pvPortMalloc>
 8002288:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00d      	beq.n	80022ac <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	9301      	str	r3, [sp, #4]
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 f805 	bl	80022b6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80022ac:	697b      	ldr	r3, [r7, #20]
	}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b086      	sub	sp, #24
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	60f8      	str	r0, [r7, #12]
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	607a      	str	r2, [r7, #4]
 80022c2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10a      	bne.n	80022e0 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80022ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ce:	f383 8811 	msr	BASEPRI, r3
 80022d2:	f3bf 8f6f 	isb	sy
 80022d6:	f3bf 8f4f 	dsb	sy
 80022da:	617b      	str	r3, [r7, #20]
}
 80022dc:	bf00      	nop
 80022de:	e7fe      	b.n	80022de <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d01e      	beq.n	8002324 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80022e6:	f000 fae7 	bl	80028b8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	6a3a      	ldr	r2, [r7, #32]
 8002300:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	3304      	adds	r3, #4
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe fb68 	bl	80009dc <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d008      	beq.n	8002324 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002318:	f043 0304 	orr.w	r3, r3, #4
 800231c:	b2da      	uxtb	r2, r3
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8002324:	bf00      	nop
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08a      	sub	sp, #40	; 0x28
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
 8002338:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800233a:	2300      	movs	r3, #0
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10a      	bne.n	800235a <xTimerGenericCommand+0x2e>
	__asm volatile
 8002344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002348:	f383 8811 	msr	BASEPRI, r3
 800234c:	f3bf 8f6f 	isb	sy
 8002350:	f3bf 8f4f 	dsb	sy
 8002354:	623b      	str	r3, [r7, #32]
}
 8002356:	bf00      	nop
 8002358:	e7fe      	b.n	8002358 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800235a:	4b1a      	ldr	r3, [pc, #104]	; (80023c4 <xTimerGenericCommand+0x98>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d02a      	beq.n	80023b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2b05      	cmp	r3, #5
 8002372:	dc18      	bgt.n	80023a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002374:	f7ff fe56 	bl	8002024 <xTaskGetSchedulerState>
 8002378:	4603      	mov	r3, r0
 800237a:	2b02      	cmp	r3, #2
 800237c:	d109      	bne.n	8002392 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800237e:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <xTimerGenericCommand+0x98>)
 8002380:	6818      	ldr	r0, [r3, #0]
 8002382:	f107 0110 	add.w	r1, r7, #16
 8002386:	2300      	movs	r3, #0
 8002388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800238a:	f7fe fcbf 	bl	8000d0c <xQueueGenericSend>
 800238e:	6278      	str	r0, [r7, #36]	; 0x24
 8002390:	e012      	b.n	80023b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002392:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <xTimerGenericCommand+0x98>)
 8002394:	6818      	ldr	r0, [r3, #0]
 8002396:	f107 0110 	add.w	r1, r7, #16
 800239a:	2300      	movs	r3, #0
 800239c:	2200      	movs	r2, #0
 800239e:	f7fe fcb5 	bl	8000d0c <xQueueGenericSend>
 80023a2:	6278      	str	r0, [r7, #36]	; 0x24
 80023a4:	e008      	b.n	80023b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80023a6:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <xTimerGenericCommand+0x98>)
 80023a8:	6818      	ldr	r0, [r3, #0]
 80023aa:	f107 0110 	add.w	r1, r7, #16
 80023ae:	2300      	movs	r3, #0
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	f7fe fda9 	bl	8000f08 <xQueueGenericSendFromISR>
 80023b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3728      	adds	r7, #40	; 0x28
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20000d04 	.word	0x20000d04

080023c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b088      	sub	sp, #32
 80023cc:	af02      	add	r7, sp, #8
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80023d2:	4b22      	ldr	r3, [pc, #136]	; (800245c <prvProcessExpiredTimer+0x94>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	3304      	adds	r3, #4
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe fb65 	bl	8000ab0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d022      	beq.n	800243a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	699a      	ldr	r2, [r3, #24]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	18d1      	adds	r1, r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	6978      	ldr	r0, [r7, #20]
 8002402:	f000 f8d1 	bl	80025a8 <prvInsertTimerInActiveList>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d01f      	beq.n	800244c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800240c:	2300      	movs	r3, #0
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	2300      	movs	r3, #0
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	2100      	movs	r1, #0
 8002416:	6978      	ldr	r0, [r7, #20]
 8002418:	f7ff ff88 	bl	800232c <xTimerGenericCommand>
 800241c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d113      	bne.n	800244c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8002424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002428:	f383 8811 	msr	BASEPRI, r3
 800242c:	f3bf 8f6f 	isb	sy
 8002430:	f3bf 8f4f 	dsb	sy
 8002434:	60fb      	str	r3, [r7, #12]
}
 8002436:	bf00      	nop
 8002438:	e7fe      	b.n	8002438 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002440:	f023 0301 	bic.w	r3, r3, #1
 8002444:	b2da      	uxtb	r2, r3
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	6978      	ldr	r0, [r7, #20]
 8002452:	4798      	blx	r3
}
 8002454:	bf00      	nop
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	20000cfc 	.word	0x20000cfc

08002460 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002468:	f107 0308 	add.w	r3, r7, #8
 800246c:	4618      	mov	r0, r3
 800246e:	f000 f857 	bl	8002520 <prvGetNextExpireTime>
 8002472:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	4619      	mov	r1, r3
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 f803 	bl	8002484 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800247e:	f000 f8d5 	bl	800262c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002482:	e7f1      	b.n	8002468 <prvTimerTask+0x8>

08002484 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800248e:	f7ff f9e7 	bl	8001860 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002492:	f107 0308 	add.w	r3, r7, #8
 8002496:	4618      	mov	r0, r3
 8002498:	f000 f866 	bl	8002568 <prvSampleTimeNow>
 800249c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d130      	bne.n	8002506 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10a      	bne.n	80024c0 <prvProcessTimerOrBlockTask+0x3c>
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d806      	bhi.n	80024c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80024b2:	f7ff f9e3 	bl	800187c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80024b6:	68f9      	ldr	r1, [r7, #12]
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7ff ff85 	bl	80023c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80024be:	e024      	b.n	800250a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d008      	beq.n	80024d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80024c6:	4b13      	ldr	r3, [pc, #76]	; (8002514 <prvProcessTimerOrBlockTask+0x90>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <prvProcessTimerOrBlockTask+0x50>
 80024d0:	2301      	movs	r3, #1
 80024d2:	e000      	b.n	80024d6 <prvProcessTimerOrBlockTask+0x52>
 80024d4:	2300      	movs	r3, #0
 80024d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80024d8:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <prvProcessTimerOrBlockTask+0x94>)
 80024da:	6818      	ldr	r0, [r3, #0]
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	4619      	mov	r1, r3
 80024e6:	f7fe ffc5 	bl	8001474 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80024ea:	f7ff f9c7 	bl	800187c <xTaskResumeAll>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10a      	bne.n	800250a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80024f4:	4b09      	ldr	r3, [pc, #36]	; (800251c <prvProcessTimerOrBlockTask+0x98>)
 80024f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	f3bf 8f4f 	dsb	sy
 8002500:	f3bf 8f6f 	isb	sy
}
 8002504:	e001      	b.n	800250a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002506:	f7ff f9b9 	bl	800187c <xTaskResumeAll>
}
 800250a:	bf00      	nop
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000d00 	.word	0x20000d00
 8002518:	20000d04 	.word	0x20000d04
 800251c:	e000ed04 	.word	0xe000ed04

08002520 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002528:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <prvGetNextExpireTime+0x44>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <prvGetNextExpireTime+0x16>
 8002532:	2201      	movs	r2, #1
 8002534:	e000      	b.n	8002538 <prvGetNextExpireTime+0x18>
 8002536:	2200      	movs	r2, #0
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d105      	bne.n	8002550 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002544:	4b07      	ldr	r3, [pc, #28]	; (8002564 <prvGetNextExpireTime+0x44>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	e001      	b.n	8002554 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002554:	68fb      	ldr	r3, [r7, #12]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	20000cfc 	.word	0x20000cfc

08002568 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002570:	f7ff fa22 	bl	80019b8 <xTaskGetTickCount>
 8002574:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002576:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <prvSampleTimeNow+0x3c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	429a      	cmp	r2, r3
 800257e:	d205      	bcs.n	800258c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002580:	f000 f936 	bl	80027f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	e002      	b.n	8002592 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002592:	4a04      	ldr	r2, [pc, #16]	; (80025a4 <prvSampleTimeNow+0x3c>)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002598:	68fb      	ldr	r3, [r7, #12]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20000d0c 	.word	0x20000d0c

080025a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
 80025b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d812      	bhi.n	80025f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	1ad2      	subs	r2, r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d302      	bcc.n	80025e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80025dc:	2301      	movs	r3, #1
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	e01b      	b.n	800261a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80025e2:	4b10      	ldr	r3, [pc, #64]	; (8002624 <prvInsertTimerInActiveList+0x7c>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	3304      	adds	r3, #4
 80025ea:	4619      	mov	r1, r3
 80025ec:	4610      	mov	r0, r2
 80025ee:	f7fe fa26 	bl	8000a3e <vListInsert>
 80025f2:	e012      	b.n	800261a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d206      	bcs.n	800260a <prvInsertTimerInActiveList+0x62>
 80025fc:	68ba      	ldr	r2, [r7, #8]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d302      	bcc.n	800260a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002604:	2301      	movs	r3, #1
 8002606:	617b      	str	r3, [r7, #20]
 8002608:	e007      	b.n	800261a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800260a:	4b07      	ldr	r3, [pc, #28]	; (8002628 <prvInsertTimerInActiveList+0x80>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	3304      	adds	r3, #4
 8002612:	4619      	mov	r1, r3
 8002614:	4610      	mov	r0, r2
 8002616:	f7fe fa12 	bl	8000a3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800261a:	697b      	ldr	r3, [r7, #20]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20000d00 	.word	0x20000d00
 8002628:	20000cfc 	.word	0x20000cfc

0800262c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08e      	sub	sp, #56	; 0x38
 8002630:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002632:	e0ca      	b.n	80027ca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	da18      	bge.n	800266c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800263a:	1d3b      	adds	r3, r7, #4
 800263c:	3304      	adds	r3, #4
 800263e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8002640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10a      	bne.n	800265c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8002646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264a:	f383 8811 	msr	BASEPRI, r3
 800264e:	f3bf 8f6f 	isb	sy
 8002652:	f3bf 8f4f 	dsb	sy
 8002656:	61fb      	str	r3, [r7, #28]
}
 8002658:	bf00      	nop
 800265a:	e7fe      	b.n	800265a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800265c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002662:	6850      	ldr	r0, [r2, #4]
 8002664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002666:	6892      	ldr	r2, [r2, #8]
 8002668:	4611      	mov	r1, r2
 800266a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	f2c0 80aa 	blt.w	80027c8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d004      	beq.n	800268a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002682:	3304      	adds	r3, #4
 8002684:	4618      	mov	r0, r3
 8002686:	f7fe fa13 	bl	8000ab0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800268a:	463b      	mov	r3, r7
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff ff6b 	bl	8002568 <prvSampleTimeNow>
 8002692:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b09      	cmp	r3, #9
 8002698:	f200 8097 	bhi.w	80027ca <prvProcessReceivedCommands+0x19e>
 800269c:	a201      	add	r2, pc, #4	; (adr r2, 80026a4 <prvProcessReceivedCommands+0x78>)
 800269e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a2:	bf00      	nop
 80026a4:	080026cd 	.word	0x080026cd
 80026a8:	080026cd 	.word	0x080026cd
 80026ac:	080026cd 	.word	0x080026cd
 80026b0:	08002741 	.word	0x08002741
 80026b4:	08002755 	.word	0x08002755
 80026b8:	0800279f 	.word	0x0800279f
 80026bc:	080026cd 	.word	0x080026cd
 80026c0:	080026cd 	.word	0x080026cd
 80026c4:	08002741 	.word	0x08002741
 80026c8:	08002755 	.word	0x08002755
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80026cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	18d1      	adds	r1, r2, r3
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026ec:	f7ff ff5c 	bl	80025a8 <prvInsertTimerInActiveList>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d069      	beq.n	80027ca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80026f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80026fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002700:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	d05e      	beq.n	80027ca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	441a      	add	r2, r3
 8002714:	2300      	movs	r3, #0
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	2300      	movs	r3, #0
 800271a:	2100      	movs	r1, #0
 800271c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800271e:	f7ff fe05 	bl	800232c <xTimerGenericCommand>
 8002722:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d14f      	bne.n	80027ca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800272a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800272e:	f383 8811 	msr	BASEPRI, r3
 8002732:	f3bf 8f6f 	isb	sy
 8002736:	f3bf 8f4f 	dsb	sy
 800273a:	61bb      	str	r3, [r7, #24]
}
 800273c:	bf00      	nop
 800273e:	e7fe      	b.n	800273e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002742:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002746:	f023 0301 	bic.w	r3, r3, #1
 800274a:	b2da      	uxtb	r2, r3
 800274c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8002752:	e03a      	b.n	80027ca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002756:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800275a:	f043 0301 	orr.w	r3, r3, #1
 800275e:	b2da      	uxtb	r2, r3
 8002760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002762:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800276c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10a      	bne.n	800278a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8002774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002778:	f383 8811 	msr	BASEPRI, r3
 800277c:	f3bf 8f6f 	isb	sy
 8002780:	f3bf 8f4f 	dsb	sy
 8002784:	617b      	str	r3, [r7, #20]
}
 8002786:	bf00      	nop
 8002788:	e7fe      	b.n	8002788 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800278a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278c:	699a      	ldr	r2, [r3, #24]
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	18d1      	adds	r1, r2, r3
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002796:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002798:	f7ff ff06 	bl	80025a8 <prvInsertTimerInActiveList>
					break;
 800279c:	e015      	b.n	80027ca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800279e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d103      	bne.n	80027b4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80027ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027ae:	f000 fbdf 	bl	8002f70 <vPortFree>
 80027b2:	e00a      	b.n	80027ca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80027b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027ba:	f023 0301 	bic.w	r3, r3, #1
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80027c6:	e000      	b.n	80027ca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80027c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80027ca:	4b08      	ldr	r3, [pc, #32]	; (80027ec <prvProcessReceivedCommands+0x1c0>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	1d39      	adds	r1, r7, #4
 80027d0:	2200      	movs	r2, #0
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fe fc34 	bl	8001040 <xQueueReceive>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f47f af2a 	bne.w	8002634 <prvProcessReceivedCommands+0x8>
	}
}
 80027e0:	bf00      	nop
 80027e2:	bf00      	nop
 80027e4:	3730      	adds	r7, #48	; 0x30
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000d04 	.word	0x20000d04

080027f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80027f6:	e048      	b.n	800288a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80027f8:	4b2d      	ldr	r3, [pc, #180]	; (80028b0 <prvSwitchTimerLists+0xc0>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002802:	4b2b      	ldr	r3, [pc, #172]	; (80028b0 <prvSwitchTimerLists+0xc0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	3304      	adds	r3, #4
 8002810:	4618      	mov	r0, r3
 8002812:	f7fe f94d 	bl	8000ab0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d02e      	beq.n	800288a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	4413      	add	r3, r2
 8002834:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	429a      	cmp	r2, r3
 800283c:	d90e      	bls.n	800285c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800284a:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <prvSwitchTimerLists+0xc0>)
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	3304      	adds	r3, #4
 8002852:	4619      	mov	r1, r3
 8002854:	4610      	mov	r0, r2
 8002856:	f7fe f8f2 	bl	8000a3e <vListInsert>
 800285a:	e016      	b.n	800288a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800285c:	2300      	movs	r3, #0
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	2300      	movs	r3, #0
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	2100      	movs	r1, #0
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f7ff fd60 	bl	800232c <xTimerGenericCommand>
 800286c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10a      	bne.n	800288a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8002874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002878:	f383 8811 	msr	BASEPRI, r3
 800287c:	f3bf 8f6f 	isb	sy
 8002880:	f3bf 8f4f 	dsb	sy
 8002884:	603b      	str	r3, [r7, #0]
}
 8002886:	bf00      	nop
 8002888:	e7fe      	b.n	8002888 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800288a:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <prvSwitchTimerLists+0xc0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1b1      	bne.n	80027f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002894:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <prvSwitchTimerLists+0xc0>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800289a:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <prvSwitchTimerLists+0xc4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a04      	ldr	r2, [pc, #16]	; (80028b0 <prvSwitchTimerLists+0xc0>)
 80028a0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80028a2:	4a04      	ldr	r2, [pc, #16]	; (80028b4 <prvSwitchTimerLists+0xc4>)
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	6013      	str	r3, [r2, #0]
}
 80028a8:	bf00      	nop
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	20000cfc 	.word	0x20000cfc
 80028b4:	20000d00 	.word	0x20000d00

080028b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80028be:	f000 f969 	bl	8002b94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80028c2:	4b15      	ldr	r3, [pc, #84]	; (8002918 <prvCheckForValidListAndQueue+0x60>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d120      	bne.n	800290c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80028ca:	4814      	ldr	r0, [pc, #80]	; (800291c <prvCheckForValidListAndQueue+0x64>)
 80028cc:	f7fe f866 	bl	800099c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80028d0:	4813      	ldr	r0, [pc, #76]	; (8002920 <prvCheckForValidListAndQueue+0x68>)
 80028d2:	f7fe f863 	bl	800099c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80028d6:	4b13      	ldr	r3, [pc, #76]	; (8002924 <prvCheckForValidListAndQueue+0x6c>)
 80028d8:	4a10      	ldr	r2, [pc, #64]	; (800291c <prvCheckForValidListAndQueue+0x64>)
 80028da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80028dc:	4b12      	ldr	r3, [pc, #72]	; (8002928 <prvCheckForValidListAndQueue+0x70>)
 80028de:	4a10      	ldr	r2, [pc, #64]	; (8002920 <prvCheckForValidListAndQueue+0x68>)
 80028e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80028e2:	2300      	movs	r3, #0
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	4b11      	ldr	r3, [pc, #68]	; (800292c <prvCheckForValidListAndQueue+0x74>)
 80028e8:	4a11      	ldr	r2, [pc, #68]	; (8002930 <prvCheckForValidListAndQueue+0x78>)
 80028ea:	2110      	movs	r1, #16
 80028ec:	200a      	movs	r0, #10
 80028ee:	f7fe f971 	bl	8000bd4 <xQueueGenericCreateStatic>
 80028f2:	4603      	mov	r3, r0
 80028f4:	4a08      	ldr	r2, [pc, #32]	; (8002918 <prvCheckForValidListAndQueue+0x60>)
 80028f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80028f8:	4b07      	ldr	r3, [pc, #28]	; (8002918 <prvCheckForValidListAndQueue+0x60>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d005      	beq.n	800290c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <prvCheckForValidListAndQueue+0x60>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	490b      	ldr	r1, [pc, #44]	; (8002934 <prvCheckForValidListAndQueue+0x7c>)
 8002906:	4618      	mov	r0, r3
 8002908:	f7fe fd8a 	bl	8001420 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800290c:	f000 f972 	bl	8002bf4 <vPortExitCritical>
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	20000d04 	.word	0x20000d04
 800291c:	20000cd4 	.word	0x20000cd4
 8002920:	20000ce8 	.word	0x20000ce8
 8002924:	20000cfc 	.word	0x20000cfc
 8002928:	20000d00 	.word	0x20000d00
 800292c:	20000db0 	.word	0x20000db0
 8002930:	20000d10 	.word	0x20000d10
 8002934:	08003b64 	.word	0x08003b64

08002938 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	3b04      	subs	r3, #4
 8002948:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002950:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	3b04      	subs	r3, #4
 8002956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f023 0201 	bic.w	r2, r3, #1
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	3b04      	subs	r3, #4
 8002966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002968:	4a0c      	ldr	r2, [pc, #48]	; (800299c <pxPortInitialiseStack+0x64>)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	3b14      	subs	r3, #20
 8002972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	3b04      	subs	r3, #4
 800297e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f06f 0202 	mvn.w	r2, #2
 8002986:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	3b20      	subs	r3, #32
 800298c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800298e:	68fb      	ldr	r3, [r7, #12]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	080029a1 	.word	0x080029a1

080029a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80029a6:	2300      	movs	r3, #0
 80029a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80029aa:	4b12      	ldr	r3, [pc, #72]	; (80029f4 <prvTaskExitError+0x54>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b2:	d00a      	beq.n	80029ca <prvTaskExitError+0x2a>
	__asm volatile
 80029b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b8:	f383 8811 	msr	BASEPRI, r3
 80029bc:	f3bf 8f6f 	isb	sy
 80029c0:	f3bf 8f4f 	dsb	sy
 80029c4:	60fb      	str	r3, [r7, #12]
}
 80029c6:	bf00      	nop
 80029c8:	e7fe      	b.n	80029c8 <prvTaskExitError+0x28>
	__asm volatile
 80029ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ce:	f383 8811 	msr	BASEPRI, r3
 80029d2:	f3bf 8f6f 	isb	sy
 80029d6:	f3bf 8f4f 	dsb	sy
 80029da:	60bb      	str	r3, [r7, #8]
}
 80029dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80029de:	bf00      	nop
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0fc      	beq.n	80029e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80029e6:	bf00      	nop
 80029e8:	bf00      	nop
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	20000004 	.word	0x20000004
	...

08002a00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002a00:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <pxCurrentTCBConst2>)
 8002a02:	6819      	ldr	r1, [r3, #0]
 8002a04:	6808      	ldr	r0, [r1, #0]
 8002a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a0a:	f380 8809 	msr	PSP, r0
 8002a0e:	f3bf 8f6f 	isb	sy
 8002a12:	f04f 0000 	mov.w	r0, #0
 8002a16:	f380 8811 	msr	BASEPRI, r0
 8002a1a:	4770      	bx	lr
 8002a1c:	f3af 8000 	nop.w

08002a20 <pxCurrentTCBConst2>:
 8002a20:	200007d4 	.word	0x200007d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002a24:	bf00      	nop
 8002a26:	bf00      	nop

08002a28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002a28:	4808      	ldr	r0, [pc, #32]	; (8002a4c <prvPortStartFirstTask+0x24>)
 8002a2a:	6800      	ldr	r0, [r0, #0]
 8002a2c:	6800      	ldr	r0, [r0, #0]
 8002a2e:	f380 8808 	msr	MSP, r0
 8002a32:	f04f 0000 	mov.w	r0, #0
 8002a36:	f380 8814 	msr	CONTROL, r0
 8002a3a:	b662      	cpsie	i
 8002a3c:	b661      	cpsie	f
 8002a3e:	f3bf 8f4f 	dsb	sy
 8002a42:	f3bf 8f6f 	isb	sy
 8002a46:	df00      	svc	0
 8002a48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002a4a:	bf00      	nop
 8002a4c:	e000ed08 	.word	0xe000ed08

08002a50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002a56:	4b46      	ldr	r3, [pc, #280]	; (8002b70 <xPortStartScheduler+0x120>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a46      	ldr	r2, [pc, #280]	; (8002b74 <xPortStartScheduler+0x124>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d10a      	bne.n	8002a76 <xPortStartScheduler+0x26>
	__asm volatile
 8002a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a64:	f383 8811 	msr	BASEPRI, r3
 8002a68:	f3bf 8f6f 	isb	sy
 8002a6c:	f3bf 8f4f 	dsb	sy
 8002a70:	613b      	str	r3, [r7, #16]
}
 8002a72:	bf00      	nop
 8002a74:	e7fe      	b.n	8002a74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002a76:	4b3e      	ldr	r3, [pc, #248]	; (8002b70 <xPortStartScheduler+0x120>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a3f      	ldr	r2, [pc, #252]	; (8002b78 <xPortStartScheduler+0x128>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d10a      	bne.n	8002a96 <xPortStartScheduler+0x46>
	__asm volatile
 8002a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a84:	f383 8811 	msr	BASEPRI, r3
 8002a88:	f3bf 8f6f 	isb	sy
 8002a8c:	f3bf 8f4f 	dsb	sy
 8002a90:	60fb      	str	r3, [r7, #12]
}
 8002a92:	bf00      	nop
 8002a94:	e7fe      	b.n	8002a94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002a96:	4b39      	ldr	r3, [pc, #228]	; (8002b7c <xPortStartScheduler+0x12c>)
 8002a98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	22ff      	movs	r2, #255	; 0xff
 8002aa6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002ab0:	78fb      	ldrb	r3, [r7, #3]
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	4b31      	ldr	r3, [pc, #196]	; (8002b80 <xPortStartScheduler+0x130>)
 8002abc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002abe:	4b31      	ldr	r3, [pc, #196]	; (8002b84 <xPortStartScheduler+0x134>)
 8002ac0:	2207      	movs	r2, #7
 8002ac2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ac4:	e009      	b.n	8002ada <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002ac6:	4b2f      	ldr	r3, [pc, #188]	; (8002b84 <xPortStartScheduler+0x134>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	4a2d      	ldr	r2, [pc, #180]	; (8002b84 <xPortStartScheduler+0x134>)
 8002ace:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ad0:	78fb      	ldrb	r3, [r7, #3]
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ada:	78fb      	ldrb	r3, [r7, #3]
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae2:	2b80      	cmp	r3, #128	; 0x80
 8002ae4:	d0ef      	beq.n	8002ac6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002ae6:	4b27      	ldr	r3, [pc, #156]	; (8002b84 <xPortStartScheduler+0x134>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f1c3 0307 	rsb	r3, r3, #7
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d00a      	beq.n	8002b08 <xPortStartScheduler+0xb8>
	__asm volatile
 8002af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af6:	f383 8811 	msr	BASEPRI, r3
 8002afa:	f3bf 8f6f 	isb	sy
 8002afe:	f3bf 8f4f 	dsb	sy
 8002b02:	60bb      	str	r3, [r7, #8]
}
 8002b04:	bf00      	nop
 8002b06:	e7fe      	b.n	8002b06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002b08:	4b1e      	ldr	r3, [pc, #120]	; (8002b84 <xPortStartScheduler+0x134>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	021b      	lsls	r3, r3, #8
 8002b0e:	4a1d      	ldr	r2, [pc, #116]	; (8002b84 <xPortStartScheduler+0x134>)
 8002b10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002b12:	4b1c      	ldr	r3, [pc, #112]	; (8002b84 <xPortStartScheduler+0x134>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b1a:	4a1a      	ldr	r2, [pc, #104]	; (8002b84 <xPortStartScheduler+0x134>)
 8002b1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002b26:	4b18      	ldr	r3, [pc, #96]	; (8002b88 <xPortStartScheduler+0x138>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a17      	ldr	r2, [pc, #92]	; (8002b88 <xPortStartScheduler+0x138>)
 8002b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002b32:	4b15      	ldr	r3, [pc, #84]	; (8002b88 <xPortStartScheduler+0x138>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a14      	ldr	r2, [pc, #80]	; (8002b88 <xPortStartScheduler+0x138>)
 8002b38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002b3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002b3e:	f000 f8dd 	bl	8002cfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002b42:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <xPortStartScheduler+0x13c>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002b48:	f000 f8fc 	bl	8002d44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002b4c:	4b10      	ldr	r3, [pc, #64]	; (8002b90 <xPortStartScheduler+0x140>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a0f      	ldr	r2, [pc, #60]	; (8002b90 <xPortStartScheduler+0x140>)
 8002b52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002b56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002b58:	f7ff ff66 	bl	8002a28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002b5c:	f7fe fff6 	bl	8001b4c <vTaskSwitchContext>
	prvTaskExitError();
 8002b60:	f7ff ff1e 	bl	80029a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	e000ed00 	.word	0xe000ed00
 8002b74:	410fc271 	.word	0x410fc271
 8002b78:	410fc270 	.word	0x410fc270
 8002b7c:	e000e400 	.word	0xe000e400
 8002b80:	20000e00 	.word	0x20000e00
 8002b84:	20000e04 	.word	0x20000e04
 8002b88:	e000ed20 	.word	0xe000ed20
 8002b8c:	20000004 	.word	0x20000004
 8002b90:	e000ef34 	.word	0xe000ef34

08002b94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
	__asm volatile
 8002b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9e:	f383 8811 	msr	BASEPRI, r3
 8002ba2:	f3bf 8f6f 	isb	sy
 8002ba6:	f3bf 8f4f 	dsb	sy
 8002baa:	607b      	str	r3, [r7, #4]
}
 8002bac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002bae:	4b0f      	ldr	r3, [pc, #60]	; (8002bec <vPortEnterCritical+0x58>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	4a0d      	ldr	r2, [pc, #52]	; (8002bec <vPortEnterCritical+0x58>)
 8002bb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002bb8:	4b0c      	ldr	r3, [pc, #48]	; (8002bec <vPortEnterCritical+0x58>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d10f      	bne.n	8002be0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <vPortEnterCritical+0x5c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00a      	beq.n	8002be0 <vPortEnterCritical+0x4c>
	__asm volatile
 8002bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bce:	f383 8811 	msr	BASEPRI, r3
 8002bd2:	f3bf 8f6f 	isb	sy
 8002bd6:	f3bf 8f4f 	dsb	sy
 8002bda:	603b      	str	r3, [r7, #0]
}
 8002bdc:	bf00      	nop
 8002bde:	e7fe      	b.n	8002bde <vPortEnterCritical+0x4a>
	}
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	20000004 	.word	0x20000004
 8002bf0:	e000ed04 	.word	0xe000ed04

08002bf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002bfa:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <vPortExitCritical+0x50>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10a      	bne.n	8002c18 <vPortExitCritical+0x24>
	__asm volatile
 8002c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c06:	f383 8811 	msr	BASEPRI, r3
 8002c0a:	f3bf 8f6f 	isb	sy
 8002c0e:	f3bf 8f4f 	dsb	sy
 8002c12:	607b      	str	r3, [r7, #4]
}
 8002c14:	bf00      	nop
 8002c16:	e7fe      	b.n	8002c16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002c18:	4b0a      	ldr	r3, [pc, #40]	; (8002c44 <vPortExitCritical+0x50>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	4a09      	ldr	r2, [pc, #36]	; (8002c44 <vPortExitCritical+0x50>)
 8002c20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002c22:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <vPortExitCritical+0x50>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d105      	bne.n	8002c36 <vPortExitCritical+0x42>
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	f383 8811 	msr	BASEPRI, r3
}
 8002c34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	20000004 	.word	0x20000004
	...

08002c50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002c50:	f3ef 8009 	mrs	r0, PSP
 8002c54:	f3bf 8f6f 	isb	sy
 8002c58:	4b15      	ldr	r3, [pc, #84]	; (8002cb0 <pxCurrentTCBConst>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	f01e 0f10 	tst.w	lr, #16
 8002c60:	bf08      	it	eq
 8002c62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002c66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c6a:	6010      	str	r0, [r2, #0]
 8002c6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002c70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002c74:	f380 8811 	msr	BASEPRI, r0
 8002c78:	f3bf 8f4f 	dsb	sy
 8002c7c:	f3bf 8f6f 	isb	sy
 8002c80:	f7fe ff64 	bl	8001b4c <vTaskSwitchContext>
 8002c84:	f04f 0000 	mov.w	r0, #0
 8002c88:	f380 8811 	msr	BASEPRI, r0
 8002c8c:	bc09      	pop	{r0, r3}
 8002c8e:	6819      	ldr	r1, [r3, #0]
 8002c90:	6808      	ldr	r0, [r1, #0]
 8002c92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c96:	f01e 0f10 	tst.w	lr, #16
 8002c9a:	bf08      	it	eq
 8002c9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002ca0:	f380 8809 	msr	PSP, r0
 8002ca4:	f3bf 8f6f 	isb	sy
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	f3af 8000 	nop.w

08002cb0 <pxCurrentTCBConst>:
 8002cb0:	200007d4 	.word	0x200007d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002cb4:	bf00      	nop
 8002cb6:	bf00      	nop

08002cb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
	__asm volatile
 8002cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc2:	f383 8811 	msr	BASEPRI, r3
 8002cc6:	f3bf 8f6f 	isb	sy
 8002cca:	f3bf 8f4f 	dsb	sy
 8002cce:	607b      	str	r3, [r7, #4]
}
 8002cd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002cd2:	f7fe fe81 	bl	80019d8 <xTaskIncrementTick>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002cdc:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <xPortSysTickHandler+0x40>)
 8002cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	f383 8811 	msr	BASEPRI, r3
}
 8002cee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002cf0:	bf00      	nop
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	e000ed04 	.word	0xe000ed04

08002cfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <vPortSetupTimerInterrupt+0x34>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002d06:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <vPortSetupTimerInterrupt+0x38>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002d0c:	4b0a      	ldr	r3, [pc, #40]	; (8002d38 <vPortSetupTimerInterrupt+0x3c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a0a      	ldr	r2, [pc, #40]	; (8002d3c <vPortSetupTimerInterrupt+0x40>)
 8002d12:	fba2 2303 	umull	r2, r3, r2, r3
 8002d16:	099b      	lsrs	r3, r3, #6
 8002d18:	4a09      	ldr	r2, [pc, #36]	; (8002d40 <vPortSetupTimerInterrupt+0x44>)
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002d1e:	4b04      	ldr	r3, [pc, #16]	; (8002d30 <vPortSetupTimerInterrupt+0x34>)
 8002d20:	2207      	movs	r2, #7
 8002d22:	601a      	str	r2, [r3, #0]
}
 8002d24:	bf00      	nop
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	e000e010 	.word	0xe000e010
 8002d34:	e000e018 	.word	0xe000e018
 8002d38:	20000000 	.word	0x20000000
 8002d3c:	10624dd3 	.word	0x10624dd3
 8002d40:	e000e014 	.word	0xe000e014

08002d44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002d44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002d54 <vPortEnableVFP+0x10>
 8002d48:	6801      	ldr	r1, [r0, #0]
 8002d4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002d4e:	6001      	str	r1, [r0, #0]
 8002d50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002d52:	bf00      	nop
 8002d54:	e000ed88 	.word	0xe000ed88

08002d58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002d5e:	f3ef 8305 	mrs	r3, IPSR
 8002d62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2b0f      	cmp	r3, #15
 8002d68:	d914      	bls.n	8002d94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002d6a:	4a17      	ldr	r2, [pc, #92]	; (8002dc8 <vPortValidateInterruptPriority+0x70>)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4413      	add	r3, r2
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002d74:	4b15      	ldr	r3, [pc, #84]	; (8002dcc <vPortValidateInterruptPriority+0x74>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	7afa      	ldrb	r2, [r7, #11]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d20a      	bcs.n	8002d94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8002d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d82:	f383 8811 	msr	BASEPRI, r3
 8002d86:	f3bf 8f6f 	isb	sy
 8002d8a:	f3bf 8f4f 	dsb	sy
 8002d8e:	607b      	str	r3, [r7, #4]
}
 8002d90:	bf00      	nop
 8002d92:	e7fe      	b.n	8002d92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002d94:	4b0e      	ldr	r3, [pc, #56]	; (8002dd0 <vPortValidateInterruptPriority+0x78>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d9c:	4b0d      	ldr	r3, [pc, #52]	; (8002dd4 <vPortValidateInterruptPriority+0x7c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d90a      	bls.n	8002dba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8002da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da8:	f383 8811 	msr	BASEPRI, r3
 8002dac:	f3bf 8f6f 	isb	sy
 8002db0:	f3bf 8f4f 	dsb	sy
 8002db4:	603b      	str	r3, [r7, #0]
}
 8002db6:	bf00      	nop
 8002db8:	e7fe      	b.n	8002db8 <vPortValidateInterruptPriority+0x60>
	}
 8002dba:	bf00      	nop
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	e000e3f0 	.word	0xe000e3f0
 8002dcc:	20000e00 	.word	0x20000e00
 8002dd0:	e000ed0c 	.word	0xe000ed0c
 8002dd4:	20000e04 	.word	0x20000e04

08002dd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08a      	sub	sp, #40	; 0x28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002de4:	f7fe fd3c 	bl	8001860 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002de8:	4b5b      	ldr	r3, [pc, #364]	; (8002f58 <pvPortMalloc+0x180>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002df0:	f000 f920 	bl	8003034 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002df4:	4b59      	ldr	r3, [pc, #356]	; (8002f5c <pvPortMalloc+0x184>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f040 8093 	bne.w	8002f28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d01d      	beq.n	8002e44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002e08:	2208      	movs	r2, #8
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d014      	beq.n	8002e44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f023 0307 	bic.w	r3, r3, #7
 8002e20:	3308      	adds	r3, #8
 8002e22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00a      	beq.n	8002e44 <pvPortMalloc+0x6c>
	__asm volatile
 8002e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e32:	f383 8811 	msr	BASEPRI, r3
 8002e36:	f3bf 8f6f 	isb	sy
 8002e3a:	f3bf 8f4f 	dsb	sy
 8002e3e:	617b      	str	r3, [r7, #20]
}
 8002e40:	bf00      	nop
 8002e42:	e7fe      	b.n	8002e42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d06e      	beq.n	8002f28 <pvPortMalloc+0x150>
 8002e4a:	4b45      	ldr	r3, [pc, #276]	; (8002f60 <pvPortMalloc+0x188>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d869      	bhi.n	8002f28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002e54:	4b43      	ldr	r3, [pc, #268]	; (8002f64 <pvPortMalloc+0x18c>)
 8002e56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002e58:	4b42      	ldr	r3, [pc, #264]	; (8002f64 <pvPortMalloc+0x18c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002e5e:	e004      	b.n	8002e6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d903      	bls.n	8002e7c <pvPortMalloc+0xa4>
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1f1      	bne.n	8002e60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002e7c:	4b36      	ldr	r3, [pc, #216]	; (8002f58 <pvPortMalloc+0x180>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d050      	beq.n	8002f28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2208      	movs	r2, #8
 8002e8c:	4413      	add	r3, r2
 8002e8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	1ad2      	subs	r2, r2, r3
 8002ea0:	2308      	movs	r3, #8
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d91f      	bls.n	8002ee8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4413      	add	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00a      	beq.n	8002ed0 <pvPortMalloc+0xf8>
	__asm volatile
 8002eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ebe:	f383 8811 	msr	BASEPRI, r3
 8002ec2:	f3bf 8f6f 	isb	sy
 8002ec6:	f3bf 8f4f 	dsb	sy
 8002eca:	613b      	str	r3, [r7, #16]
}
 8002ecc:	bf00      	nop
 8002ece:	e7fe      	b.n	8002ece <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	1ad2      	subs	r2, r2, r3
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002ee2:	69b8      	ldr	r0, [r7, #24]
 8002ee4:	f000 f908 	bl	80030f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002ee8:	4b1d      	ldr	r3, [pc, #116]	; (8002f60 <pvPortMalloc+0x188>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	4a1b      	ldr	r2, [pc, #108]	; (8002f60 <pvPortMalloc+0x188>)
 8002ef4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002ef6:	4b1a      	ldr	r3, [pc, #104]	; (8002f60 <pvPortMalloc+0x188>)
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	4b1b      	ldr	r3, [pc, #108]	; (8002f68 <pvPortMalloc+0x190>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d203      	bcs.n	8002f0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002f02:	4b17      	ldr	r3, [pc, #92]	; (8002f60 <pvPortMalloc+0x188>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a18      	ldr	r2, [pc, #96]	; (8002f68 <pvPortMalloc+0x190>)
 8002f08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	4b13      	ldr	r3, [pc, #76]	; (8002f5c <pvPortMalloc+0x184>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	431a      	orrs	r2, r3
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002f1e:	4b13      	ldr	r3, [pc, #76]	; (8002f6c <pvPortMalloc+0x194>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	3301      	adds	r3, #1
 8002f24:	4a11      	ldr	r2, [pc, #68]	; (8002f6c <pvPortMalloc+0x194>)
 8002f26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002f28:	f7fe fca8 	bl	800187c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00a      	beq.n	8002f4c <pvPortMalloc+0x174>
	__asm volatile
 8002f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3a:	f383 8811 	msr	BASEPRI, r3
 8002f3e:	f3bf 8f6f 	isb	sy
 8002f42:	f3bf 8f4f 	dsb	sy
 8002f46:	60fb      	str	r3, [r7, #12]
}
 8002f48:	bf00      	nop
 8002f4a:	e7fe      	b.n	8002f4a <pvPortMalloc+0x172>
	return pvReturn;
 8002f4c:	69fb      	ldr	r3, [r7, #28]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3728      	adds	r7, #40	; 0x28
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20004a10 	.word	0x20004a10
 8002f5c:	20004a24 	.word	0x20004a24
 8002f60:	20004a14 	.word	0x20004a14
 8002f64:	20004a08 	.word	0x20004a08
 8002f68:	20004a18 	.word	0x20004a18
 8002f6c:	20004a1c 	.word	0x20004a1c

08002f70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d04d      	beq.n	800301e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002f82:	2308      	movs	r3, #8
 8002f84:	425b      	negs	r3, r3
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	4413      	add	r3, r2
 8002f8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	4b24      	ldr	r3, [pc, #144]	; (8003028 <vPortFree+0xb8>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10a      	bne.n	8002fb4 <vPortFree+0x44>
	__asm volatile
 8002f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa2:	f383 8811 	msr	BASEPRI, r3
 8002fa6:	f3bf 8f6f 	isb	sy
 8002faa:	f3bf 8f4f 	dsb	sy
 8002fae:	60fb      	str	r3, [r7, #12]
}
 8002fb0:	bf00      	nop
 8002fb2:	e7fe      	b.n	8002fb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00a      	beq.n	8002fd2 <vPortFree+0x62>
	__asm volatile
 8002fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc0:	f383 8811 	msr	BASEPRI, r3
 8002fc4:	f3bf 8f6f 	isb	sy
 8002fc8:	f3bf 8f4f 	dsb	sy
 8002fcc:	60bb      	str	r3, [r7, #8]
}
 8002fce:	bf00      	nop
 8002fd0:	e7fe      	b.n	8002fd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	4b14      	ldr	r3, [pc, #80]	; (8003028 <vPortFree+0xb8>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d01e      	beq.n	800301e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d11a      	bne.n	800301e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	4b0e      	ldr	r3, [pc, #56]	; (8003028 <vPortFree+0xb8>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	401a      	ands	r2, r3
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002ff8:	f7fe fc32 	bl	8001860 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	4b0a      	ldr	r3, [pc, #40]	; (800302c <vPortFree+0xbc>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4413      	add	r3, r2
 8003006:	4a09      	ldr	r2, [pc, #36]	; (800302c <vPortFree+0xbc>)
 8003008:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800300a:	6938      	ldr	r0, [r7, #16]
 800300c:	f000 f874 	bl	80030f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003010:	4b07      	ldr	r3, [pc, #28]	; (8003030 <vPortFree+0xc0>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	3301      	adds	r3, #1
 8003016:	4a06      	ldr	r2, [pc, #24]	; (8003030 <vPortFree+0xc0>)
 8003018:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800301a:	f7fe fc2f 	bl	800187c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800301e:	bf00      	nop
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	20004a24 	.word	0x20004a24
 800302c:	20004a14 	.word	0x20004a14
 8003030:	20004a20 	.word	0x20004a20

08003034 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800303a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800303e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003040:	4b27      	ldr	r3, [pc, #156]	; (80030e0 <prvHeapInit+0xac>)
 8003042:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00c      	beq.n	8003068 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	3307      	adds	r3, #7
 8003052:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f023 0307 	bic.w	r3, r3, #7
 800305a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	4a1f      	ldr	r2, [pc, #124]	; (80030e0 <prvHeapInit+0xac>)
 8003064:	4413      	add	r3, r2
 8003066:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800306c:	4a1d      	ldr	r2, [pc, #116]	; (80030e4 <prvHeapInit+0xb0>)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003072:	4b1c      	ldr	r3, [pc, #112]	; (80030e4 <prvHeapInit+0xb0>)
 8003074:	2200      	movs	r2, #0
 8003076:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	4413      	add	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003080:	2208      	movs	r2, #8
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	1a9b      	subs	r3, r3, r2
 8003086:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f023 0307 	bic.w	r3, r3, #7
 800308e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4a15      	ldr	r2, [pc, #84]	; (80030e8 <prvHeapInit+0xb4>)
 8003094:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003096:	4b14      	ldr	r3, [pc, #80]	; (80030e8 <prvHeapInit+0xb4>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2200      	movs	r2, #0
 800309c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800309e:	4b12      	ldr	r3, [pc, #72]	; (80030e8 <prvHeapInit+0xb4>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	1ad2      	subs	r2, r2, r3
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80030b4:	4b0c      	ldr	r3, [pc, #48]	; (80030e8 <prvHeapInit+0xb4>)
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	4a0a      	ldr	r2, [pc, #40]	; (80030ec <prvHeapInit+0xb8>)
 80030c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	4a09      	ldr	r2, [pc, #36]	; (80030f0 <prvHeapInit+0xbc>)
 80030ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80030cc:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <prvHeapInit+0xc0>)
 80030ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80030d2:	601a      	str	r2, [r3, #0]
}
 80030d4:	bf00      	nop
 80030d6:	3714      	adds	r7, #20
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	20000e08 	.word	0x20000e08
 80030e4:	20004a08 	.word	0x20004a08
 80030e8:	20004a10 	.word	0x20004a10
 80030ec:	20004a18 	.word	0x20004a18
 80030f0:	20004a14 	.word	0x20004a14
 80030f4:	20004a24 	.word	0x20004a24

080030f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003100:	4b28      	ldr	r3, [pc, #160]	; (80031a4 <prvInsertBlockIntoFreeList+0xac>)
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	e002      	b.n	800310c <prvInsertBlockIntoFreeList+0x14>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	429a      	cmp	r2, r3
 8003114:	d8f7      	bhi.n	8003106 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	4413      	add	r3, r2
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	429a      	cmp	r2, r3
 8003126:	d108      	bne.n	800313a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	441a      	add	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	441a      	add	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d118      	bne.n	8003180 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	4b15      	ldr	r3, [pc, #84]	; (80031a8 <prvInsertBlockIntoFreeList+0xb0>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d00d      	beq.n	8003176 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	441a      	add	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	e008      	b.n	8003188 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003176:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <prvInsertBlockIntoFreeList+0xb0>)
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	e003      	b.n	8003188 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	429a      	cmp	r2, r3
 800318e:	d002      	beq.n	8003196 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003196:	bf00      	nop
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	20004a08 	.word	0x20004a08
 80031a8:	20004a10 	.word	0x20004a10

080031ac <__errno>:
 80031ac:	4b01      	ldr	r3, [pc, #4]	; (80031b4 <__errno+0x8>)
 80031ae:	6818      	ldr	r0, [r3, #0]
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	20000008 	.word	0x20000008

080031b8 <__libc_init_array>:
 80031b8:	b570      	push	{r4, r5, r6, lr}
 80031ba:	4d0d      	ldr	r5, [pc, #52]	; (80031f0 <__libc_init_array+0x38>)
 80031bc:	4c0d      	ldr	r4, [pc, #52]	; (80031f4 <__libc_init_array+0x3c>)
 80031be:	1b64      	subs	r4, r4, r5
 80031c0:	10a4      	asrs	r4, r4, #2
 80031c2:	2600      	movs	r6, #0
 80031c4:	42a6      	cmp	r6, r4
 80031c6:	d109      	bne.n	80031dc <__libc_init_array+0x24>
 80031c8:	4d0b      	ldr	r5, [pc, #44]	; (80031f8 <__libc_init_array+0x40>)
 80031ca:	4c0c      	ldr	r4, [pc, #48]	; (80031fc <__libc_init_array+0x44>)
 80031cc:	f000 fc8e 	bl	8003aec <_init>
 80031d0:	1b64      	subs	r4, r4, r5
 80031d2:	10a4      	asrs	r4, r4, #2
 80031d4:	2600      	movs	r6, #0
 80031d6:	42a6      	cmp	r6, r4
 80031d8:	d105      	bne.n	80031e6 <__libc_init_array+0x2e>
 80031da:	bd70      	pop	{r4, r5, r6, pc}
 80031dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80031e0:	4798      	blx	r3
 80031e2:	3601      	adds	r6, #1
 80031e4:	e7ee      	b.n	80031c4 <__libc_init_array+0xc>
 80031e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80031ea:	4798      	blx	r3
 80031ec:	3601      	adds	r6, #1
 80031ee:	e7f2      	b.n	80031d6 <__libc_init_array+0x1e>
 80031f0:	08003b9c 	.word	0x08003b9c
 80031f4:	08003b9c 	.word	0x08003b9c
 80031f8:	08003b9c 	.word	0x08003b9c
 80031fc:	08003ba0 	.word	0x08003ba0

08003200 <memcpy>:
 8003200:	440a      	add	r2, r1
 8003202:	4291      	cmp	r1, r2
 8003204:	f100 33ff 	add.w	r3, r0, #4294967295
 8003208:	d100      	bne.n	800320c <memcpy+0xc>
 800320a:	4770      	bx	lr
 800320c:	b510      	push	{r4, lr}
 800320e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003212:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003216:	4291      	cmp	r1, r2
 8003218:	d1f9      	bne.n	800320e <memcpy+0xe>
 800321a:	bd10      	pop	{r4, pc}

0800321c <memset>:
 800321c:	4402      	add	r2, r0
 800321e:	4603      	mov	r3, r0
 8003220:	4293      	cmp	r3, r2
 8003222:	d100      	bne.n	8003226 <memset+0xa>
 8003224:	4770      	bx	lr
 8003226:	f803 1b01 	strb.w	r1, [r3], #1
 800322a:	e7f9      	b.n	8003220 <memset+0x4>

0800322c <siprintf>:
 800322c:	b40e      	push	{r1, r2, r3}
 800322e:	b500      	push	{lr}
 8003230:	b09c      	sub	sp, #112	; 0x70
 8003232:	ab1d      	add	r3, sp, #116	; 0x74
 8003234:	9002      	str	r0, [sp, #8]
 8003236:	9006      	str	r0, [sp, #24]
 8003238:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800323c:	4809      	ldr	r0, [pc, #36]	; (8003264 <siprintf+0x38>)
 800323e:	9107      	str	r1, [sp, #28]
 8003240:	9104      	str	r1, [sp, #16]
 8003242:	4909      	ldr	r1, [pc, #36]	; (8003268 <siprintf+0x3c>)
 8003244:	f853 2b04 	ldr.w	r2, [r3], #4
 8003248:	9105      	str	r1, [sp, #20]
 800324a:	6800      	ldr	r0, [r0, #0]
 800324c:	9301      	str	r3, [sp, #4]
 800324e:	a902      	add	r1, sp, #8
 8003250:	f000 f868 	bl	8003324 <_svfiprintf_r>
 8003254:	9b02      	ldr	r3, [sp, #8]
 8003256:	2200      	movs	r2, #0
 8003258:	701a      	strb	r2, [r3, #0]
 800325a:	b01c      	add	sp, #112	; 0x70
 800325c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003260:	b003      	add	sp, #12
 8003262:	4770      	bx	lr
 8003264:	20000008 	.word	0x20000008
 8003268:	ffff0208 	.word	0xffff0208

0800326c <__ssputs_r>:
 800326c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003270:	688e      	ldr	r6, [r1, #8]
 8003272:	429e      	cmp	r6, r3
 8003274:	4682      	mov	sl, r0
 8003276:	460c      	mov	r4, r1
 8003278:	4690      	mov	r8, r2
 800327a:	461f      	mov	r7, r3
 800327c:	d838      	bhi.n	80032f0 <__ssputs_r+0x84>
 800327e:	898a      	ldrh	r2, [r1, #12]
 8003280:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003284:	d032      	beq.n	80032ec <__ssputs_r+0x80>
 8003286:	6825      	ldr	r5, [r4, #0]
 8003288:	6909      	ldr	r1, [r1, #16]
 800328a:	eba5 0901 	sub.w	r9, r5, r1
 800328e:	6965      	ldr	r5, [r4, #20]
 8003290:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003294:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003298:	3301      	adds	r3, #1
 800329a:	444b      	add	r3, r9
 800329c:	106d      	asrs	r5, r5, #1
 800329e:	429d      	cmp	r5, r3
 80032a0:	bf38      	it	cc
 80032a2:	461d      	movcc	r5, r3
 80032a4:	0553      	lsls	r3, r2, #21
 80032a6:	d531      	bpl.n	800330c <__ssputs_r+0xa0>
 80032a8:	4629      	mov	r1, r5
 80032aa:	f000 fb55 	bl	8003958 <_malloc_r>
 80032ae:	4606      	mov	r6, r0
 80032b0:	b950      	cbnz	r0, 80032c8 <__ssputs_r+0x5c>
 80032b2:	230c      	movs	r3, #12
 80032b4:	f8ca 3000 	str.w	r3, [sl]
 80032b8:	89a3      	ldrh	r3, [r4, #12]
 80032ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032be:	81a3      	strh	r3, [r4, #12]
 80032c0:	f04f 30ff 	mov.w	r0, #4294967295
 80032c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032c8:	6921      	ldr	r1, [r4, #16]
 80032ca:	464a      	mov	r2, r9
 80032cc:	f7ff ff98 	bl	8003200 <memcpy>
 80032d0:	89a3      	ldrh	r3, [r4, #12]
 80032d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80032d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032da:	81a3      	strh	r3, [r4, #12]
 80032dc:	6126      	str	r6, [r4, #16]
 80032de:	6165      	str	r5, [r4, #20]
 80032e0:	444e      	add	r6, r9
 80032e2:	eba5 0509 	sub.w	r5, r5, r9
 80032e6:	6026      	str	r6, [r4, #0]
 80032e8:	60a5      	str	r5, [r4, #8]
 80032ea:	463e      	mov	r6, r7
 80032ec:	42be      	cmp	r6, r7
 80032ee:	d900      	bls.n	80032f2 <__ssputs_r+0x86>
 80032f0:	463e      	mov	r6, r7
 80032f2:	6820      	ldr	r0, [r4, #0]
 80032f4:	4632      	mov	r2, r6
 80032f6:	4641      	mov	r1, r8
 80032f8:	f000 faa8 	bl	800384c <memmove>
 80032fc:	68a3      	ldr	r3, [r4, #8]
 80032fe:	1b9b      	subs	r3, r3, r6
 8003300:	60a3      	str	r3, [r4, #8]
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	4433      	add	r3, r6
 8003306:	6023      	str	r3, [r4, #0]
 8003308:	2000      	movs	r0, #0
 800330a:	e7db      	b.n	80032c4 <__ssputs_r+0x58>
 800330c:	462a      	mov	r2, r5
 800330e:	f000 fb97 	bl	8003a40 <_realloc_r>
 8003312:	4606      	mov	r6, r0
 8003314:	2800      	cmp	r0, #0
 8003316:	d1e1      	bne.n	80032dc <__ssputs_r+0x70>
 8003318:	6921      	ldr	r1, [r4, #16]
 800331a:	4650      	mov	r0, sl
 800331c:	f000 fab0 	bl	8003880 <_free_r>
 8003320:	e7c7      	b.n	80032b2 <__ssputs_r+0x46>
	...

08003324 <_svfiprintf_r>:
 8003324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003328:	4698      	mov	r8, r3
 800332a:	898b      	ldrh	r3, [r1, #12]
 800332c:	061b      	lsls	r3, r3, #24
 800332e:	b09d      	sub	sp, #116	; 0x74
 8003330:	4607      	mov	r7, r0
 8003332:	460d      	mov	r5, r1
 8003334:	4614      	mov	r4, r2
 8003336:	d50e      	bpl.n	8003356 <_svfiprintf_r+0x32>
 8003338:	690b      	ldr	r3, [r1, #16]
 800333a:	b963      	cbnz	r3, 8003356 <_svfiprintf_r+0x32>
 800333c:	2140      	movs	r1, #64	; 0x40
 800333e:	f000 fb0b 	bl	8003958 <_malloc_r>
 8003342:	6028      	str	r0, [r5, #0]
 8003344:	6128      	str	r0, [r5, #16]
 8003346:	b920      	cbnz	r0, 8003352 <_svfiprintf_r+0x2e>
 8003348:	230c      	movs	r3, #12
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	f04f 30ff 	mov.w	r0, #4294967295
 8003350:	e0d1      	b.n	80034f6 <_svfiprintf_r+0x1d2>
 8003352:	2340      	movs	r3, #64	; 0x40
 8003354:	616b      	str	r3, [r5, #20]
 8003356:	2300      	movs	r3, #0
 8003358:	9309      	str	r3, [sp, #36]	; 0x24
 800335a:	2320      	movs	r3, #32
 800335c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003360:	f8cd 800c 	str.w	r8, [sp, #12]
 8003364:	2330      	movs	r3, #48	; 0x30
 8003366:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003510 <_svfiprintf_r+0x1ec>
 800336a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800336e:	f04f 0901 	mov.w	r9, #1
 8003372:	4623      	mov	r3, r4
 8003374:	469a      	mov	sl, r3
 8003376:	f813 2b01 	ldrb.w	r2, [r3], #1
 800337a:	b10a      	cbz	r2, 8003380 <_svfiprintf_r+0x5c>
 800337c:	2a25      	cmp	r2, #37	; 0x25
 800337e:	d1f9      	bne.n	8003374 <_svfiprintf_r+0x50>
 8003380:	ebba 0b04 	subs.w	fp, sl, r4
 8003384:	d00b      	beq.n	800339e <_svfiprintf_r+0x7a>
 8003386:	465b      	mov	r3, fp
 8003388:	4622      	mov	r2, r4
 800338a:	4629      	mov	r1, r5
 800338c:	4638      	mov	r0, r7
 800338e:	f7ff ff6d 	bl	800326c <__ssputs_r>
 8003392:	3001      	adds	r0, #1
 8003394:	f000 80aa 	beq.w	80034ec <_svfiprintf_r+0x1c8>
 8003398:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800339a:	445a      	add	r2, fp
 800339c:	9209      	str	r2, [sp, #36]	; 0x24
 800339e:	f89a 3000 	ldrb.w	r3, [sl]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 80a2 	beq.w	80034ec <_svfiprintf_r+0x1c8>
 80033a8:	2300      	movs	r3, #0
 80033aa:	f04f 32ff 	mov.w	r2, #4294967295
 80033ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033b2:	f10a 0a01 	add.w	sl, sl, #1
 80033b6:	9304      	str	r3, [sp, #16]
 80033b8:	9307      	str	r3, [sp, #28]
 80033ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033be:	931a      	str	r3, [sp, #104]	; 0x68
 80033c0:	4654      	mov	r4, sl
 80033c2:	2205      	movs	r2, #5
 80033c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033c8:	4851      	ldr	r0, [pc, #324]	; (8003510 <_svfiprintf_r+0x1ec>)
 80033ca:	f7fc ff01 	bl	80001d0 <memchr>
 80033ce:	9a04      	ldr	r2, [sp, #16]
 80033d0:	b9d8      	cbnz	r0, 800340a <_svfiprintf_r+0xe6>
 80033d2:	06d0      	lsls	r0, r2, #27
 80033d4:	bf44      	itt	mi
 80033d6:	2320      	movmi	r3, #32
 80033d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033dc:	0711      	lsls	r1, r2, #28
 80033de:	bf44      	itt	mi
 80033e0:	232b      	movmi	r3, #43	; 0x2b
 80033e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033e6:	f89a 3000 	ldrb.w	r3, [sl]
 80033ea:	2b2a      	cmp	r3, #42	; 0x2a
 80033ec:	d015      	beq.n	800341a <_svfiprintf_r+0xf6>
 80033ee:	9a07      	ldr	r2, [sp, #28]
 80033f0:	4654      	mov	r4, sl
 80033f2:	2000      	movs	r0, #0
 80033f4:	f04f 0c0a 	mov.w	ip, #10
 80033f8:	4621      	mov	r1, r4
 80033fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033fe:	3b30      	subs	r3, #48	; 0x30
 8003400:	2b09      	cmp	r3, #9
 8003402:	d94e      	bls.n	80034a2 <_svfiprintf_r+0x17e>
 8003404:	b1b0      	cbz	r0, 8003434 <_svfiprintf_r+0x110>
 8003406:	9207      	str	r2, [sp, #28]
 8003408:	e014      	b.n	8003434 <_svfiprintf_r+0x110>
 800340a:	eba0 0308 	sub.w	r3, r0, r8
 800340e:	fa09 f303 	lsl.w	r3, r9, r3
 8003412:	4313      	orrs	r3, r2
 8003414:	9304      	str	r3, [sp, #16]
 8003416:	46a2      	mov	sl, r4
 8003418:	e7d2      	b.n	80033c0 <_svfiprintf_r+0x9c>
 800341a:	9b03      	ldr	r3, [sp, #12]
 800341c:	1d19      	adds	r1, r3, #4
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	9103      	str	r1, [sp, #12]
 8003422:	2b00      	cmp	r3, #0
 8003424:	bfbb      	ittet	lt
 8003426:	425b      	neglt	r3, r3
 8003428:	f042 0202 	orrlt.w	r2, r2, #2
 800342c:	9307      	strge	r3, [sp, #28]
 800342e:	9307      	strlt	r3, [sp, #28]
 8003430:	bfb8      	it	lt
 8003432:	9204      	strlt	r2, [sp, #16]
 8003434:	7823      	ldrb	r3, [r4, #0]
 8003436:	2b2e      	cmp	r3, #46	; 0x2e
 8003438:	d10c      	bne.n	8003454 <_svfiprintf_r+0x130>
 800343a:	7863      	ldrb	r3, [r4, #1]
 800343c:	2b2a      	cmp	r3, #42	; 0x2a
 800343e:	d135      	bne.n	80034ac <_svfiprintf_r+0x188>
 8003440:	9b03      	ldr	r3, [sp, #12]
 8003442:	1d1a      	adds	r2, r3, #4
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	9203      	str	r2, [sp, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	bfb8      	it	lt
 800344c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003450:	3402      	adds	r4, #2
 8003452:	9305      	str	r3, [sp, #20]
 8003454:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003520 <_svfiprintf_r+0x1fc>
 8003458:	7821      	ldrb	r1, [r4, #0]
 800345a:	2203      	movs	r2, #3
 800345c:	4650      	mov	r0, sl
 800345e:	f7fc feb7 	bl	80001d0 <memchr>
 8003462:	b140      	cbz	r0, 8003476 <_svfiprintf_r+0x152>
 8003464:	2340      	movs	r3, #64	; 0x40
 8003466:	eba0 000a 	sub.w	r0, r0, sl
 800346a:	fa03 f000 	lsl.w	r0, r3, r0
 800346e:	9b04      	ldr	r3, [sp, #16]
 8003470:	4303      	orrs	r3, r0
 8003472:	3401      	adds	r4, #1
 8003474:	9304      	str	r3, [sp, #16]
 8003476:	f814 1b01 	ldrb.w	r1, [r4], #1
 800347a:	4826      	ldr	r0, [pc, #152]	; (8003514 <_svfiprintf_r+0x1f0>)
 800347c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003480:	2206      	movs	r2, #6
 8003482:	f7fc fea5 	bl	80001d0 <memchr>
 8003486:	2800      	cmp	r0, #0
 8003488:	d038      	beq.n	80034fc <_svfiprintf_r+0x1d8>
 800348a:	4b23      	ldr	r3, [pc, #140]	; (8003518 <_svfiprintf_r+0x1f4>)
 800348c:	bb1b      	cbnz	r3, 80034d6 <_svfiprintf_r+0x1b2>
 800348e:	9b03      	ldr	r3, [sp, #12]
 8003490:	3307      	adds	r3, #7
 8003492:	f023 0307 	bic.w	r3, r3, #7
 8003496:	3308      	adds	r3, #8
 8003498:	9303      	str	r3, [sp, #12]
 800349a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800349c:	4433      	add	r3, r6
 800349e:	9309      	str	r3, [sp, #36]	; 0x24
 80034a0:	e767      	b.n	8003372 <_svfiprintf_r+0x4e>
 80034a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80034a6:	460c      	mov	r4, r1
 80034a8:	2001      	movs	r0, #1
 80034aa:	e7a5      	b.n	80033f8 <_svfiprintf_r+0xd4>
 80034ac:	2300      	movs	r3, #0
 80034ae:	3401      	adds	r4, #1
 80034b0:	9305      	str	r3, [sp, #20]
 80034b2:	4619      	mov	r1, r3
 80034b4:	f04f 0c0a 	mov.w	ip, #10
 80034b8:	4620      	mov	r0, r4
 80034ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034be:	3a30      	subs	r2, #48	; 0x30
 80034c0:	2a09      	cmp	r2, #9
 80034c2:	d903      	bls.n	80034cc <_svfiprintf_r+0x1a8>
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0c5      	beq.n	8003454 <_svfiprintf_r+0x130>
 80034c8:	9105      	str	r1, [sp, #20]
 80034ca:	e7c3      	b.n	8003454 <_svfiprintf_r+0x130>
 80034cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80034d0:	4604      	mov	r4, r0
 80034d2:	2301      	movs	r3, #1
 80034d4:	e7f0      	b.n	80034b8 <_svfiprintf_r+0x194>
 80034d6:	ab03      	add	r3, sp, #12
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	462a      	mov	r2, r5
 80034dc:	4b0f      	ldr	r3, [pc, #60]	; (800351c <_svfiprintf_r+0x1f8>)
 80034de:	a904      	add	r1, sp, #16
 80034e0:	4638      	mov	r0, r7
 80034e2:	f3af 8000 	nop.w
 80034e6:	1c42      	adds	r2, r0, #1
 80034e8:	4606      	mov	r6, r0
 80034ea:	d1d6      	bne.n	800349a <_svfiprintf_r+0x176>
 80034ec:	89ab      	ldrh	r3, [r5, #12]
 80034ee:	065b      	lsls	r3, r3, #25
 80034f0:	f53f af2c 	bmi.w	800334c <_svfiprintf_r+0x28>
 80034f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034f6:	b01d      	add	sp, #116	; 0x74
 80034f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034fc:	ab03      	add	r3, sp, #12
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	462a      	mov	r2, r5
 8003502:	4b06      	ldr	r3, [pc, #24]	; (800351c <_svfiprintf_r+0x1f8>)
 8003504:	a904      	add	r1, sp, #16
 8003506:	4638      	mov	r0, r7
 8003508:	f000 f87a 	bl	8003600 <_printf_i>
 800350c:	e7eb      	b.n	80034e6 <_svfiprintf_r+0x1c2>
 800350e:	bf00      	nop
 8003510:	08003b69 	.word	0x08003b69
 8003514:	08003b73 	.word	0x08003b73
 8003518:	00000000 	.word	0x00000000
 800351c:	0800326d 	.word	0x0800326d
 8003520:	08003b6f 	.word	0x08003b6f

08003524 <_printf_common>:
 8003524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003528:	4616      	mov	r6, r2
 800352a:	4699      	mov	r9, r3
 800352c:	688a      	ldr	r2, [r1, #8]
 800352e:	690b      	ldr	r3, [r1, #16]
 8003530:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003534:	4293      	cmp	r3, r2
 8003536:	bfb8      	it	lt
 8003538:	4613      	movlt	r3, r2
 800353a:	6033      	str	r3, [r6, #0]
 800353c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003540:	4607      	mov	r7, r0
 8003542:	460c      	mov	r4, r1
 8003544:	b10a      	cbz	r2, 800354a <_printf_common+0x26>
 8003546:	3301      	adds	r3, #1
 8003548:	6033      	str	r3, [r6, #0]
 800354a:	6823      	ldr	r3, [r4, #0]
 800354c:	0699      	lsls	r1, r3, #26
 800354e:	bf42      	ittt	mi
 8003550:	6833      	ldrmi	r3, [r6, #0]
 8003552:	3302      	addmi	r3, #2
 8003554:	6033      	strmi	r3, [r6, #0]
 8003556:	6825      	ldr	r5, [r4, #0]
 8003558:	f015 0506 	ands.w	r5, r5, #6
 800355c:	d106      	bne.n	800356c <_printf_common+0x48>
 800355e:	f104 0a19 	add.w	sl, r4, #25
 8003562:	68e3      	ldr	r3, [r4, #12]
 8003564:	6832      	ldr	r2, [r6, #0]
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	42ab      	cmp	r3, r5
 800356a:	dc26      	bgt.n	80035ba <_printf_common+0x96>
 800356c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003570:	1e13      	subs	r3, r2, #0
 8003572:	6822      	ldr	r2, [r4, #0]
 8003574:	bf18      	it	ne
 8003576:	2301      	movne	r3, #1
 8003578:	0692      	lsls	r2, r2, #26
 800357a:	d42b      	bmi.n	80035d4 <_printf_common+0xb0>
 800357c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003580:	4649      	mov	r1, r9
 8003582:	4638      	mov	r0, r7
 8003584:	47c0      	blx	r8
 8003586:	3001      	adds	r0, #1
 8003588:	d01e      	beq.n	80035c8 <_printf_common+0xa4>
 800358a:	6823      	ldr	r3, [r4, #0]
 800358c:	68e5      	ldr	r5, [r4, #12]
 800358e:	6832      	ldr	r2, [r6, #0]
 8003590:	f003 0306 	and.w	r3, r3, #6
 8003594:	2b04      	cmp	r3, #4
 8003596:	bf08      	it	eq
 8003598:	1aad      	subeq	r5, r5, r2
 800359a:	68a3      	ldr	r3, [r4, #8]
 800359c:	6922      	ldr	r2, [r4, #16]
 800359e:	bf0c      	ite	eq
 80035a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035a4:	2500      	movne	r5, #0
 80035a6:	4293      	cmp	r3, r2
 80035a8:	bfc4      	itt	gt
 80035aa:	1a9b      	subgt	r3, r3, r2
 80035ac:	18ed      	addgt	r5, r5, r3
 80035ae:	2600      	movs	r6, #0
 80035b0:	341a      	adds	r4, #26
 80035b2:	42b5      	cmp	r5, r6
 80035b4:	d11a      	bne.n	80035ec <_printf_common+0xc8>
 80035b6:	2000      	movs	r0, #0
 80035b8:	e008      	b.n	80035cc <_printf_common+0xa8>
 80035ba:	2301      	movs	r3, #1
 80035bc:	4652      	mov	r2, sl
 80035be:	4649      	mov	r1, r9
 80035c0:	4638      	mov	r0, r7
 80035c2:	47c0      	blx	r8
 80035c4:	3001      	adds	r0, #1
 80035c6:	d103      	bne.n	80035d0 <_printf_common+0xac>
 80035c8:	f04f 30ff 	mov.w	r0, #4294967295
 80035cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035d0:	3501      	adds	r5, #1
 80035d2:	e7c6      	b.n	8003562 <_printf_common+0x3e>
 80035d4:	18e1      	adds	r1, r4, r3
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	2030      	movs	r0, #48	; 0x30
 80035da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035de:	4422      	add	r2, r4
 80035e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035e8:	3302      	adds	r3, #2
 80035ea:	e7c7      	b.n	800357c <_printf_common+0x58>
 80035ec:	2301      	movs	r3, #1
 80035ee:	4622      	mov	r2, r4
 80035f0:	4649      	mov	r1, r9
 80035f2:	4638      	mov	r0, r7
 80035f4:	47c0      	blx	r8
 80035f6:	3001      	adds	r0, #1
 80035f8:	d0e6      	beq.n	80035c8 <_printf_common+0xa4>
 80035fa:	3601      	adds	r6, #1
 80035fc:	e7d9      	b.n	80035b2 <_printf_common+0x8e>
	...

08003600 <_printf_i>:
 8003600:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003604:	7e0f      	ldrb	r7, [r1, #24]
 8003606:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003608:	2f78      	cmp	r7, #120	; 0x78
 800360a:	4691      	mov	r9, r2
 800360c:	4680      	mov	r8, r0
 800360e:	460c      	mov	r4, r1
 8003610:	469a      	mov	sl, r3
 8003612:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003616:	d807      	bhi.n	8003628 <_printf_i+0x28>
 8003618:	2f62      	cmp	r7, #98	; 0x62
 800361a:	d80a      	bhi.n	8003632 <_printf_i+0x32>
 800361c:	2f00      	cmp	r7, #0
 800361e:	f000 80d8 	beq.w	80037d2 <_printf_i+0x1d2>
 8003622:	2f58      	cmp	r7, #88	; 0x58
 8003624:	f000 80a3 	beq.w	800376e <_printf_i+0x16e>
 8003628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800362c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003630:	e03a      	b.n	80036a8 <_printf_i+0xa8>
 8003632:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003636:	2b15      	cmp	r3, #21
 8003638:	d8f6      	bhi.n	8003628 <_printf_i+0x28>
 800363a:	a101      	add	r1, pc, #4	; (adr r1, 8003640 <_printf_i+0x40>)
 800363c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003640:	08003699 	.word	0x08003699
 8003644:	080036ad 	.word	0x080036ad
 8003648:	08003629 	.word	0x08003629
 800364c:	08003629 	.word	0x08003629
 8003650:	08003629 	.word	0x08003629
 8003654:	08003629 	.word	0x08003629
 8003658:	080036ad 	.word	0x080036ad
 800365c:	08003629 	.word	0x08003629
 8003660:	08003629 	.word	0x08003629
 8003664:	08003629 	.word	0x08003629
 8003668:	08003629 	.word	0x08003629
 800366c:	080037b9 	.word	0x080037b9
 8003670:	080036dd 	.word	0x080036dd
 8003674:	0800379b 	.word	0x0800379b
 8003678:	08003629 	.word	0x08003629
 800367c:	08003629 	.word	0x08003629
 8003680:	080037db 	.word	0x080037db
 8003684:	08003629 	.word	0x08003629
 8003688:	080036dd 	.word	0x080036dd
 800368c:	08003629 	.word	0x08003629
 8003690:	08003629 	.word	0x08003629
 8003694:	080037a3 	.word	0x080037a3
 8003698:	682b      	ldr	r3, [r5, #0]
 800369a:	1d1a      	adds	r2, r3, #4
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	602a      	str	r2, [r5, #0]
 80036a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036a8:	2301      	movs	r3, #1
 80036aa:	e0a3      	b.n	80037f4 <_printf_i+0x1f4>
 80036ac:	6820      	ldr	r0, [r4, #0]
 80036ae:	6829      	ldr	r1, [r5, #0]
 80036b0:	0606      	lsls	r6, r0, #24
 80036b2:	f101 0304 	add.w	r3, r1, #4
 80036b6:	d50a      	bpl.n	80036ce <_printf_i+0xce>
 80036b8:	680e      	ldr	r6, [r1, #0]
 80036ba:	602b      	str	r3, [r5, #0]
 80036bc:	2e00      	cmp	r6, #0
 80036be:	da03      	bge.n	80036c8 <_printf_i+0xc8>
 80036c0:	232d      	movs	r3, #45	; 0x2d
 80036c2:	4276      	negs	r6, r6
 80036c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036c8:	485e      	ldr	r0, [pc, #376]	; (8003844 <_printf_i+0x244>)
 80036ca:	230a      	movs	r3, #10
 80036cc:	e019      	b.n	8003702 <_printf_i+0x102>
 80036ce:	680e      	ldr	r6, [r1, #0]
 80036d0:	602b      	str	r3, [r5, #0]
 80036d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80036d6:	bf18      	it	ne
 80036d8:	b236      	sxthne	r6, r6
 80036da:	e7ef      	b.n	80036bc <_printf_i+0xbc>
 80036dc:	682b      	ldr	r3, [r5, #0]
 80036de:	6820      	ldr	r0, [r4, #0]
 80036e0:	1d19      	adds	r1, r3, #4
 80036e2:	6029      	str	r1, [r5, #0]
 80036e4:	0601      	lsls	r1, r0, #24
 80036e6:	d501      	bpl.n	80036ec <_printf_i+0xec>
 80036e8:	681e      	ldr	r6, [r3, #0]
 80036ea:	e002      	b.n	80036f2 <_printf_i+0xf2>
 80036ec:	0646      	lsls	r6, r0, #25
 80036ee:	d5fb      	bpl.n	80036e8 <_printf_i+0xe8>
 80036f0:	881e      	ldrh	r6, [r3, #0]
 80036f2:	4854      	ldr	r0, [pc, #336]	; (8003844 <_printf_i+0x244>)
 80036f4:	2f6f      	cmp	r7, #111	; 0x6f
 80036f6:	bf0c      	ite	eq
 80036f8:	2308      	moveq	r3, #8
 80036fa:	230a      	movne	r3, #10
 80036fc:	2100      	movs	r1, #0
 80036fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003702:	6865      	ldr	r5, [r4, #4]
 8003704:	60a5      	str	r5, [r4, #8]
 8003706:	2d00      	cmp	r5, #0
 8003708:	bfa2      	ittt	ge
 800370a:	6821      	ldrge	r1, [r4, #0]
 800370c:	f021 0104 	bicge.w	r1, r1, #4
 8003710:	6021      	strge	r1, [r4, #0]
 8003712:	b90e      	cbnz	r6, 8003718 <_printf_i+0x118>
 8003714:	2d00      	cmp	r5, #0
 8003716:	d04d      	beq.n	80037b4 <_printf_i+0x1b4>
 8003718:	4615      	mov	r5, r2
 800371a:	fbb6 f1f3 	udiv	r1, r6, r3
 800371e:	fb03 6711 	mls	r7, r3, r1, r6
 8003722:	5dc7      	ldrb	r7, [r0, r7]
 8003724:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003728:	4637      	mov	r7, r6
 800372a:	42bb      	cmp	r3, r7
 800372c:	460e      	mov	r6, r1
 800372e:	d9f4      	bls.n	800371a <_printf_i+0x11a>
 8003730:	2b08      	cmp	r3, #8
 8003732:	d10b      	bne.n	800374c <_printf_i+0x14c>
 8003734:	6823      	ldr	r3, [r4, #0]
 8003736:	07de      	lsls	r6, r3, #31
 8003738:	d508      	bpl.n	800374c <_printf_i+0x14c>
 800373a:	6923      	ldr	r3, [r4, #16]
 800373c:	6861      	ldr	r1, [r4, #4]
 800373e:	4299      	cmp	r1, r3
 8003740:	bfde      	ittt	le
 8003742:	2330      	movle	r3, #48	; 0x30
 8003744:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003748:	f105 35ff 	addle.w	r5, r5, #4294967295
 800374c:	1b52      	subs	r2, r2, r5
 800374e:	6122      	str	r2, [r4, #16]
 8003750:	f8cd a000 	str.w	sl, [sp]
 8003754:	464b      	mov	r3, r9
 8003756:	aa03      	add	r2, sp, #12
 8003758:	4621      	mov	r1, r4
 800375a:	4640      	mov	r0, r8
 800375c:	f7ff fee2 	bl	8003524 <_printf_common>
 8003760:	3001      	adds	r0, #1
 8003762:	d14c      	bne.n	80037fe <_printf_i+0x1fe>
 8003764:	f04f 30ff 	mov.w	r0, #4294967295
 8003768:	b004      	add	sp, #16
 800376a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800376e:	4835      	ldr	r0, [pc, #212]	; (8003844 <_printf_i+0x244>)
 8003770:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003774:	6829      	ldr	r1, [r5, #0]
 8003776:	6823      	ldr	r3, [r4, #0]
 8003778:	f851 6b04 	ldr.w	r6, [r1], #4
 800377c:	6029      	str	r1, [r5, #0]
 800377e:	061d      	lsls	r5, r3, #24
 8003780:	d514      	bpl.n	80037ac <_printf_i+0x1ac>
 8003782:	07df      	lsls	r7, r3, #31
 8003784:	bf44      	itt	mi
 8003786:	f043 0320 	orrmi.w	r3, r3, #32
 800378a:	6023      	strmi	r3, [r4, #0]
 800378c:	b91e      	cbnz	r6, 8003796 <_printf_i+0x196>
 800378e:	6823      	ldr	r3, [r4, #0]
 8003790:	f023 0320 	bic.w	r3, r3, #32
 8003794:	6023      	str	r3, [r4, #0]
 8003796:	2310      	movs	r3, #16
 8003798:	e7b0      	b.n	80036fc <_printf_i+0xfc>
 800379a:	6823      	ldr	r3, [r4, #0]
 800379c:	f043 0320 	orr.w	r3, r3, #32
 80037a0:	6023      	str	r3, [r4, #0]
 80037a2:	2378      	movs	r3, #120	; 0x78
 80037a4:	4828      	ldr	r0, [pc, #160]	; (8003848 <_printf_i+0x248>)
 80037a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037aa:	e7e3      	b.n	8003774 <_printf_i+0x174>
 80037ac:	0659      	lsls	r1, r3, #25
 80037ae:	bf48      	it	mi
 80037b0:	b2b6      	uxthmi	r6, r6
 80037b2:	e7e6      	b.n	8003782 <_printf_i+0x182>
 80037b4:	4615      	mov	r5, r2
 80037b6:	e7bb      	b.n	8003730 <_printf_i+0x130>
 80037b8:	682b      	ldr	r3, [r5, #0]
 80037ba:	6826      	ldr	r6, [r4, #0]
 80037bc:	6961      	ldr	r1, [r4, #20]
 80037be:	1d18      	adds	r0, r3, #4
 80037c0:	6028      	str	r0, [r5, #0]
 80037c2:	0635      	lsls	r5, r6, #24
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	d501      	bpl.n	80037cc <_printf_i+0x1cc>
 80037c8:	6019      	str	r1, [r3, #0]
 80037ca:	e002      	b.n	80037d2 <_printf_i+0x1d2>
 80037cc:	0670      	lsls	r0, r6, #25
 80037ce:	d5fb      	bpl.n	80037c8 <_printf_i+0x1c8>
 80037d0:	8019      	strh	r1, [r3, #0]
 80037d2:	2300      	movs	r3, #0
 80037d4:	6123      	str	r3, [r4, #16]
 80037d6:	4615      	mov	r5, r2
 80037d8:	e7ba      	b.n	8003750 <_printf_i+0x150>
 80037da:	682b      	ldr	r3, [r5, #0]
 80037dc:	1d1a      	adds	r2, r3, #4
 80037de:	602a      	str	r2, [r5, #0]
 80037e0:	681d      	ldr	r5, [r3, #0]
 80037e2:	6862      	ldr	r2, [r4, #4]
 80037e4:	2100      	movs	r1, #0
 80037e6:	4628      	mov	r0, r5
 80037e8:	f7fc fcf2 	bl	80001d0 <memchr>
 80037ec:	b108      	cbz	r0, 80037f2 <_printf_i+0x1f2>
 80037ee:	1b40      	subs	r0, r0, r5
 80037f0:	6060      	str	r0, [r4, #4]
 80037f2:	6863      	ldr	r3, [r4, #4]
 80037f4:	6123      	str	r3, [r4, #16]
 80037f6:	2300      	movs	r3, #0
 80037f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037fc:	e7a8      	b.n	8003750 <_printf_i+0x150>
 80037fe:	6923      	ldr	r3, [r4, #16]
 8003800:	462a      	mov	r2, r5
 8003802:	4649      	mov	r1, r9
 8003804:	4640      	mov	r0, r8
 8003806:	47d0      	blx	sl
 8003808:	3001      	adds	r0, #1
 800380a:	d0ab      	beq.n	8003764 <_printf_i+0x164>
 800380c:	6823      	ldr	r3, [r4, #0]
 800380e:	079b      	lsls	r3, r3, #30
 8003810:	d413      	bmi.n	800383a <_printf_i+0x23a>
 8003812:	68e0      	ldr	r0, [r4, #12]
 8003814:	9b03      	ldr	r3, [sp, #12]
 8003816:	4298      	cmp	r0, r3
 8003818:	bfb8      	it	lt
 800381a:	4618      	movlt	r0, r3
 800381c:	e7a4      	b.n	8003768 <_printf_i+0x168>
 800381e:	2301      	movs	r3, #1
 8003820:	4632      	mov	r2, r6
 8003822:	4649      	mov	r1, r9
 8003824:	4640      	mov	r0, r8
 8003826:	47d0      	blx	sl
 8003828:	3001      	adds	r0, #1
 800382a:	d09b      	beq.n	8003764 <_printf_i+0x164>
 800382c:	3501      	adds	r5, #1
 800382e:	68e3      	ldr	r3, [r4, #12]
 8003830:	9903      	ldr	r1, [sp, #12]
 8003832:	1a5b      	subs	r3, r3, r1
 8003834:	42ab      	cmp	r3, r5
 8003836:	dcf2      	bgt.n	800381e <_printf_i+0x21e>
 8003838:	e7eb      	b.n	8003812 <_printf_i+0x212>
 800383a:	2500      	movs	r5, #0
 800383c:	f104 0619 	add.w	r6, r4, #25
 8003840:	e7f5      	b.n	800382e <_printf_i+0x22e>
 8003842:	bf00      	nop
 8003844:	08003b7a 	.word	0x08003b7a
 8003848:	08003b8b 	.word	0x08003b8b

0800384c <memmove>:
 800384c:	4288      	cmp	r0, r1
 800384e:	b510      	push	{r4, lr}
 8003850:	eb01 0402 	add.w	r4, r1, r2
 8003854:	d902      	bls.n	800385c <memmove+0x10>
 8003856:	4284      	cmp	r4, r0
 8003858:	4623      	mov	r3, r4
 800385a:	d807      	bhi.n	800386c <memmove+0x20>
 800385c:	1e43      	subs	r3, r0, #1
 800385e:	42a1      	cmp	r1, r4
 8003860:	d008      	beq.n	8003874 <memmove+0x28>
 8003862:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003866:	f803 2f01 	strb.w	r2, [r3, #1]!
 800386a:	e7f8      	b.n	800385e <memmove+0x12>
 800386c:	4402      	add	r2, r0
 800386e:	4601      	mov	r1, r0
 8003870:	428a      	cmp	r2, r1
 8003872:	d100      	bne.n	8003876 <memmove+0x2a>
 8003874:	bd10      	pop	{r4, pc}
 8003876:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800387a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800387e:	e7f7      	b.n	8003870 <memmove+0x24>

08003880 <_free_r>:
 8003880:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003882:	2900      	cmp	r1, #0
 8003884:	d044      	beq.n	8003910 <_free_r+0x90>
 8003886:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800388a:	9001      	str	r0, [sp, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	f1a1 0404 	sub.w	r4, r1, #4
 8003892:	bfb8      	it	lt
 8003894:	18e4      	addlt	r4, r4, r3
 8003896:	f000 f913 	bl	8003ac0 <__malloc_lock>
 800389a:	4a1e      	ldr	r2, [pc, #120]	; (8003914 <_free_r+0x94>)
 800389c:	9801      	ldr	r0, [sp, #4]
 800389e:	6813      	ldr	r3, [r2, #0]
 80038a0:	b933      	cbnz	r3, 80038b0 <_free_r+0x30>
 80038a2:	6063      	str	r3, [r4, #4]
 80038a4:	6014      	str	r4, [r2, #0]
 80038a6:	b003      	add	sp, #12
 80038a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038ac:	f000 b90e 	b.w	8003acc <__malloc_unlock>
 80038b0:	42a3      	cmp	r3, r4
 80038b2:	d908      	bls.n	80038c6 <_free_r+0x46>
 80038b4:	6825      	ldr	r5, [r4, #0]
 80038b6:	1961      	adds	r1, r4, r5
 80038b8:	428b      	cmp	r3, r1
 80038ba:	bf01      	itttt	eq
 80038bc:	6819      	ldreq	r1, [r3, #0]
 80038be:	685b      	ldreq	r3, [r3, #4]
 80038c0:	1949      	addeq	r1, r1, r5
 80038c2:	6021      	streq	r1, [r4, #0]
 80038c4:	e7ed      	b.n	80038a2 <_free_r+0x22>
 80038c6:	461a      	mov	r2, r3
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	b10b      	cbz	r3, 80038d0 <_free_r+0x50>
 80038cc:	42a3      	cmp	r3, r4
 80038ce:	d9fa      	bls.n	80038c6 <_free_r+0x46>
 80038d0:	6811      	ldr	r1, [r2, #0]
 80038d2:	1855      	adds	r5, r2, r1
 80038d4:	42a5      	cmp	r5, r4
 80038d6:	d10b      	bne.n	80038f0 <_free_r+0x70>
 80038d8:	6824      	ldr	r4, [r4, #0]
 80038da:	4421      	add	r1, r4
 80038dc:	1854      	adds	r4, r2, r1
 80038de:	42a3      	cmp	r3, r4
 80038e0:	6011      	str	r1, [r2, #0]
 80038e2:	d1e0      	bne.n	80038a6 <_free_r+0x26>
 80038e4:	681c      	ldr	r4, [r3, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	6053      	str	r3, [r2, #4]
 80038ea:	4421      	add	r1, r4
 80038ec:	6011      	str	r1, [r2, #0]
 80038ee:	e7da      	b.n	80038a6 <_free_r+0x26>
 80038f0:	d902      	bls.n	80038f8 <_free_r+0x78>
 80038f2:	230c      	movs	r3, #12
 80038f4:	6003      	str	r3, [r0, #0]
 80038f6:	e7d6      	b.n	80038a6 <_free_r+0x26>
 80038f8:	6825      	ldr	r5, [r4, #0]
 80038fa:	1961      	adds	r1, r4, r5
 80038fc:	428b      	cmp	r3, r1
 80038fe:	bf04      	itt	eq
 8003900:	6819      	ldreq	r1, [r3, #0]
 8003902:	685b      	ldreq	r3, [r3, #4]
 8003904:	6063      	str	r3, [r4, #4]
 8003906:	bf04      	itt	eq
 8003908:	1949      	addeq	r1, r1, r5
 800390a:	6021      	streq	r1, [r4, #0]
 800390c:	6054      	str	r4, [r2, #4]
 800390e:	e7ca      	b.n	80038a6 <_free_r+0x26>
 8003910:	b003      	add	sp, #12
 8003912:	bd30      	pop	{r4, r5, pc}
 8003914:	20004a28 	.word	0x20004a28

08003918 <sbrk_aligned>:
 8003918:	b570      	push	{r4, r5, r6, lr}
 800391a:	4e0e      	ldr	r6, [pc, #56]	; (8003954 <sbrk_aligned+0x3c>)
 800391c:	460c      	mov	r4, r1
 800391e:	6831      	ldr	r1, [r6, #0]
 8003920:	4605      	mov	r5, r0
 8003922:	b911      	cbnz	r1, 800392a <sbrk_aligned+0x12>
 8003924:	f000 f8bc 	bl	8003aa0 <_sbrk_r>
 8003928:	6030      	str	r0, [r6, #0]
 800392a:	4621      	mov	r1, r4
 800392c:	4628      	mov	r0, r5
 800392e:	f000 f8b7 	bl	8003aa0 <_sbrk_r>
 8003932:	1c43      	adds	r3, r0, #1
 8003934:	d00a      	beq.n	800394c <sbrk_aligned+0x34>
 8003936:	1cc4      	adds	r4, r0, #3
 8003938:	f024 0403 	bic.w	r4, r4, #3
 800393c:	42a0      	cmp	r0, r4
 800393e:	d007      	beq.n	8003950 <sbrk_aligned+0x38>
 8003940:	1a21      	subs	r1, r4, r0
 8003942:	4628      	mov	r0, r5
 8003944:	f000 f8ac 	bl	8003aa0 <_sbrk_r>
 8003948:	3001      	adds	r0, #1
 800394a:	d101      	bne.n	8003950 <sbrk_aligned+0x38>
 800394c:	f04f 34ff 	mov.w	r4, #4294967295
 8003950:	4620      	mov	r0, r4
 8003952:	bd70      	pop	{r4, r5, r6, pc}
 8003954:	20004a2c 	.word	0x20004a2c

08003958 <_malloc_r>:
 8003958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800395c:	1ccd      	adds	r5, r1, #3
 800395e:	f025 0503 	bic.w	r5, r5, #3
 8003962:	3508      	adds	r5, #8
 8003964:	2d0c      	cmp	r5, #12
 8003966:	bf38      	it	cc
 8003968:	250c      	movcc	r5, #12
 800396a:	2d00      	cmp	r5, #0
 800396c:	4607      	mov	r7, r0
 800396e:	db01      	blt.n	8003974 <_malloc_r+0x1c>
 8003970:	42a9      	cmp	r1, r5
 8003972:	d905      	bls.n	8003980 <_malloc_r+0x28>
 8003974:	230c      	movs	r3, #12
 8003976:	603b      	str	r3, [r7, #0]
 8003978:	2600      	movs	r6, #0
 800397a:	4630      	mov	r0, r6
 800397c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003980:	4e2e      	ldr	r6, [pc, #184]	; (8003a3c <_malloc_r+0xe4>)
 8003982:	f000 f89d 	bl	8003ac0 <__malloc_lock>
 8003986:	6833      	ldr	r3, [r6, #0]
 8003988:	461c      	mov	r4, r3
 800398a:	bb34      	cbnz	r4, 80039da <_malloc_r+0x82>
 800398c:	4629      	mov	r1, r5
 800398e:	4638      	mov	r0, r7
 8003990:	f7ff ffc2 	bl	8003918 <sbrk_aligned>
 8003994:	1c43      	adds	r3, r0, #1
 8003996:	4604      	mov	r4, r0
 8003998:	d14d      	bne.n	8003a36 <_malloc_r+0xde>
 800399a:	6834      	ldr	r4, [r6, #0]
 800399c:	4626      	mov	r6, r4
 800399e:	2e00      	cmp	r6, #0
 80039a0:	d140      	bne.n	8003a24 <_malloc_r+0xcc>
 80039a2:	6823      	ldr	r3, [r4, #0]
 80039a4:	4631      	mov	r1, r6
 80039a6:	4638      	mov	r0, r7
 80039a8:	eb04 0803 	add.w	r8, r4, r3
 80039ac:	f000 f878 	bl	8003aa0 <_sbrk_r>
 80039b0:	4580      	cmp	r8, r0
 80039b2:	d13a      	bne.n	8003a2a <_malloc_r+0xd2>
 80039b4:	6821      	ldr	r1, [r4, #0]
 80039b6:	3503      	adds	r5, #3
 80039b8:	1a6d      	subs	r5, r5, r1
 80039ba:	f025 0503 	bic.w	r5, r5, #3
 80039be:	3508      	adds	r5, #8
 80039c0:	2d0c      	cmp	r5, #12
 80039c2:	bf38      	it	cc
 80039c4:	250c      	movcc	r5, #12
 80039c6:	4629      	mov	r1, r5
 80039c8:	4638      	mov	r0, r7
 80039ca:	f7ff ffa5 	bl	8003918 <sbrk_aligned>
 80039ce:	3001      	adds	r0, #1
 80039d0:	d02b      	beq.n	8003a2a <_malloc_r+0xd2>
 80039d2:	6823      	ldr	r3, [r4, #0]
 80039d4:	442b      	add	r3, r5
 80039d6:	6023      	str	r3, [r4, #0]
 80039d8:	e00e      	b.n	80039f8 <_malloc_r+0xa0>
 80039da:	6822      	ldr	r2, [r4, #0]
 80039dc:	1b52      	subs	r2, r2, r5
 80039de:	d41e      	bmi.n	8003a1e <_malloc_r+0xc6>
 80039e0:	2a0b      	cmp	r2, #11
 80039e2:	d916      	bls.n	8003a12 <_malloc_r+0xba>
 80039e4:	1961      	adds	r1, r4, r5
 80039e6:	42a3      	cmp	r3, r4
 80039e8:	6025      	str	r5, [r4, #0]
 80039ea:	bf18      	it	ne
 80039ec:	6059      	strne	r1, [r3, #4]
 80039ee:	6863      	ldr	r3, [r4, #4]
 80039f0:	bf08      	it	eq
 80039f2:	6031      	streq	r1, [r6, #0]
 80039f4:	5162      	str	r2, [r4, r5]
 80039f6:	604b      	str	r3, [r1, #4]
 80039f8:	4638      	mov	r0, r7
 80039fa:	f104 060b 	add.w	r6, r4, #11
 80039fe:	f000 f865 	bl	8003acc <__malloc_unlock>
 8003a02:	f026 0607 	bic.w	r6, r6, #7
 8003a06:	1d23      	adds	r3, r4, #4
 8003a08:	1af2      	subs	r2, r6, r3
 8003a0a:	d0b6      	beq.n	800397a <_malloc_r+0x22>
 8003a0c:	1b9b      	subs	r3, r3, r6
 8003a0e:	50a3      	str	r3, [r4, r2]
 8003a10:	e7b3      	b.n	800397a <_malloc_r+0x22>
 8003a12:	6862      	ldr	r2, [r4, #4]
 8003a14:	42a3      	cmp	r3, r4
 8003a16:	bf0c      	ite	eq
 8003a18:	6032      	streq	r2, [r6, #0]
 8003a1a:	605a      	strne	r2, [r3, #4]
 8003a1c:	e7ec      	b.n	80039f8 <_malloc_r+0xa0>
 8003a1e:	4623      	mov	r3, r4
 8003a20:	6864      	ldr	r4, [r4, #4]
 8003a22:	e7b2      	b.n	800398a <_malloc_r+0x32>
 8003a24:	4634      	mov	r4, r6
 8003a26:	6876      	ldr	r6, [r6, #4]
 8003a28:	e7b9      	b.n	800399e <_malloc_r+0x46>
 8003a2a:	230c      	movs	r3, #12
 8003a2c:	603b      	str	r3, [r7, #0]
 8003a2e:	4638      	mov	r0, r7
 8003a30:	f000 f84c 	bl	8003acc <__malloc_unlock>
 8003a34:	e7a1      	b.n	800397a <_malloc_r+0x22>
 8003a36:	6025      	str	r5, [r4, #0]
 8003a38:	e7de      	b.n	80039f8 <_malloc_r+0xa0>
 8003a3a:	bf00      	nop
 8003a3c:	20004a28 	.word	0x20004a28

08003a40 <_realloc_r>:
 8003a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a44:	4680      	mov	r8, r0
 8003a46:	4614      	mov	r4, r2
 8003a48:	460e      	mov	r6, r1
 8003a4a:	b921      	cbnz	r1, 8003a56 <_realloc_r+0x16>
 8003a4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a50:	4611      	mov	r1, r2
 8003a52:	f7ff bf81 	b.w	8003958 <_malloc_r>
 8003a56:	b92a      	cbnz	r2, 8003a64 <_realloc_r+0x24>
 8003a58:	f7ff ff12 	bl	8003880 <_free_r>
 8003a5c:	4625      	mov	r5, r4
 8003a5e:	4628      	mov	r0, r5
 8003a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a64:	f000 f838 	bl	8003ad8 <_malloc_usable_size_r>
 8003a68:	4284      	cmp	r4, r0
 8003a6a:	4607      	mov	r7, r0
 8003a6c:	d802      	bhi.n	8003a74 <_realloc_r+0x34>
 8003a6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003a72:	d812      	bhi.n	8003a9a <_realloc_r+0x5a>
 8003a74:	4621      	mov	r1, r4
 8003a76:	4640      	mov	r0, r8
 8003a78:	f7ff ff6e 	bl	8003958 <_malloc_r>
 8003a7c:	4605      	mov	r5, r0
 8003a7e:	2800      	cmp	r0, #0
 8003a80:	d0ed      	beq.n	8003a5e <_realloc_r+0x1e>
 8003a82:	42bc      	cmp	r4, r7
 8003a84:	4622      	mov	r2, r4
 8003a86:	4631      	mov	r1, r6
 8003a88:	bf28      	it	cs
 8003a8a:	463a      	movcs	r2, r7
 8003a8c:	f7ff fbb8 	bl	8003200 <memcpy>
 8003a90:	4631      	mov	r1, r6
 8003a92:	4640      	mov	r0, r8
 8003a94:	f7ff fef4 	bl	8003880 <_free_r>
 8003a98:	e7e1      	b.n	8003a5e <_realloc_r+0x1e>
 8003a9a:	4635      	mov	r5, r6
 8003a9c:	e7df      	b.n	8003a5e <_realloc_r+0x1e>
	...

08003aa0 <_sbrk_r>:
 8003aa0:	b538      	push	{r3, r4, r5, lr}
 8003aa2:	4d06      	ldr	r5, [pc, #24]	; (8003abc <_sbrk_r+0x1c>)
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	4604      	mov	r4, r0
 8003aa8:	4608      	mov	r0, r1
 8003aaa:	602b      	str	r3, [r5, #0]
 8003aac:	f7fc fcba 	bl	8000424 <_sbrk>
 8003ab0:	1c43      	adds	r3, r0, #1
 8003ab2:	d102      	bne.n	8003aba <_sbrk_r+0x1a>
 8003ab4:	682b      	ldr	r3, [r5, #0]
 8003ab6:	b103      	cbz	r3, 8003aba <_sbrk_r+0x1a>
 8003ab8:	6023      	str	r3, [r4, #0]
 8003aba:	bd38      	pop	{r3, r4, r5, pc}
 8003abc:	20004a30 	.word	0x20004a30

08003ac0 <__malloc_lock>:
 8003ac0:	4801      	ldr	r0, [pc, #4]	; (8003ac8 <__malloc_lock+0x8>)
 8003ac2:	f000 b811 	b.w	8003ae8 <__retarget_lock_acquire_recursive>
 8003ac6:	bf00      	nop
 8003ac8:	20004a34 	.word	0x20004a34

08003acc <__malloc_unlock>:
 8003acc:	4801      	ldr	r0, [pc, #4]	; (8003ad4 <__malloc_unlock+0x8>)
 8003ace:	f000 b80c 	b.w	8003aea <__retarget_lock_release_recursive>
 8003ad2:	bf00      	nop
 8003ad4:	20004a34 	.word	0x20004a34

08003ad8 <_malloc_usable_size_r>:
 8003ad8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003adc:	1f18      	subs	r0, r3, #4
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	bfbc      	itt	lt
 8003ae2:	580b      	ldrlt	r3, [r1, r0]
 8003ae4:	18c0      	addlt	r0, r0, r3
 8003ae6:	4770      	bx	lr

08003ae8 <__retarget_lock_acquire_recursive>:
 8003ae8:	4770      	bx	lr

08003aea <__retarget_lock_release_recursive>:
 8003aea:	4770      	bx	lr

08003aec <_init>:
 8003aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aee:	bf00      	nop
 8003af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003af2:	bc08      	pop	{r3}
 8003af4:	469e      	mov	lr, r3
 8003af6:	4770      	bx	lr

08003af8 <_fini>:
 8003af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003afa:	bf00      	nop
 8003afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003afe:	bc08      	pop	{r3}
 8003b00:	469e      	mov	lr, r3
 8003b02:	4770      	bx	lr
