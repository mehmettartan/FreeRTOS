
25_FreeRtos_Queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003b74  08003b74  00013b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c10  08003c10  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c10  08003c10  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c10  08003c10  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c10  08003c10  00013c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c14  08003c14  00013c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003c18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          000049c8  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004a34  20004a34  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000105a2  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022ac  00000000  00000000  0003063e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee8  00000000  00000000  000328f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000de0  00000000  00000000  000337d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002873  00000000  00000000  000345b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fde3  00000000  00000000  00036e2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2a86  00000000  00000000  00046c0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00119694  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000424c  00000000  00000000  001196e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003b5c 	.word	0x08003b5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08003b5c 	.word	0x08003b5c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <led_init>:
#include "stm32f4xx.h"
#include "led.h"

void led_init()
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIODEN;
 8000274:	4b11      	ldr	r3, [pc, #68]	; (80002bc <led_init+0x4c>)
 8000276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000278:	4a10      	ldr	r2, [pc, #64]	; (80002bc <led_init+0x4c>)
 800027a:	f043 0308 	orr.w	r3, r3, #8
 800027e:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOD->MODER |= (1U<<24);
 8000280:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <led_init+0x50>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a0e      	ldr	r2, [pc, #56]	; (80002c0 <led_init+0x50>)
 8000286:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800028a:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1U<<25);
 800028c:	4b0c      	ldr	r3, [pc, #48]	; (80002c0 <led_init+0x50>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a0b      	ldr	r2, [pc, #44]	; (80002c0 <led_init+0x50>)
 8000292:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000296:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1U<<26);
 8000298:	4b09      	ldr	r3, [pc, #36]	; (80002c0 <led_init+0x50>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a08      	ldr	r2, [pc, #32]	; (80002c0 <led_init+0x50>)
 800029e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80002a2:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1U<<27);
 80002a4:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <led_init+0x50>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a05      	ldr	r2, [pc, #20]	; (80002c0 <led_init+0x50>)
 80002aa:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80002ae:	6013      	str	r3, [r2, #0]
}
 80002b0:	bf00      	nop
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	40023800 	.word	0x40023800
 80002c0:	40020c00 	.word	0x40020c00

080002c4 <SenderTask>:

QueueHandle_t Queue;


void SenderTask(void* str)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
	uint16_t SendValue;
	vTaskDelay(2000);
 80002cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002d0:	f001 fac0 	bl	8001854 <vTaskDelay>
	for(int i = 0; i <= 10; i++)
 80002d4:	2300      	movs	r3, #0
 80002d6:	60fb      	str	r3, [r7, #12]
 80002d8:	e012      	b.n	8000300 <SenderTask+0x3c>
	{
		SendValue = i*10;
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	b29b      	uxth	r3, r3
 80002de:	461a      	mov	r2, r3
 80002e0:	0092      	lsls	r2, r2, #2
 80002e2:	4413      	add	r3, r2
 80002e4:	005b      	lsls	r3, r3, #1
 80002e6:	b29b      	uxth	r3, r3
 80002e8:	817b      	strh	r3, [r7, #10]
		xQueueSendToBack(Queue, &SendValue, pdMS_TO_TICKS(100));
 80002ea:	4b07      	ldr	r3, [pc, #28]	; (8000308 <SenderTask+0x44>)
 80002ec:	6818      	ldr	r0, [r3, #0]
 80002ee:	f107 010a 	add.w	r1, r7, #10
 80002f2:	2300      	movs	r3, #0
 80002f4:	2264      	movs	r2, #100	; 0x64
 80002f6:	f000 fd23 	bl	8000d40 <xQueueGenericSend>
	for(int i = 0; i <= 10; i++)
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	3301      	adds	r3, #1
 80002fe:	60fb      	str	r3, [r7, #12]
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	2b0a      	cmp	r3, #10
 8000304:	dde9      	ble.n	80002da <SenderTask+0x16>
	}

	for(;;)
 8000306:	e7fe      	b.n	8000306 <SenderTask+0x42>
 8000308:	20000088 	.word	0x20000088

0800030c <ReceiverTask>:

	}
}

void ReceiverTask(void* str)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b090      	sub	sp, #64	; 0x40
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
	uint16_t received_value;
	char string[50];

	for(;;)
	{
		status = xQueueReceive(Queue, &received_value, pdMS_TO_TICKS(5000));
 8000314:	4b0f      	ldr	r3, [pc, #60]	; (8000354 <ReceiverTask+0x48>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 800031c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000320:	4618      	mov	r0, r3
 8000322:	f000 fea7 	bl	8001074 <xQueueReceive>
 8000326:	63f8      	str	r0, [r7, #60]	; 0x3c

		if(status == pdPASS)
 8000328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800032a:	2b01      	cmp	r3, #1
 800032c:	d10d      	bne.n	800034a <ReceiverTask+0x3e>
		{
			sprintf(string, "Received Value: %d\r\n", received_value );
 800032e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000330:	461a      	mov	r2, r3
 8000332:	f107 0308 	add.w	r3, r7, #8
 8000336:	4908      	ldr	r1, [pc, #32]	; (8000358 <ReceiverTask+0x4c>)
 8000338:	4618      	mov	r0, r3
 800033a:	f002 ffaf 	bl	800329c <siprintf>
			uart2_write_string(string);
 800033e:	f107 0308 	add.w	r3, r7, #8
 8000342:	4618      	mov	r0, r3
 8000344:	f000 f914 	bl	8000570 <uart2_write_string>
 8000348:	e7e4      	b.n	8000314 <ReceiverTask+0x8>
		}
		else
		{
			uart2_write_string("Queue is empty.!\r\n");
 800034a:	4804      	ldr	r0, [pc, #16]	; (800035c <ReceiverTask+0x50>)
 800034c:	f000 f910 	bl	8000570 <uart2_write_string>
		status = xQueueReceive(Queue, &received_value, pdMS_TO_TICKS(5000));
 8000350:	e7e0      	b.n	8000314 <ReceiverTask+0x8>
 8000352:	bf00      	nop
 8000354:	20000088 	.word	0x20000088
 8000358:	08003b74 	.word	0x08003b74
 800035c:	08003b8c 	.word	0x08003b8c

08000360 <main>:

	}
}

int main(int argc, char **argv)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af02      	add	r7, sp, #8
 8000366:	6078      	str	r0, [r7, #4]
 8000368:	6039      	str	r1, [r7, #0]
	uart2_tx_init();
 800036a:	f000 f89d 	bl	80004a8 <uart2_tx_init>
	led_init();
 800036e:	f7ff ff7f 	bl	8000270 <led_init>


	Queue = xQueueCreate(5, sizeof(uint16_t));
 8000372:	2200      	movs	r2, #0
 8000374:	2102      	movs	r1, #2
 8000376:	2005      	movs	r0, #5
 8000378:	f000 fc84 	bl	8000c84 <xQueueGenericCreate>
 800037c:	4603      	mov	r3, r0
 800037e:	4a10      	ldr	r2, [pc, #64]	; (80003c0 <main+0x60>)
 8000380:	6013      	str	r3, [r2, #0]

	if(Queue != NULL)
 8000382:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <main+0x60>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d016      	beq.n	80003b8 <main+0x58>
	{
		xTaskCreate(SenderTask, "Sender", configMINIMAL_STACK_SIZE, NULL, 0, NULL);
 800038a:	2300      	movs	r3, #0
 800038c:	9301      	str	r3, [sp, #4]
 800038e:	2300      	movs	r3, #0
 8000390:	9300      	str	r3, [sp, #0]
 8000392:	2300      	movs	r3, #0
 8000394:	2280      	movs	r2, #128	; 0x80
 8000396:	490b      	ldr	r1, [pc, #44]	; (80003c4 <main+0x64>)
 8000398:	480b      	ldr	r0, [pc, #44]	; (80003c8 <main+0x68>)
 800039a:	f001 f916 	bl	80015ca <xTaskCreate>

		xTaskCreate(ReceiverTask, "Receiver", configMINIMAL_STACK_SIZE, NULL, 0, NULL);
 800039e:	2300      	movs	r3, #0
 80003a0:	9301      	str	r3, [sp, #4]
 80003a2:	2300      	movs	r3, #0
 80003a4:	9300      	str	r3, [sp, #0]
 80003a6:	2300      	movs	r3, #0
 80003a8:	2280      	movs	r2, #128	; 0x80
 80003aa:	4908      	ldr	r1, [pc, #32]	; (80003cc <main+0x6c>)
 80003ac:	4808      	ldr	r0, [pc, #32]	; (80003d0 <main+0x70>)
 80003ae:	f001 f90c 	bl	80015ca <xTaskCreate>

		vTaskStartScheduler();
 80003b2:	f001 fa83 	bl	80018bc <vTaskStartScheduler>
 80003b6:	e002      	b.n	80003be <main+0x5e>
	}
	else
	{
		uart2_write_string("Queue Not Created!");
 80003b8:	4806      	ldr	r0, [pc, #24]	; (80003d4 <main+0x74>)
 80003ba:	f000 f8d9 	bl	8000570 <uart2_write_string>
	}

	while(1)
 80003be:	e7fe      	b.n	80003be <main+0x5e>
 80003c0:	20000088 	.word	0x20000088
 80003c4:	08003ba0 	.word	0x08003ba0
 80003c8:	080002c5 	.word	0x080002c5
 80003cc:	08003ba8 	.word	0x08003ba8
 80003d0:	0800030d 	.word	0x0800030d
 80003d4:	08003bb4 	.word	0x08003bb4

080003d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003dc:	e7fe      	b.n	80003dc <NMI_Handler+0x4>

080003de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003de:	b480      	push	{r7}
 80003e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003e2:	e7fe      	b.n	80003e2 <HardFault_Handler+0x4>

080003e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003e8:	e7fe      	b.n	80003e8 <MemManage_Handler+0x4>

080003ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003ea:	b480      	push	{r7}
 80003ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003ee:	e7fe      	b.n	80003ee <BusFault_Handler+0x4>

080003f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003f4:	e7fe      	b.n	80003f4 <UsageFault_Handler+0x4>

080003f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003f6:	b480      	push	{r7}
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003fa:	bf00      	nop
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr

08000404 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800040a:	f000 f914 	bl	8000636 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	2000008c 	.word	0x2000008c

08000418 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000420:	4a14      	ldr	r2, [pc, #80]	; (8000474 <_sbrk+0x5c>)
 8000422:	4b15      	ldr	r3, [pc, #84]	; (8000478 <_sbrk+0x60>)
 8000424:	1ad3      	subs	r3, r2, r3
 8000426:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000428:	697b      	ldr	r3, [r7, #20]
 800042a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800042c:	4b13      	ldr	r3, [pc, #76]	; (800047c <_sbrk+0x64>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d102      	bne.n	800043a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000434:	4b11      	ldr	r3, [pc, #68]	; (800047c <_sbrk+0x64>)
 8000436:	4a12      	ldr	r2, [pc, #72]	; (8000480 <_sbrk+0x68>)
 8000438:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800043a:	4b10      	ldr	r3, [pc, #64]	; (800047c <_sbrk+0x64>)
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4413      	add	r3, r2
 8000442:	693a      	ldr	r2, [r7, #16]
 8000444:	429a      	cmp	r2, r3
 8000446:	d207      	bcs.n	8000458 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000448:	f002 fee8 	bl	800321c <__errno>
 800044c:	4603      	mov	r3, r0
 800044e:	220c      	movs	r2, #12
 8000450:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000452:	f04f 33ff 	mov.w	r3, #4294967295
 8000456:	e009      	b.n	800046c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000458:	4b08      	ldr	r3, [pc, #32]	; (800047c <_sbrk+0x64>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800045e:	4b07      	ldr	r3, [pc, #28]	; (800047c <_sbrk+0x64>)
 8000460:	681a      	ldr	r2, [r3, #0]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4413      	add	r3, r2
 8000466:	4a05      	ldr	r2, [pc, #20]	; (800047c <_sbrk+0x64>)
 8000468:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800046a:	68fb      	ldr	r3, [r7, #12]
}
 800046c:	4618      	mov	r0, r3
 800046e:	3718      	adds	r7, #24
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	20020000 	.word	0x20020000
 8000478:	00000400 	.word	0x00000400
 800047c:	200000d4 	.word	0x200000d4
 8000480:	20004a38 	.word	0x20004a38

08000484 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <SystemInit+0x20>)
 800048a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800048e:	4a05      	ldr	r2, [pc, #20]	; (80004a4 <SystemInit+0x20>)
 8000490:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000494:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	e000ed00 	.word	0xe000ed00

080004a8 <uart2_tx_init>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t Baudrate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t Baudrate);


void uart2_tx_init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOAEN;
 80004ac:	4b20      	ldr	r3, [pc, #128]	; (8000530 <uart2_tx_init+0x88>)
 80004ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b0:	4a1f      	ldr	r2, [pc, #124]	; (8000530 <uart2_tx_init+0x88>)
 80004b2:	f043 0301 	orr.w	r3, r3, #1
 80004b6:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER &=~(1U<<4);
 80004b8:	4b1e      	ldr	r3, [pc, #120]	; (8000534 <uart2_tx_init+0x8c>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a1d      	ldr	r2, [pc, #116]	; (8000534 <uart2_tx_init+0x8c>)
 80004be:	f023 0310 	bic.w	r3, r3, #16
 80004c2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80004c4:	4b1b      	ldr	r3, [pc, #108]	; (8000534 <uart2_tx_init+0x8c>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a1a      	ldr	r2, [pc, #104]	; (8000534 <uart2_tx_init+0x8c>)
 80004ca:	f043 0320 	orr.w	r3, r3, #32
 80004ce:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] |= (1U<<8);
 80004d0:	4b18      	ldr	r3, [pc, #96]	; (8000534 <uart2_tx_init+0x8c>)
 80004d2:	6a1b      	ldr	r3, [r3, #32]
 80004d4:	4a17      	ldr	r2, [pc, #92]	; (8000534 <uart2_tx_init+0x8c>)
 80004d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004da:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 80004dc:	4b15      	ldr	r3, [pc, #84]	; (8000534 <uart2_tx_init+0x8c>)
 80004de:	6a1b      	ldr	r3, [r3, #32]
 80004e0:	4a14      	ldr	r2, [pc, #80]	; (8000534 <uart2_tx_init+0x8c>)
 80004e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 80004e8:	4b12      	ldr	r3, [pc, #72]	; (8000534 <uart2_tx_init+0x8c>)
 80004ea:	6a1b      	ldr	r3, [r3, #32]
 80004ec:	4a11      	ldr	r2, [pc, #68]	; (8000534 <uart2_tx_init+0x8c>)
 80004ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004f2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 80004f4:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <uart2_tx_init+0x8c>)
 80004f6:	6a1b      	ldr	r3, [r3, #32]
 80004f8:	4a0e      	ldr	r2, [pc, #56]	; (8000534 <uart2_tx_init+0x8c>)
 80004fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80004fe:	6213      	str	r3, [r2, #32]

	RCC->APB1ENR |= UART2EN;
 8000500:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <uart2_tx_init+0x88>)
 8000502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000504:	4a0a      	ldr	r2, [pc, #40]	; (8000530 <uart2_tx_init+0x88>)
 8000506:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800050a:	6413      	str	r3, [r2, #64]	; 0x40

	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 800050c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000510:	4909      	ldr	r1, [pc, #36]	; (8000538 <uart2_tx_init+0x90>)
 8000512:	480a      	ldr	r0, [pc, #40]	; (800053c <uart2_tx_init+0x94>)
 8000514:	f000 f841 	bl	800059a <uart_set_baudrate>

	USART2->CR1 = CR1_TE;
 8000518:	4b08      	ldr	r3, [pc, #32]	; (800053c <uart2_tx_init+0x94>)
 800051a:	2208      	movs	r2, #8
 800051c:	60da      	str	r2, [r3, #12]

	USART2->CR1 |= CR1_UE;
 800051e:	4b07      	ldr	r3, [pc, #28]	; (800053c <uart2_tx_init+0x94>)
 8000520:	68db      	ldr	r3, [r3, #12]
 8000522:	4a06      	ldr	r2, [pc, #24]	; (800053c <uart2_tx_init+0x94>)
 8000524:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000528:	60d3      	str	r3, [r2, #12]
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40023800 	.word	0x40023800
 8000534:	40020000 	.word	0x40020000
 8000538:	00f42400 	.word	0x00f42400
 800053c:	40004400 	.word	0x40004400

08000540 <uart2_write_char>:

void uart2_write_char(char ch)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]
	while(! (USART2->SR & SR_TXE)) { }
 800054a:	bf00      	nop
 800054c:	4b07      	ldr	r3, [pc, #28]	; (800056c <uart2_write_char+0x2c>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000554:	2b00      	cmp	r3, #0
 8000556:	d0f9      	beq.n	800054c <uart2_write_char+0xc>

	USART2->DR = (ch & 0xFF);
 8000558:	4a04      	ldr	r2, [pc, #16]	; (800056c <uart2_write_char+0x2c>)
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	6053      	str	r3, [r2, #4]
}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	40004400 	.word	0x40004400

08000570 <uart2_write_string>:

void uart2_write_string(const char* str) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000578:	e006      	b.n	8000588 <uart2_write_string+0x18>
    	uart2_write_char(*str++);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	1c5a      	adds	r2, r3, #1
 800057e:	607a      	str	r2, [r7, #4]
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff ffdc 	bl	8000540 <uart2_write_char>
    while (*str) {
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d1f4      	bne.n	800057a <uart2_write_string+0xa>
    }
}
 8000590:	bf00      	nop
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}

0800059a <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t Baudrate)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	b084      	sub	sp, #16
 800059e:	af00      	add	r7, sp, #0
 80005a0:	60f8      	str	r0, [r7, #12]
 80005a2:	60b9      	str	r1, [r7, #8]
 80005a4:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, Baudrate);
 80005a6:	6879      	ldr	r1, [r7, #4]
 80005a8:	68b8      	ldr	r0, [r7, #8]
 80005aa:	f000 f808 	bl	80005be <compute_uart_bd>
 80005ae:	4603      	mov	r3, r0
 80005b0:	461a      	mov	r2, r3
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	609a      	str	r2, [r3, #8]
}
 80005b6:	bf00      	nop
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}

080005be <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t Baudrate)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
 80005c6:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (Baudrate/2U))/Baudrate);
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	085a      	lsrs	r2, r3, #1
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	441a      	add	r2, r3
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d6:	b29b      	uxth	r3, r3

}
 80005d8:	4618      	mov	r0, r3
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80005e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800061c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005e8:	480d      	ldr	r0, [pc, #52]	; (8000620 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80005ea:	490e      	ldr	r1, [pc, #56]	; (8000624 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80005ec:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f0:	e002      	b.n	80005f8 <LoopCopyDataInit>

080005f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f6:	3304      	adds	r3, #4

080005f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005fc:	d3f9      	bcc.n	80005f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fe:	4a0b      	ldr	r2, [pc, #44]	; (800062c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000600:	4c0b      	ldr	r4, [pc, #44]	; (8000630 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000604:	e001      	b.n	800060a <LoopFillZerobss>

08000606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000608:	3204      	adds	r2, #4

0800060a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800060c:	d3fb      	bcc.n	8000606 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800060e:	f7ff ff39 	bl	8000484 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000612:	f002 fe09 	bl	8003228 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000616:	f7ff fea3 	bl	8000360 <main>
  bx  lr    
 800061a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800061c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000624:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000628:	08003c18 	.word	0x08003c18
  ldr r2, =_sbss
 800062c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000630:	20004a34 	.word	0x20004a34

08000634 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000634:	e7fe      	b.n	8000634 <ADC_IRQHandler>

08000636 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	b082      	sub	sp, #8
 800063a:	af00      	add	r7, sp, #0
 800063c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	691b      	ldr	r3, [r3, #16]
 8000644:	f003 0302 	and.w	r3, r3, #2
 8000648:	2b02      	cmp	r3, #2
 800064a:	d122      	bne.n	8000692 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	68db      	ldr	r3, [r3, #12]
 8000652:	f003 0302 	and.w	r3, r3, #2
 8000656:	2b02      	cmp	r3, #2
 8000658:	d11b      	bne.n	8000692 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	f06f 0202 	mvn.w	r2, #2
 8000662:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2201      	movs	r2, #1
 8000668:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f003 0303 	and.w	r3, r3, #3
 8000674:	2b00      	cmp	r3, #0
 8000676:	d003      	beq.n	8000680 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f000 f8f8 	bl	800086e <HAL_TIM_IC_CaptureCallback>
 800067e:	e005      	b.n	800068c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f000 f8ea 	bl	800085a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f000 f8fb 	bl	8000882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2200      	movs	r2, #0
 8000690:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	f003 0304 	and.w	r3, r3, #4
 800069c:	2b04      	cmp	r3, #4
 800069e:	d122      	bne.n	80006e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	68db      	ldr	r3, [r3, #12]
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	2b04      	cmp	r3, #4
 80006ac:	d11b      	bne.n	80006e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f06f 0204 	mvn.w	r2, #4
 80006b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2202      	movs	r2, #2
 80006bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d003      	beq.n	80006d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f000 f8ce 	bl	800086e <HAL_TIM_IC_CaptureCallback>
 80006d2:	e005      	b.n	80006e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f000 f8c0 	bl	800085a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f000 f8d1 	bl	8000882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2200      	movs	r2, #0
 80006e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	691b      	ldr	r3, [r3, #16]
 80006ec:	f003 0308 	and.w	r3, r3, #8
 80006f0:	2b08      	cmp	r3, #8
 80006f2:	d122      	bne.n	800073a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	68db      	ldr	r3, [r3, #12]
 80006fa:	f003 0308 	and.w	r3, r3, #8
 80006fe:	2b08      	cmp	r3, #8
 8000700:	d11b      	bne.n	800073a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f06f 0208 	mvn.w	r2, #8
 800070a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2204      	movs	r2, #4
 8000710:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	69db      	ldr	r3, [r3, #28]
 8000718:	f003 0303 	and.w	r3, r3, #3
 800071c:	2b00      	cmp	r3, #0
 800071e:	d003      	beq.n	8000728 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f000 f8a4 	bl	800086e <HAL_TIM_IC_CaptureCallback>
 8000726:	e005      	b.n	8000734 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f000 f896 	bl	800085a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f000 f8a7 	bl	8000882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2200      	movs	r2, #0
 8000738:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	691b      	ldr	r3, [r3, #16]
 8000740:	f003 0310 	and.w	r3, r3, #16
 8000744:	2b10      	cmp	r3, #16
 8000746:	d122      	bne.n	800078e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	68db      	ldr	r3, [r3, #12]
 800074e:	f003 0310 	and.w	r3, r3, #16
 8000752:	2b10      	cmp	r3, #16
 8000754:	d11b      	bne.n	800078e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f06f 0210 	mvn.w	r2, #16
 800075e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2208      	movs	r2, #8
 8000764:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	69db      	ldr	r3, [r3, #28]
 800076c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000770:	2b00      	cmp	r3, #0
 8000772:	d003      	beq.n	800077c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f000 f87a 	bl	800086e <HAL_TIM_IC_CaptureCallback>
 800077a:	e005      	b.n	8000788 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f000 f86c 	bl	800085a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f000 f87d 	bl	8000882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2200      	movs	r2, #0
 800078c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	691b      	ldr	r3, [r3, #16]
 8000794:	f003 0301 	and.w	r3, r3, #1
 8000798:	2b01      	cmp	r3, #1
 800079a:	d10e      	bne.n	80007ba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	68db      	ldr	r3, [r3, #12]
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d107      	bne.n	80007ba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f06f 0201 	mvn.w	r2, #1
 80007b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f000 f846 	bl	8000846 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	691b      	ldr	r3, [r3, #16]
 80007c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c4:	2b80      	cmp	r3, #128	; 0x80
 80007c6:	d10e      	bne.n	80007e6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	68db      	ldr	r3, [r3, #12]
 80007ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d2:	2b80      	cmp	r3, #128	; 0x80
 80007d4:	d107      	bne.n	80007e6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80007de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f000 f86c 	bl	80008be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	691b      	ldr	r3, [r3, #16]
 80007ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007f0:	2b40      	cmp	r3, #64	; 0x40
 80007f2:	d10e      	bne.n	8000812 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	68db      	ldr	r3, [r3, #12]
 80007fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007fe:	2b40      	cmp	r3, #64	; 0x40
 8000800:	d107      	bne.n	8000812 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800080a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f000 f842 	bl	8000896 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	691b      	ldr	r3, [r3, #16]
 8000818:	f003 0320 	and.w	r3, r3, #32
 800081c:	2b20      	cmp	r3, #32
 800081e:	d10e      	bne.n	800083e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	68db      	ldr	r3, [r3, #12]
 8000826:	f003 0320 	and.w	r3, r3, #32
 800082a:	2b20      	cmp	r3, #32
 800082c:	d107      	bne.n	800083e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f06f 0220 	mvn.w	r2, #32
 8000836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f000 f836 	bl	80008aa <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000846:	b480      	push	{r7}
 8000848:	b083      	sub	sp, #12
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800085a:	b480      	push	{r7}
 800085c:	b083      	sub	sp, #12
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800086e:	b480      	push	{r7}
 8000870:	b083      	sub	sp, #12
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8000876:	bf00      	nop
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000882:	b480      	push	{r7}
 8000884:	b083      	sub	sp, #12
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8000896:	b480      	push	{r7}
 8000898:	b083      	sub	sp, #12
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80008aa:	b480      	push	{r7}
 80008ac:	b083      	sub	sp, #12
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80008be:	b480      	push	{r7}
 80008c0:	b083      	sub	sp, #12
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
	...

080008d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <SysTick_Handler+0x1c>)
 80008da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80008dc:	f001 fc36 	bl	800214c <xTaskGetSchedulerState>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d001      	beq.n	80008ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80008e6:	f002 fa1f 	bl	8002d28 <xPortSysTickHandler>
  }
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	e000e010 	.word	0xe000e010

080008f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	4a07      	ldr	r2, [pc, #28]	; (8000920 <vApplicationGetIdleTaskMemory+0x2c>)
 8000904:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	4a06      	ldr	r2, [pc, #24]	; (8000924 <vApplicationGetIdleTaskMemory+0x30>)
 800090a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2280      	movs	r2, #128	; 0x80
 8000910:	601a      	str	r2, [r3, #0]
}
 8000912:	bf00      	nop
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	200000d8 	.word	0x200000d8
 8000924:	20000134 	.word	0x20000134

08000928 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	4a07      	ldr	r2, [pc, #28]	; (8000954 <vApplicationGetTimerTaskMemory+0x2c>)
 8000938:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	4a06      	ldr	r2, [pc, #24]	; (8000958 <vApplicationGetTimerTaskMemory+0x30>)
 800093e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000946:	601a      	str	r2, [r3, #0]
}
 8000948:	bf00      	nop
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	20000334 	.word	0x20000334
 8000958:	20000390 	.word	0x20000390

0800095c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f103 0208 	add.w	r2, r3, #8
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	f04f 32ff 	mov.w	r2, #4294967295
 8000974:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	f103 0208 	add.w	r2, r3, #8
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f103 0208 	add.w	r2, r3, #8
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80009b6:	b480      	push	{r7}
 80009b8:	b085      	sub	sp, #20
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
 80009be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	68fa      	ldr	r2, [r7, #12]
 80009ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	689a      	ldr	r2, [r3, #8]
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	683a      	ldr	r2, [r7, #0]
 80009da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	683a      	ldr	r2, [r7, #0]
 80009e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	1c5a      	adds	r2, r3, #1
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	601a      	str	r2, [r3, #0]
}
 80009f2:	bf00      	nop
 80009f4:	3714      	adds	r7, #20
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80009fe:	b480      	push	{r7}
 8000a00:	b085      	sub	sp, #20
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
 8000a06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a14:	d103      	bne.n	8000a1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	691b      	ldr	r3, [r3, #16]
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	e00c      	b.n	8000a38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	3308      	adds	r3, #8
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	e002      	b.n	8000a2c <vListInsert+0x2e>
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d2f6      	bcs.n	8000a26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	685a      	ldr	r2, [r3, #4]
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	683a      	ldr	r2, [r7, #0]
 8000a46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	68fa      	ldr	r2, [r7, #12]
 8000a4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	683a      	ldr	r2, [r7, #0]
 8000a52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	1c5a      	adds	r2, r3, #1
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	601a      	str	r2, [r3, #0]
}
 8000a64:	bf00      	nop
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	691b      	ldr	r3, [r3, #16]
 8000a7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	6892      	ldr	r2, [r2, #8]
 8000a86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	6852      	ldr	r2, [r2, #4]
 8000a90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d103      	bne.n	8000aa4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	689a      	ldr	r2, [r3, #8]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	1e5a      	subs	r2, r3, #1
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	681b      	ldr	r3, [r3, #0]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d10a      	bne.n	8000aee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000adc:	f383 8811 	msr	BASEPRI, r3
 8000ae0:	f3bf 8f6f 	isb	sy
 8000ae4:	f3bf 8f4f 	dsb	sy
 8000ae8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000aea:	bf00      	nop
 8000aec:	e7fe      	b.n	8000aec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8000aee:	f002 f889 	bl	8002c04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000afa:	68f9      	ldr	r1, [r7, #12]
 8000afc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000afe:	fb01 f303 	mul.w	r3, r1, r3
 8000b02:	441a      	add	r2, r3
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	68f9      	ldr	r1, [r7, #12]
 8000b22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000b24:	fb01 f303 	mul.w	r3, r1, r3
 8000b28:	441a      	add	r2, r3
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	22ff      	movs	r2, #255	; 0xff
 8000b32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	22ff      	movs	r2, #255	; 0xff
 8000b3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d114      	bne.n	8000b6e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	691b      	ldr	r3, [r3, #16]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d01a      	beq.n	8000b82 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	3310      	adds	r3, #16
 8000b50:	4618      	mov	r0, r3
 8000b52:	f001 f93d 	bl	8001dd0 <xTaskRemoveFromEventList>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d012      	beq.n	8000b82 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <xQueueGenericReset+0xcc>)
 8000b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	f3bf 8f4f 	dsb	sy
 8000b68:	f3bf 8f6f 	isb	sy
 8000b6c:	e009      	b.n	8000b82 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	3310      	adds	r3, #16
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fef2 	bl	800095c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	3324      	adds	r3, #36	; 0x24
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff feed 	bl	800095c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000b82:	f002 f86f 	bl	8002c64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000b86:	2301      	movs	r3, #1
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	e000ed04 	.word	0xe000ed04

08000b94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08e      	sub	sp, #56	; 0x38
 8000b98:	af02      	add	r7, sp, #8
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
 8000ba0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d10a      	bne.n	8000bbe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8000ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bac:	f383 8811 	msr	BASEPRI, r3
 8000bb0:	f3bf 8f6f 	isb	sy
 8000bb4:	f3bf 8f4f 	dsb	sy
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000bba:	bf00      	nop
 8000bbc:	e7fe      	b.n	8000bbc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d10a      	bne.n	8000bda <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8000bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bc8:	f383 8811 	msr	BASEPRI, r3
 8000bcc:	f3bf 8f6f 	isb	sy
 8000bd0:	f3bf 8f4f 	dsb	sy
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000bd6:	bf00      	nop
 8000bd8:	e7fe      	b.n	8000bd8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d002      	beq.n	8000be6 <xQueueGenericCreateStatic+0x52>
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <xQueueGenericCreateStatic+0x56>
 8000be6:	2301      	movs	r3, #1
 8000be8:	e000      	b.n	8000bec <xQueueGenericCreateStatic+0x58>
 8000bea:	2300      	movs	r3, #0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d10a      	bne.n	8000c06 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8000bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bf4:	f383 8811 	msr	BASEPRI, r3
 8000bf8:	f3bf 8f6f 	isb	sy
 8000bfc:	f3bf 8f4f 	dsb	sy
 8000c00:	623b      	str	r3, [r7, #32]
}
 8000c02:	bf00      	nop
 8000c04:	e7fe      	b.n	8000c04 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d102      	bne.n	8000c12 <xQueueGenericCreateStatic+0x7e>
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d101      	bne.n	8000c16 <xQueueGenericCreateStatic+0x82>
 8000c12:	2301      	movs	r3, #1
 8000c14:	e000      	b.n	8000c18 <xQueueGenericCreateStatic+0x84>
 8000c16:	2300      	movs	r3, #0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d10a      	bne.n	8000c32 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8000c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c20:	f383 8811 	msr	BASEPRI, r3
 8000c24:	f3bf 8f6f 	isb	sy
 8000c28:	f3bf 8f4f 	dsb	sy
 8000c2c:	61fb      	str	r3, [r7, #28]
}
 8000c2e:	bf00      	nop
 8000c30:	e7fe      	b.n	8000c30 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8000c32:	2350      	movs	r3, #80	; 0x50
 8000c34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	2b50      	cmp	r3, #80	; 0x50
 8000c3a:	d00a      	beq.n	8000c52 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8000c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c40:	f383 8811 	msr	BASEPRI, r3
 8000c44:	f3bf 8f6f 	isb	sy
 8000c48:	f3bf 8f4f 	dsb	sy
 8000c4c:	61bb      	str	r3, [r7, #24]
}
 8000c4e:	bf00      	nop
 8000c50:	e7fe      	b.n	8000c50 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8000c52:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8000c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d00d      	beq.n	8000c7a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8000c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c60:	2201      	movs	r2, #1
 8000c62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000c66:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	4613      	mov	r3, r2
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	68b9      	ldr	r1, [r7, #8]
 8000c74:	68f8      	ldr	r0, [r7, #12]
 8000c76:	f000 f83f 	bl	8000cf8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3730      	adds	r7, #48	; 0x30
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af02      	add	r7, sp, #8
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d10a      	bne.n	8000cae <xQueueGenericCreate+0x2a>
	__asm volatile
 8000c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c9c:	f383 8811 	msr	BASEPRI, r3
 8000ca0:	f3bf 8f6f 	isb	sy
 8000ca4:	f3bf 8f4f 	dsb	sy
 8000ca8:	613b      	str	r3, [r7, #16]
}
 8000caa:	bf00      	nop
 8000cac:	e7fe      	b.n	8000cac <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	68ba      	ldr	r2, [r7, #8]
 8000cb2:	fb02 f303 	mul.w	r3, r2, r3
 8000cb6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	3350      	adds	r3, #80	; 0x50
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f002 f8c3 	bl	8002e48 <pvPortMalloc>
 8000cc2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d011      	beq.n	8000cee <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	3350      	adds	r3, #80	; 0x50
 8000cd2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000cdc:	79fa      	ldrb	r2, [r7, #7]
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	697a      	ldr	r2, [r7, #20]
 8000ce6:	68b9      	ldr	r1, [r7, #8]
 8000ce8:	68f8      	ldr	r0, [r7, #12]
 8000cea:	f000 f805 	bl	8000cf8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000cee:	69bb      	ldr	r3, [r7, #24]
	}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3720      	adds	r7, #32
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
 8000d04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d103      	bne.n	8000d14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	e002      	b.n	8000d1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	68fa      	ldr	r2, [r7, #12]
 8000d1e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000d26:	2101      	movs	r1, #1
 8000d28:	69b8      	ldr	r0, [r7, #24]
 8000d2a:	f7ff fecb 	bl	8000ac4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	78fa      	ldrb	r2, [r7, #3]
 8000d32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08e      	sub	sp, #56	; 0x38
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
 8000d4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d10a      	bne.n	8000d72 <xQueueGenericSend+0x32>
	__asm volatile
 8000d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d60:	f383 8811 	msr	BASEPRI, r3
 8000d64:	f3bf 8f6f 	isb	sy
 8000d68:	f3bf 8f4f 	dsb	sy
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000d6e:	bf00      	nop
 8000d70:	e7fe      	b.n	8000d70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d103      	bne.n	8000d80 <xQueueGenericSend+0x40>
 8000d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d101      	bne.n	8000d84 <xQueueGenericSend+0x44>
 8000d80:	2301      	movs	r3, #1
 8000d82:	e000      	b.n	8000d86 <xQueueGenericSend+0x46>
 8000d84:	2300      	movs	r3, #0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d10a      	bne.n	8000da0 <xQueueGenericSend+0x60>
	__asm volatile
 8000d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d8e:	f383 8811 	msr	BASEPRI, r3
 8000d92:	f3bf 8f6f 	isb	sy
 8000d96:	f3bf 8f4f 	dsb	sy
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000d9c:	bf00      	nop
 8000d9e:	e7fe      	b.n	8000d9e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d103      	bne.n	8000dae <xQueueGenericSend+0x6e>
 8000da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d101      	bne.n	8000db2 <xQueueGenericSend+0x72>
 8000dae:	2301      	movs	r3, #1
 8000db0:	e000      	b.n	8000db4 <xQueueGenericSend+0x74>
 8000db2:	2300      	movs	r3, #0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d10a      	bne.n	8000dce <xQueueGenericSend+0x8e>
	__asm volatile
 8000db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dbc:	f383 8811 	msr	BASEPRI, r3
 8000dc0:	f3bf 8f6f 	isb	sy
 8000dc4:	f3bf 8f4f 	dsb	sy
 8000dc8:	623b      	str	r3, [r7, #32]
}
 8000dca:	bf00      	nop
 8000dcc:	e7fe      	b.n	8000dcc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000dce:	f001 f9bd 	bl	800214c <xTaskGetSchedulerState>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d102      	bne.n	8000dde <xQueueGenericSend+0x9e>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d101      	bne.n	8000de2 <xQueueGenericSend+0xa2>
 8000dde:	2301      	movs	r3, #1
 8000de0:	e000      	b.n	8000de4 <xQueueGenericSend+0xa4>
 8000de2:	2300      	movs	r3, #0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d10a      	bne.n	8000dfe <xQueueGenericSend+0xbe>
	__asm volatile
 8000de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dec:	f383 8811 	msr	BASEPRI, r3
 8000df0:	f3bf 8f6f 	isb	sy
 8000df4:	f3bf 8f4f 	dsb	sy
 8000df8:	61fb      	str	r3, [r7, #28]
}
 8000dfa:	bf00      	nop
 8000dfc:	e7fe      	b.n	8000dfc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000dfe:	f001 ff01 	bl	8002c04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d302      	bcc.n	8000e14 <xQueueGenericSend+0xd4>
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d129      	bne.n	8000e68 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000e14:	683a      	ldr	r2, [r7, #0]
 8000e16:	68b9      	ldr	r1, [r7, #8]
 8000e18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e1a:	f000 fa0b 	bl	8001234 <prvCopyDataToQueue>
 8000e1e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d010      	beq.n	8000e4a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e2a:	3324      	adds	r3, #36	; 0x24
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f000 ffcf 	bl	8001dd0 <xTaskRemoveFromEventList>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d013      	beq.n	8000e60 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000e38:	4b3f      	ldr	r3, [pc, #252]	; (8000f38 <xQueueGenericSend+0x1f8>)
 8000e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	f3bf 8f4f 	dsb	sy
 8000e44:	f3bf 8f6f 	isb	sy
 8000e48:	e00a      	b.n	8000e60 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d007      	beq.n	8000e60 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000e50:	4b39      	ldr	r3, [pc, #228]	; (8000f38 <xQueueGenericSend+0x1f8>)
 8000e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	f3bf 8f4f 	dsb	sy
 8000e5c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000e60:	f001 ff00 	bl	8002c64 <vPortExitCritical>
				return pdPASS;
 8000e64:	2301      	movs	r3, #1
 8000e66:	e063      	b.n	8000f30 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d103      	bne.n	8000e76 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000e6e:	f001 fef9 	bl	8002c64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	e05c      	b.n	8000f30 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d106      	bne.n	8000e8a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4618      	mov	r0, r3
 8000e82:	f001 f809 	bl	8001e98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000e86:	2301      	movs	r3, #1
 8000e88:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000e8a:	f001 feeb 	bl	8002c64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000e8e:	f000 fd7b 	bl	8001988 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000e92:	f001 feb7 	bl	8002c04 <vPortEnterCritical>
 8000e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e9c:	b25b      	sxtb	r3, r3
 8000e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea2:	d103      	bne.n	8000eac <xQueueGenericSend+0x16c>
 8000ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000eb2:	b25b      	sxtb	r3, r3
 8000eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb8:	d103      	bne.n	8000ec2 <xQueueGenericSend+0x182>
 8000eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000ec2:	f001 fecf 	bl	8002c64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000ec6:	1d3a      	adds	r2, r7, #4
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4611      	mov	r1, r2
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 fff8 	bl	8001ec4 <xTaskCheckForTimeOut>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d124      	bne.n	8000f24 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000eda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000edc:	f000 faa2 	bl	8001424 <prvIsQueueFull>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d018      	beq.n	8000f18 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ee8:	3310      	adds	r3, #16
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	4611      	mov	r1, r2
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 ff1e 	bl	8001d30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000ef4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ef6:	f000 fa2d 	bl	8001354 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000efa:	f000 fd53 	bl	80019a4 <xTaskResumeAll>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	f47f af7c 	bne.w	8000dfe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <xQueueGenericSend+0x1f8>)
 8000f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	f3bf 8f4f 	dsb	sy
 8000f12:	f3bf 8f6f 	isb	sy
 8000f16:	e772      	b.n	8000dfe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000f18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f1a:	f000 fa1b 	bl	8001354 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000f1e:	f000 fd41 	bl	80019a4 <xTaskResumeAll>
 8000f22:	e76c      	b.n	8000dfe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000f24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f26:	f000 fa15 	bl	8001354 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000f2a:	f000 fd3b 	bl	80019a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000f2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3738      	adds	r7, #56	; 0x38
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	e000ed04 	.word	0xe000ed04

08000f3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b090      	sub	sp, #64	; 0x40
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8000f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d10a      	bne.n	8000f6a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8000f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f58:	f383 8811 	msr	BASEPRI, r3
 8000f5c:	f3bf 8f6f 	isb	sy
 8000f60:	f3bf 8f4f 	dsb	sy
 8000f64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000f66:	bf00      	nop
 8000f68:	e7fe      	b.n	8000f68 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d103      	bne.n	8000f78 <xQueueGenericSendFromISR+0x3c>
 8000f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d101      	bne.n	8000f7c <xQueueGenericSendFromISR+0x40>
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e000      	b.n	8000f7e <xQueueGenericSendFromISR+0x42>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d10a      	bne.n	8000f98 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8000f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f86:	f383 8811 	msr	BASEPRI, r3
 8000f8a:	f3bf 8f6f 	isb	sy
 8000f8e:	f3bf 8f4f 	dsb	sy
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000f94:	bf00      	nop
 8000f96:	e7fe      	b.n	8000f96 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d103      	bne.n	8000fa6 <xQueueGenericSendFromISR+0x6a>
 8000f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d101      	bne.n	8000faa <xQueueGenericSendFromISR+0x6e>
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e000      	b.n	8000fac <xQueueGenericSendFromISR+0x70>
 8000faa:	2300      	movs	r3, #0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d10a      	bne.n	8000fc6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8000fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fb4:	f383 8811 	msr	BASEPRI, r3
 8000fb8:	f3bf 8f6f 	isb	sy
 8000fbc:	f3bf 8f4f 	dsb	sy
 8000fc0:	623b      	str	r3, [r7, #32]
}
 8000fc2:	bf00      	nop
 8000fc4:	e7fe      	b.n	8000fc4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000fc6:	f001 feff 	bl	8002dc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000fca:	f3ef 8211 	mrs	r2, BASEPRI
 8000fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fd2:	f383 8811 	msr	BASEPRI, r3
 8000fd6:	f3bf 8f6f 	isb	sy
 8000fda:	f3bf 8f4f 	dsb	sy
 8000fde:	61fa      	str	r2, [r7, #28]
 8000fe0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000fe2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000fe4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d302      	bcc.n	8000ff8 <xQueueGenericSendFromISR+0xbc>
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d12f      	bne.n	8001058 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ffa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001006:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001008:	683a      	ldr	r2, [r7, #0]
 800100a:	68b9      	ldr	r1, [r7, #8]
 800100c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800100e:	f000 f911 	bl	8001234 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001012:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800101a:	d112      	bne.n	8001042 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800101c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800101e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001020:	2b00      	cmp	r3, #0
 8001022:	d016      	beq.n	8001052 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001026:	3324      	adds	r3, #36	; 0x24
 8001028:	4618      	mov	r0, r3
 800102a:	f000 fed1 	bl	8001dd0 <xTaskRemoveFromEventList>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d00e      	beq.n	8001052 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00b      	beq.n	8001052 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2201      	movs	r2, #1
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	e007      	b.n	8001052 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001042:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001046:	3301      	adds	r3, #1
 8001048:	b2db      	uxtb	r3, r3
 800104a:	b25a      	sxtb	r2, r3
 800104c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800104e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001052:	2301      	movs	r3, #1
 8001054:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8001056:	e001      	b.n	800105c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001058:	2300      	movs	r3, #0
 800105a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800105c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800105e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001066:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800106a:	4618      	mov	r0, r3
 800106c:	3740      	adds	r7, #64	; 0x40
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08c      	sub	sp, #48	; 0x30
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001080:	2300      	movs	r3, #0
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800108a:	2b00      	cmp	r3, #0
 800108c:	d10a      	bne.n	80010a4 <xQueueReceive+0x30>
	__asm volatile
 800108e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001092:	f383 8811 	msr	BASEPRI, r3
 8001096:	f3bf 8f6f 	isb	sy
 800109a:	f3bf 8f4f 	dsb	sy
 800109e:	623b      	str	r3, [r7, #32]
}
 80010a0:	bf00      	nop
 80010a2:	e7fe      	b.n	80010a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d103      	bne.n	80010b2 <xQueueReceive+0x3e>
 80010aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <xQueueReceive+0x42>
 80010b2:	2301      	movs	r3, #1
 80010b4:	e000      	b.n	80010b8 <xQueueReceive+0x44>
 80010b6:	2300      	movs	r3, #0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d10a      	bne.n	80010d2 <xQueueReceive+0x5e>
	__asm volatile
 80010bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010c0:	f383 8811 	msr	BASEPRI, r3
 80010c4:	f3bf 8f6f 	isb	sy
 80010c8:	f3bf 8f4f 	dsb	sy
 80010cc:	61fb      	str	r3, [r7, #28]
}
 80010ce:	bf00      	nop
 80010d0:	e7fe      	b.n	80010d0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80010d2:	f001 f83b 	bl	800214c <xTaskGetSchedulerState>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d102      	bne.n	80010e2 <xQueueReceive+0x6e>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <xQueueReceive+0x72>
 80010e2:	2301      	movs	r3, #1
 80010e4:	e000      	b.n	80010e8 <xQueueReceive+0x74>
 80010e6:	2300      	movs	r3, #0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d10a      	bne.n	8001102 <xQueueReceive+0x8e>
	__asm volatile
 80010ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010f0:	f383 8811 	msr	BASEPRI, r3
 80010f4:	f3bf 8f6f 	isb	sy
 80010f8:	f3bf 8f4f 	dsb	sy
 80010fc:	61bb      	str	r3, [r7, #24]
}
 80010fe:	bf00      	nop
 8001100:	e7fe      	b.n	8001100 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001102:	f001 fd7f 	bl	8002c04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800110a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110e:	2b00      	cmp	r3, #0
 8001110:	d01f      	beq.n	8001152 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001112:	68b9      	ldr	r1, [r7, #8]
 8001114:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001116:	f000 f8f7 	bl	8001308 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800111a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111c:	1e5a      	subs	r2, r3, #1
 800111e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001120:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001124:	691b      	ldr	r3, [r3, #16]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d00f      	beq.n	800114a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800112a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800112c:	3310      	adds	r3, #16
 800112e:	4618      	mov	r0, r3
 8001130:	f000 fe4e 	bl	8001dd0 <xTaskRemoveFromEventList>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d007      	beq.n	800114a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800113a:	4b3d      	ldr	r3, [pc, #244]	; (8001230 <xQueueReceive+0x1bc>)
 800113c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	f3bf 8f4f 	dsb	sy
 8001146:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800114a:	f001 fd8b 	bl	8002c64 <vPortExitCritical>
				return pdPASS;
 800114e:	2301      	movs	r3, #1
 8001150:	e069      	b.n	8001226 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d103      	bne.n	8001160 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001158:	f001 fd84 	bl	8002c64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800115c:	2300      	movs	r3, #0
 800115e:	e062      	b.n	8001226 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001162:	2b00      	cmp	r3, #0
 8001164:	d106      	bne.n	8001174 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001166:	f107 0310 	add.w	r3, r7, #16
 800116a:	4618      	mov	r0, r3
 800116c:	f000 fe94 	bl	8001e98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001170:	2301      	movs	r3, #1
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001174:	f001 fd76 	bl	8002c64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001178:	f000 fc06 	bl	8001988 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800117c:	f001 fd42 	bl	8002c04 <vPortEnterCritical>
 8001180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001182:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001186:	b25b      	sxtb	r3, r3
 8001188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800118c:	d103      	bne.n	8001196 <xQueueReceive+0x122>
 800118e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001198:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800119c:	b25b      	sxtb	r3, r3
 800119e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a2:	d103      	bne.n	80011ac <xQueueReceive+0x138>
 80011a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80011ac:	f001 fd5a 	bl	8002c64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80011b0:	1d3a      	adds	r2, r7, #4
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	4611      	mov	r1, r2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 fe83 	bl	8001ec4 <xTaskCheckForTimeOut>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d123      	bne.n	800120c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80011c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011c6:	f000 f917 	bl	80013f8 <prvIsQueueEmpty>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d017      	beq.n	8001200 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80011d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d2:	3324      	adds	r3, #36	; 0x24
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 fda9 	bl	8001d30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80011de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011e0:	f000 f8b8 	bl	8001354 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80011e4:	f000 fbde 	bl	80019a4 <xTaskResumeAll>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d189      	bne.n	8001102 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <xQueueReceive+0x1bc>)
 80011f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	f3bf 8f4f 	dsb	sy
 80011fa:	f3bf 8f6f 	isb	sy
 80011fe:	e780      	b.n	8001102 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001200:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001202:	f000 f8a7 	bl	8001354 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001206:	f000 fbcd 	bl	80019a4 <xTaskResumeAll>
 800120a:	e77a      	b.n	8001102 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800120c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800120e:	f000 f8a1 	bl	8001354 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001212:	f000 fbc7 	bl	80019a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001216:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001218:	f000 f8ee 	bl	80013f8 <prvIsQueueEmpty>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	f43f af6f 	beq.w	8001102 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001224:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001226:	4618      	mov	r0, r3
 8001228:	3730      	adds	r7, #48	; 0x30
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	e000ed04 	.word	0xe000ed04

08001234 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001248:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	2b00      	cmp	r3, #0
 8001250:	d10d      	bne.n	800126e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d14d      	bne.n	80012f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	4618      	mov	r0, r3
 8001260:	f000 ff92 	bl	8002188 <xTaskPriorityDisinherit>
 8001264:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	e043      	b.n	80012f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d119      	bne.n	80012a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	6858      	ldr	r0, [r3, #4]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	461a      	mov	r2, r3
 800127e:	68b9      	ldr	r1, [r7, #8]
 8001280:	f001 fff6 	bl	8003270 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	441a      	add	r2, r3
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	685a      	ldr	r2, [r3, #4]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	429a      	cmp	r2, r3
 800129c:	d32b      	bcc.n	80012f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	e026      	b.n	80012f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	68d8      	ldr	r0, [r3, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	461a      	mov	r2, r3
 80012b2:	68b9      	ldr	r1, [r7, #8]
 80012b4:	f001 ffdc 	bl	8003270 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	68da      	ldr	r2, [r3, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	425b      	negs	r3, r3
 80012c2:	441a      	add	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	68da      	ldr	r2, [r3, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d207      	bcs.n	80012e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	425b      	negs	r3, r3
 80012de:	441a      	add	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d105      	bne.n	80012f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d002      	beq.n	80012f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1c5a      	adds	r2, r3, #1
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80012fe:	697b      	ldr	r3, [r7, #20]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	2b00      	cmp	r3, #0
 8001318:	d018      	beq.n	800134c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68da      	ldr	r2, [r3, #12]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	441a      	add	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68da      	ldr	r2, [r3, #12]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	429a      	cmp	r2, r3
 8001332:	d303      	bcc.n	800133c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68d9      	ldr	r1, [r3, #12]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001344:	461a      	mov	r2, r3
 8001346:	6838      	ldr	r0, [r7, #0]
 8001348:	f001 ff92 	bl	8003270 <memcpy>
	}
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800135c:	f001 fc52 	bl	8002c04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001366:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001368:	e011      	b.n	800138e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136e:	2b00      	cmp	r3, #0
 8001370:	d012      	beq.n	8001398 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3324      	adds	r3, #36	; 0x24
 8001376:	4618      	mov	r0, r3
 8001378:	f000 fd2a 	bl	8001dd0 <xTaskRemoveFromEventList>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001382:	f000 fe01 	bl	8001f88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	3b01      	subs	r3, #1
 800138a:	b2db      	uxtb	r3, r3
 800138c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800138e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001392:	2b00      	cmp	r3, #0
 8001394:	dce9      	bgt.n	800136a <prvUnlockQueue+0x16>
 8001396:	e000      	b.n	800139a <prvUnlockQueue+0x46>
					break;
 8001398:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	22ff      	movs	r2, #255	; 0xff
 800139e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80013a2:	f001 fc5f 	bl	8002c64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80013a6:	f001 fc2d 	bl	8002c04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80013b2:	e011      	b.n	80013d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d012      	beq.n	80013e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3310      	adds	r3, #16
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 fd05 	bl	8001dd0 <xTaskRemoveFromEventList>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80013cc:	f000 fddc 	bl	8001f88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80013d0:	7bbb      	ldrb	r3, [r7, #14]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80013d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	dce9      	bgt.n	80013b4 <prvUnlockQueue+0x60>
 80013e0:	e000      	b.n	80013e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80013e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	22ff      	movs	r2, #255	; 0xff
 80013e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80013ec:	f001 fc3a 	bl	8002c64 <vPortExitCritical>
}
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001400:	f001 fc00 	bl	8002c04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001408:	2b00      	cmp	r3, #0
 800140a:	d102      	bne.n	8001412 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800140c:	2301      	movs	r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	e001      	b.n	8001416 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001416:	f001 fc25 	bl	8002c64 <vPortExitCritical>

	return xReturn;
 800141a:	68fb      	ldr	r3, [r7, #12]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800142c:	f001 fbea 	bl	8002c04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001438:	429a      	cmp	r2, r3
 800143a:	d102      	bne.n	8001442 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800143c:	2301      	movs	r3, #1
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	e001      	b.n	8001446 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001446:	f001 fc0d 	bl	8002c64 <vPortExitCritical>

	return xReturn;
 800144a:	68fb      	ldr	r3, [r7, #12]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	e014      	b.n	800148e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001464:	4a0f      	ldr	r2, [pc, #60]	; (80014a4 <vQueueAddToRegistry+0x50>)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d10b      	bne.n	8001488 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001470:	490c      	ldr	r1, [pc, #48]	; (80014a4 <vQueueAddToRegistry+0x50>)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800147a:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <vQueueAddToRegistry+0x50>)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	4413      	add	r3, r2
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001486:	e006      	b.n	8001496 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	3301      	adds	r3, #1
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2b07      	cmp	r3, #7
 8001492:	d9e7      	bls.n	8001464 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001494:	bf00      	nop
 8001496:	bf00      	nop
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20000790 	.word	0x20000790

080014a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80014b8:	f001 fba4 	bl	8002c04 <vPortEnterCritical>
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80014c2:	b25b      	sxtb	r3, r3
 80014c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c8:	d103      	bne.n	80014d2 <vQueueWaitForMessageRestricted+0x2a>
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014d8:	b25b      	sxtb	r3, r3
 80014da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014de:	d103      	bne.n	80014e8 <vQueueWaitForMessageRestricted+0x40>
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80014e8:	f001 fbbc 	bl	8002c64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d106      	bne.n	8001502 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	3324      	adds	r3, #36	; 0x24
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	68b9      	ldr	r1, [r7, #8]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f000 fc3b 	bl	8001d78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001502:	6978      	ldr	r0, [r7, #20]
 8001504:	f7ff ff26 	bl	8001354 <prvUnlockQueue>
	}
 8001508:	bf00      	nop
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08e      	sub	sp, #56	; 0x38
 8001514:	af04      	add	r7, sp, #16
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
 800151c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800151e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10a      	bne.n	800153a <xTaskCreateStatic+0x2a>
	__asm volatile
 8001524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001528:	f383 8811 	msr	BASEPRI, r3
 800152c:	f3bf 8f6f 	isb	sy
 8001530:	f3bf 8f4f 	dsb	sy
 8001534:	623b      	str	r3, [r7, #32]
}
 8001536:	bf00      	nop
 8001538:	e7fe      	b.n	8001538 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800153a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800153c:	2b00      	cmp	r3, #0
 800153e:	d10a      	bne.n	8001556 <xTaskCreateStatic+0x46>
	__asm volatile
 8001540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001544:	f383 8811 	msr	BASEPRI, r3
 8001548:	f3bf 8f6f 	isb	sy
 800154c:	f3bf 8f4f 	dsb	sy
 8001550:	61fb      	str	r3, [r7, #28]
}
 8001552:	bf00      	nop
 8001554:	e7fe      	b.n	8001554 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001556:	235c      	movs	r3, #92	; 0x5c
 8001558:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	2b5c      	cmp	r3, #92	; 0x5c
 800155e:	d00a      	beq.n	8001576 <xTaskCreateStatic+0x66>
	__asm volatile
 8001560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001564:	f383 8811 	msr	BASEPRI, r3
 8001568:	f3bf 8f6f 	isb	sy
 800156c:	f3bf 8f4f 	dsb	sy
 8001570:	61bb      	str	r3, [r7, #24]
}
 8001572:	bf00      	nop
 8001574:	e7fe      	b.n	8001574 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001576:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800157a:	2b00      	cmp	r3, #0
 800157c:	d01e      	beq.n	80015bc <xTaskCreateStatic+0xac>
 800157e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001580:	2b00      	cmp	r3, #0
 8001582:	d01b      	beq.n	80015bc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800158c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	2202      	movs	r2, #2
 8001592:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001596:	2300      	movs	r3, #0
 8001598:	9303      	str	r3, [sp, #12]
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	9302      	str	r3, [sp, #8]
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	9301      	str	r3, [sp, #4]
 80015a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	68b9      	ldr	r1, [r7, #8]
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f000 f850 	bl	8001654 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80015b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015b6:	f000 f8dd 	bl	8001774 <prvAddNewTaskToReadyList>
 80015ba:	e001      	b.n	80015c0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80015c0:	697b      	ldr	r3, [r7, #20]
	}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3728      	adds	r7, #40	; 0x28
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b08c      	sub	sp, #48	; 0x30
 80015ce:	af04      	add	r7, sp, #16
 80015d0:	60f8      	str	r0, [r7, #12]
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	603b      	str	r3, [r7, #0]
 80015d6:	4613      	mov	r3, r2
 80015d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4618      	mov	r0, r3
 80015e0:	f001 fc32 	bl	8002e48 <pvPortMalloc>
 80015e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d00e      	beq.n	800160a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80015ec:	205c      	movs	r0, #92	; 0x5c
 80015ee:	f001 fc2b 	bl	8002e48 <pvPortMalloc>
 80015f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	697a      	ldr	r2, [r7, #20]
 80015fe:	631a      	str	r2, [r3, #48]	; 0x30
 8001600:	e005      	b.n	800160e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001602:	6978      	ldr	r0, [r7, #20]
 8001604:	f001 fcec 	bl	8002fe0 <vPortFree>
 8001608:	e001      	b.n	800160e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d017      	beq.n	8001644 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800161c:	88fa      	ldrh	r2, [r7, #6]
 800161e:	2300      	movs	r3, #0
 8001620:	9303      	str	r3, [sp, #12]
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	9302      	str	r3, [sp, #8]
 8001626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001628:	9301      	str	r3, [sp, #4]
 800162a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	68b9      	ldr	r1, [r7, #8]
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f000 f80e 	bl	8001654 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001638:	69f8      	ldr	r0, [r7, #28]
 800163a:	f000 f89b 	bl	8001774 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800163e:	2301      	movs	r3, #1
 8001640:	61bb      	str	r3, [r7, #24]
 8001642:	e002      	b.n	800164a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001644:	f04f 33ff 	mov.w	r3, #4294967295
 8001648:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800164a:	69bb      	ldr	r3, [r7, #24]
	}
 800164c:	4618      	mov	r0, r3
 800164e:	3720      	adds	r7, #32
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001664:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	461a      	mov	r2, r3
 800166c:	21a5      	movs	r1, #165	; 0xa5
 800166e:	f001 fe0d 	bl	800328c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800167c:	3b01      	subs	r3, #1
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	f023 0307 	bic.w	r3, r3, #7
 800168a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00a      	beq.n	80016ac <prvInitialiseNewTask+0x58>
	__asm volatile
 8001696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800169a:	f383 8811 	msr	BASEPRI, r3
 800169e:	f3bf 8f6f 	isb	sy
 80016a2:	f3bf 8f4f 	dsb	sy
 80016a6:	617b      	str	r3, [r7, #20]
}
 80016a8:	bf00      	nop
 80016aa:	e7fe      	b.n	80016aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d01f      	beq.n	80016f2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
 80016b6:	e012      	b.n	80016de <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80016b8:	68ba      	ldr	r2, [r7, #8]
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	4413      	add	r3, r2
 80016be:	7819      	ldrb	r1, [r3, #0]
 80016c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	4413      	add	r3, r2
 80016c6:	3334      	adds	r3, #52	; 0x34
 80016c8:	460a      	mov	r2, r1
 80016ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80016cc:	68ba      	ldr	r2, [r7, #8]
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	4413      	add	r3, r2
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d006      	beq.n	80016e6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	3301      	adds	r3, #1
 80016dc:	61fb      	str	r3, [r7, #28]
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	2b0f      	cmp	r3, #15
 80016e2:	d9e9      	bls.n	80016b8 <prvInitialiseNewTask+0x64>
 80016e4:	e000      	b.n	80016e8 <prvInitialiseNewTask+0x94>
			{
				break;
 80016e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80016e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80016f0:	e003      	b.n	80016fa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80016f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80016fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016fc:	2b37      	cmp	r3, #55	; 0x37
 80016fe:	d901      	bls.n	8001704 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001700:	2337      	movs	r3, #55	; 0x37
 8001702:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001706:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001708:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800170a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800170c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800170e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8001710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001712:	2200      	movs	r2, #0
 8001714:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001718:	3304      	adds	r3, #4
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff f93e 	bl	800099c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001722:	3318      	adds	r3, #24
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff f939 	bl	800099c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800172a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800172c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800172e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001732:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8001736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001738:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800173a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800173c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800173e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001742:	2200      	movs	r2, #0
 8001744:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	68f9      	ldr	r1, [r7, #12]
 8001752:	69b8      	ldr	r0, [r7, #24]
 8001754:	f001 f928 	bl	80029a8 <pxPortInitialiseStack>
 8001758:	4602      	mov	r2, r0
 800175a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800175c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800175e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001760:	2b00      	cmp	r3, #0
 8001762:	d002      	beq.n	800176a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001768:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800176a:	bf00      	nop
 800176c:	3720      	adds	r7, #32
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800177c:	f001 fa42 	bl	8002c04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001780:	4b2d      	ldr	r3, [pc, #180]	; (8001838 <prvAddNewTaskToReadyList+0xc4>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	3301      	adds	r3, #1
 8001786:	4a2c      	ldr	r2, [pc, #176]	; (8001838 <prvAddNewTaskToReadyList+0xc4>)
 8001788:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800178a:	4b2c      	ldr	r3, [pc, #176]	; (800183c <prvAddNewTaskToReadyList+0xc8>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d109      	bne.n	80017a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001792:	4a2a      	ldr	r2, [pc, #168]	; (800183c <prvAddNewTaskToReadyList+0xc8>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001798:	4b27      	ldr	r3, [pc, #156]	; (8001838 <prvAddNewTaskToReadyList+0xc4>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d110      	bne.n	80017c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80017a0:	f000 fc16 	bl	8001fd0 <prvInitialiseTaskLists>
 80017a4:	e00d      	b.n	80017c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80017a6:	4b26      	ldr	r3, [pc, #152]	; (8001840 <prvAddNewTaskToReadyList+0xcc>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d109      	bne.n	80017c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80017ae:	4b23      	ldr	r3, [pc, #140]	; (800183c <prvAddNewTaskToReadyList+0xc8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d802      	bhi.n	80017c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80017bc:	4a1f      	ldr	r2, [pc, #124]	; (800183c <prvAddNewTaskToReadyList+0xc8>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80017c2:	4b20      	ldr	r3, [pc, #128]	; (8001844 <prvAddNewTaskToReadyList+0xd0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	3301      	adds	r3, #1
 80017c8:	4a1e      	ldr	r2, [pc, #120]	; (8001844 <prvAddNewTaskToReadyList+0xd0>)
 80017ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80017cc:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <prvAddNewTaskToReadyList+0xd0>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017d8:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <prvAddNewTaskToReadyList+0xd4>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d903      	bls.n	80017e8 <prvAddNewTaskToReadyList+0x74>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e4:	4a18      	ldr	r2, [pc, #96]	; (8001848 <prvAddNewTaskToReadyList+0xd4>)
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ec:	4613      	mov	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4a15      	ldr	r2, [pc, #84]	; (800184c <prvAddNewTaskToReadyList+0xd8>)
 80017f6:	441a      	add	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3304      	adds	r3, #4
 80017fc:	4619      	mov	r1, r3
 80017fe:	4610      	mov	r0, r2
 8001800:	f7ff f8d9 	bl	80009b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001804:	f001 fa2e 	bl	8002c64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001808:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <prvAddNewTaskToReadyList+0xcc>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d00e      	beq.n	800182e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001810:	4b0a      	ldr	r3, [pc, #40]	; (800183c <prvAddNewTaskToReadyList+0xc8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181a:	429a      	cmp	r2, r3
 800181c:	d207      	bcs.n	800182e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800181e:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <prvAddNewTaskToReadyList+0xdc>)
 8001820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	f3bf 8f4f 	dsb	sy
 800182a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000ca4 	.word	0x20000ca4
 800183c:	200007d0 	.word	0x200007d0
 8001840:	20000cb0 	.word	0x20000cb0
 8001844:	20000cc0 	.word	0x20000cc0
 8001848:	20000cac 	.word	0x20000cac
 800184c:	200007d4 	.word	0x200007d4
 8001850:	e000ed04 	.word	0xe000ed04

08001854 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800185c:	2300      	movs	r3, #0
 800185e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d017      	beq.n	8001896 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001866:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <vTaskDelay+0x60>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00a      	beq.n	8001884 <vTaskDelay+0x30>
	__asm volatile
 800186e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001872:	f383 8811 	msr	BASEPRI, r3
 8001876:	f3bf 8f6f 	isb	sy
 800187a:	f3bf 8f4f 	dsb	sy
 800187e:	60bb      	str	r3, [r7, #8]
}
 8001880:	bf00      	nop
 8001882:	e7fe      	b.n	8001882 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001884:	f000 f880 	bl	8001988 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001888:	2100      	movs	r1, #0
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 fcea 	bl	8002264 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001890:	f000 f888 	bl	80019a4 <xTaskResumeAll>
 8001894:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d107      	bne.n	80018ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <vTaskDelay+0x64>)
 800189e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	f3bf 8f4f 	dsb	sy
 80018a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80018ac:	bf00      	nop
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000ccc 	.word	0x20000ccc
 80018b8:	e000ed04 	.word	0xe000ed04

080018bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	; 0x28
 80018c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80018ca:	463a      	mov	r2, r7
 80018cc:	1d39      	adds	r1, r7, #4
 80018ce:	f107 0308 	add.w	r3, r7, #8
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff f80e 	bl	80008f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80018d8:	6839      	ldr	r1, [r7, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68ba      	ldr	r2, [r7, #8]
 80018de:	9202      	str	r2, [sp, #8]
 80018e0:	9301      	str	r3, [sp, #4]
 80018e2:	2300      	movs	r3, #0
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	2300      	movs	r3, #0
 80018e8:	460a      	mov	r2, r1
 80018ea:	4921      	ldr	r1, [pc, #132]	; (8001970 <vTaskStartScheduler+0xb4>)
 80018ec:	4821      	ldr	r0, [pc, #132]	; (8001974 <vTaskStartScheduler+0xb8>)
 80018ee:	f7ff fe0f 	bl	8001510 <xTaskCreateStatic>
 80018f2:	4603      	mov	r3, r0
 80018f4:	4a20      	ldr	r2, [pc, #128]	; (8001978 <vTaskStartScheduler+0xbc>)
 80018f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80018f8:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <vTaskStartScheduler+0xbc>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d002      	beq.n	8001906 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001900:	2301      	movs	r3, #1
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	e001      	b.n	800190a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d102      	bne.n	8001916 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8001910:	f000 fcfc 	bl	800230c <xTimerCreateTimerTask>
 8001914:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d116      	bne.n	800194a <vTaskStartScheduler+0x8e>
	__asm volatile
 800191c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001920:	f383 8811 	msr	BASEPRI, r3
 8001924:	f3bf 8f6f 	isb	sy
 8001928:	f3bf 8f4f 	dsb	sy
 800192c:	613b      	str	r3, [r7, #16]
}
 800192e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <vTaskStartScheduler+0xc0>)
 8001932:	f04f 32ff 	mov.w	r2, #4294967295
 8001936:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <vTaskStartScheduler+0xc4>)
 800193a:	2201      	movs	r2, #1
 800193c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800193e:	4b11      	ldr	r3, [pc, #68]	; (8001984 <vTaskStartScheduler+0xc8>)
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001944:	f001 f8bc 	bl	8002ac0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001948:	e00e      	b.n	8001968 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001950:	d10a      	bne.n	8001968 <vTaskStartScheduler+0xac>
	__asm volatile
 8001952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001956:	f383 8811 	msr	BASEPRI, r3
 800195a:	f3bf 8f6f 	isb	sy
 800195e:	f3bf 8f4f 	dsb	sy
 8001962:	60fb      	str	r3, [r7, #12]
}
 8001964:	bf00      	nop
 8001966:	e7fe      	b.n	8001966 <vTaskStartScheduler+0xaa>
}
 8001968:	bf00      	nop
 800196a:	3718      	adds	r7, #24
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	08003bc8 	.word	0x08003bc8
 8001974:	08001fa1 	.word	0x08001fa1
 8001978:	20000cc8 	.word	0x20000cc8
 800197c:	20000cc4 	.word	0x20000cc4
 8001980:	20000cb0 	.word	0x20000cb0
 8001984:	20000ca8 	.word	0x20000ca8

08001988 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800198c:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <vTaskSuspendAll+0x18>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	3301      	adds	r3, #1
 8001992:	4a03      	ldr	r2, [pc, #12]	; (80019a0 <vTaskSuspendAll+0x18>)
 8001994:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	20000ccc 	.word	0x20000ccc

080019a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80019b2:	4b42      	ldr	r3, [pc, #264]	; (8001abc <xTaskResumeAll+0x118>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10a      	bne.n	80019d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80019ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019be:	f383 8811 	msr	BASEPRI, r3
 80019c2:	f3bf 8f6f 	isb	sy
 80019c6:	f3bf 8f4f 	dsb	sy
 80019ca:	603b      	str	r3, [r7, #0]
}
 80019cc:	bf00      	nop
 80019ce:	e7fe      	b.n	80019ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80019d0:	f001 f918 	bl	8002c04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80019d4:	4b39      	ldr	r3, [pc, #228]	; (8001abc <xTaskResumeAll+0x118>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	3b01      	subs	r3, #1
 80019da:	4a38      	ldr	r2, [pc, #224]	; (8001abc <xTaskResumeAll+0x118>)
 80019dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80019de:	4b37      	ldr	r3, [pc, #220]	; (8001abc <xTaskResumeAll+0x118>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d162      	bne.n	8001aac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80019e6:	4b36      	ldr	r3, [pc, #216]	; (8001ac0 <xTaskResumeAll+0x11c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d05e      	beq.n	8001aac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80019ee:	e02f      	b.n	8001a50 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019f0:	4b34      	ldr	r3, [pc, #208]	; (8001ac4 <xTaskResumeAll+0x120>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	3318      	adds	r3, #24
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff f837 	bl	8000a70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	3304      	adds	r3, #4
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff f832 	bl	8000a70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a10:	4b2d      	ldr	r3, [pc, #180]	; (8001ac8 <xTaskResumeAll+0x124>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d903      	bls.n	8001a20 <xTaskResumeAll+0x7c>
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1c:	4a2a      	ldr	r2, [pc, #168]	; (8001ac8 <xTaskResumeAll+0x124>)
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a24:	4613      	mov	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4a27      	ldr	r2, [pc, #156]	; (8001acc <xTaskResumeAll+0x128>)
 8001a2e:	441a      	add	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	3304      	adds	r3, #4
 8001a34:	4619      	mov	r1, r3
 8001a36:	4610      	mov	r0, r2
 8001a38:	f7fe ffbd 	bl	80009b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a40:	4b23      	ldr	r3, [pc, #140]	; (8001ad0 <xTaskResumeAll+0x12c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d302      	bcc.n	8001a50 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8001a4a:	4b22      	ldr	r3, [pc, #136]	; (8001ad4 <xTaskResumeAll+0x130>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001a50:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <xTaskResumeAll+0x120>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1cb      	bne.n	80019f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001a5e:	f000 fb55 	bl	800210c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001a62:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <xTaskResumeAll+0x134>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d010      	beq.n	8001a90 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001a6e:	f000 f847 	bl	8001b00 <xTaskIncrementTick>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d002      	beq.n	8001a7e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8001a78:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <xTaskResumeAll+0x130>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3b01      	subs	r3, #1
 8001a82:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f1      	bne.n	8001a6e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8001a8a:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <xTaskResumeAll+0x134>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001a90:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <xTaskResumeAll+0x130>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d009      	beq.n	8001aac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <xTaskResumeAll+0x138>)
 8001a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	f3bf 8f4f 	dsb	sy
 8001aa8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001aac:	f001 f8da 	bl	8002c64 <vPortExitCritical>

	return xAlreadyYielded;
 8001ab0:	68bb      	ldr	r3, [r7, #8]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000ccc 	.word	0x20000ccc
 8001ac0:	20000ca4 	.word	0x20000ca4
 8001ac4:	20000c64 	.word	0x20000c64
 8001ac8:	20000cac 	.word	0x20000cac
 8001acc:	200007d4 	.word	0x200007d4
 8001ad0:	200007d0 	.word	0x200007d0
 8001ad4:	20000cb8 	.word	0x20000cb8
 8001ad8:	20000cb4 	.word	0x20000cb4
 8001adc:	e000ed04 	.word	0xe000ed04

08001ae0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001ae6:	4b05      	ldr	r3, [pc, #20]	; (8001afc <xTaskGetTickCount+0x1c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001aec:	687b      	ldr	r3, [r7, #4]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	20000ca8 	.word	0x20000ca8

08001b00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b0a:	4b4f      	ldr	r3, [pc, #316]	; (8001c48 <xTaskIncrementTick+0x148>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f040 808f 	bne.w	8001c32 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001b14:	4b4d      	ldr	r3, [pc, #308]	; (8001c4c <xTaskIncrementTick+0x14c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001b1c:	4a4b      	ldr	r2, [pc, #300]	; (8001c4c <xTaskIncrementTick+0x14c>)
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d120      	bne.n	8001b6a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001b28:	4b49      	ldr	r3, [pc, #292]	; (8001c50 <xTaskIncrementTick+0x150>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00a      	beq.n	8001b48 <xTaskIncrementTick+0x48>
	__asm volatile
 8001b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b36:	f383 8811 	msr	BASEPRI, r3
 8001b3a:	f3bf 8f6f 	isb	sy
 8001b3e:	f3bf 8f4f 	dsb	sy
 8001b42:	603b      	str	r3, [r7, #0]
}
 8001b44:	bf00      	nop
 8001b46:	e7fe      	b.n	8001b46 <xTaskIncrementTick+0x46>
 8001b48:	4b41      	ldr	r3, [pc, #260]	; (8001c50 <xTaskIncrementTick+0x150>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	4b41      	ldr	r3, [pc, #260]	; (8001c54 <xTaskIncrementTick+0x154>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a3f      	ldr	r2, [pc, #252]	; (8001c50 <xTaskIncrementTick+0x150>)
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	4a3f      	ldr	r2, [pc, #252]	; (8001c54 <xTaskIncrementTick+0x154>)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	4b3e      	ldr	r3, [pc, #248]	; (8001c58 <xTaskIncrementTick+0x158>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	3301      	adds	r3, #1
 8001b62:	4a3d      	ldr	r2, [pc, #244]	; (8001c58 <xTaskIncrementTick+0x158>)
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	f000 fad1 	bl	800210c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001b6a:	4b3c      	ldr	r3, [pc, #240]	; (8001c5c <xTaskIncrementTick+0x15c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d349      	bcc.n	8001c08 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b74:	4b36      	ldr	r3, [pc, #216]	; (8001c50 <xTaskIncrementTick+0x150>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d104      	bne.n	8001b88 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b7e:	4b37      	ldr	r3, [pc, #220]	; (8001c5c <xTaskIncrementTick+0x15c>)
 8001b80:	f04f 32ff 	mov.w	r2, #4294967295
 8001b84:	601a      	str	r2, [r3, #0]
					break;
 8001b86:	e03f      	b.n	8001c08 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b88:	4b31      	ldr	r3, [pc, #196]	; (8001c50 <xTaskIncrementTick+0x150>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d203      	bcs.n	8001ba8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001ba0:	4a2e      	ldr	r2, [pc, #184]	; (8001c5c <xTaskIncrementTick+0x15c>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001ba6:	e02f      	b.n	8001c08 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	3304      	adds	r3, #4
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7fe ff5f 	bl	8000a70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d004      	beq.n	8001bc4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	3318      	adds	r3, #24
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe ff56 	bl	8000a70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bc8:	4b25      	ldr	r3, [pc, #148]	; (8001c60 <xTaskIncrementTick+0x160>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d903      	bls.n	8001bd8 <xTaskIncrementTick+0xd8>
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd4:	4a22      	ldr	r2, [pc, #136]	; (8001c60 <xTaskIncrementTick+0x160>)
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bdc:	4613      	mov	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4a1f      	ldr	r2, [pc, #124]	; (8001c64 <xTaskIncrementTick+0x164>)
 8001be6:	441a      	add	r2, r3
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	3304      	adds	r3, #4
 8001bec:	4619      	mov	r1, r3
 8001bee:	4610      	mov	r0, r2
 8001bf0:	f7fe fee1 	bl	80009b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <xTaskIncrementTick+0x168>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d3b8      	bcc.n	8001b74 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8001c02:	2301      	movs	r3, #1
 8001c04:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c06:	e7b5      	b.n	8001b74 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001c08:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <xTaskIncrementTick+0x168>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c0e:	4915      	ldr	r1, [pc, #84]	; (8001c64 <xTaskIncrementTick+0x164>)
 8001c10:	4613      	mov	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	440b      	add	r3, r1
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d901      	bls.n	8001c24 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8001c20:	2301      	movs	r3, #1
 8001c22:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001c24:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <xTaskIncrementTick+0x16c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d007      	beq.n	8001c3c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	e004      	b.n	8001c3c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001c32:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <xTaskIncrementTick+0x170>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	3301      	adds	r3, #1
 8001c38:	4a0d      	ldr	r2, [pc, #52]	; (8001c70 <xTaskIncrementTick+0x170>)
 8001c3a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001c3c:	697b      	ldr	r3, [r7, #20]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000ccc 	.word	0x20000ccc
 8001c4c:	20000ca8 	.word	0x20000ca8
 8001c50:	20000c5c 	.word	0x20000c5c
 8001c54:	20000c60 	.word	0x20000c60
 8001c58:	20000cbc 	.word	0x20000cbc
 8001c5c:	20000cc4 	.word	0x20000cc4
 8001c60:	20000cac 	.word	0x20000cac
 8001c64:	200007d4 	.word	0x200007d4
 8001c68:	200007d0 	.word	0x200007d0
 8001c6c:	20000cb8 	.word	0x20000cb8
 8001c70:	20000cb4 	.word	0x20000cb4

08001c74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001c7a:	4b28      	ldr	r3, [pc, #160]	; (8001d1c <vTaskSwitchContext+0xa8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001c82:	4b27      	ldr	r3, [pc, #156]	; (8001d20 <vTaskSwitchContext+0xac>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001c88:	e041      	b.n	8001d0e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8001c8a:	4b25      	ldr	r3, [pc, #148]	; (8001d20 <vTaskSwitchContext+0xac>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c90:	4b24      	ldr	r3, [pc, #144]	; (8001d24 <vTaskSwitchContext+0xb0>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	e010      	b.n	8001cba <vTaskSwitchContext+0x46>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10a      	bne.n	8001cb4 <vTaskSwitchContext+0x40>
	__asm volatile
 8001c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ca2:	f383 8811 	msr	BASEPRI, r3
 8001ca6:	f3bf 8f6f 	isb	sy
 8001caa:	f3bf 8f4f 	dsb	sy
 8001cae:	607b      	str	r3, [r7, #4]
}
 8001cb0:	bf00      	nop
 8001cb2:	e7fe      	b.n	8001cb2 <vTaskSwitchContext+0x3e>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	491b      	ldr	r1, [pc, #108]	; (8001d28 <vTaskSwitchContext+0xb4>)
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0e4      	beq.n	8001c98 <vTaskSwitchContext+0x24>
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4a13      	ldr	r2, [pc, #76]	; (8001d28 <vTaskSwitchContext+0xb4>)
 8001cda:	4413      	add	r3, r2
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	605a      	str	r2, [r3, #4]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	3308      	adds	r3, #8
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d104      	bne.n	8001cfe <vTaskSwitchContext+0x8a>
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	4a09      	ldr	r2, [pc, #36]	; (8001d2c <vTaskSwitchContext+0xb8>)
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	4a06      	ldr	r2, [pc, #24]	; (8001d24 <vTaskSwitchContext+0xb0>)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6013      	str	r3, [r2, #0]
}
 8001d0e:	bf00      	nop
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20000ccc 	.word	0x20000ccc
 8001d20:	20000cb8 	.word	0x20000cb8
 8001d24:	20000cac 	.word	0x20000cac
 8001d28:	200007d4 	.word	0x200007d4
 8001d2c:	200007d0 	.word	0x200007d0

08001d30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10a      	bne.n	8001d56 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8001d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d44:	f383 8811 	msr	BASEPRI, r3
 8001d48:	f3bf 8f6f 	isb	sy
 8001d4c:	f3bf 8f4f 	dsb	sy
 8001d50:	60fb      	str	r3, [r7, #12]
}
 8001d52:	bf00      	nop
 8001d54:	e7fe      	b.n	8001d54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001d56:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <vTaskPlaceOnEventList+0x44>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	3318      	adds	r3, #24
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7fe fe4d 	bl	80009fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001d64:	2101      	movs	r1, #1
 8001d66:	6838      	ldr	r0, [r7, #0]
 8001d68:	f000 fa7c 	bl	8002264 <prvAddCurrentTaskToDelayedList>
}
 8001d6c:	bf00      	nop
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	200007d0 	.word	0x200007d0

08001d78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10a      	bne.n	8001da0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8001d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d8e:	f383 8811 	msr	BASEPRI, r3
 8001d92:	f3bf 8f6f 	isb	sy
 8001d96:	f3bf 8f4f 	dsb	sy
 8001d9a:	617b      	str	r3, [r7, #20]
}
 8001d9c:	bf00      	nop
 8001d9e:	e7fe      	b.n	8001d9e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001da0:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <vTaskPlaceOnEventListRestricted+0x54>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	3318      	adds	r3, #24
 8001da6:	4619      	mov	r1, r3
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f7fe fe04 	bl	80009b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d002      	beq.n	8001dba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8001db4:	f04f 33ff 	mov.w	r3, #4294967295
 8001db8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	68b8      	ldr	r0, [r7, #8]
 8001dbe:	f000 fa51 	bl	8002264 <prvAddCurrentTaskToDelayedList>
	}
 8001dc2:	bf00      	nop
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	200007d0 	.word	0x200007d0

08001dd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10a      	bne.n	8001dfc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8001de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dea:	f383 8811 	msr	BASEPRI, r3
 8001dee:	f3bf 8f6f 	isb	sy
 8001df2:	f3bf 8f4f 	dsb	sy
 8001df6:	60fb      	str	r3, [r7, #12]
}
 8001df8:	bf00      	nop
 8001dfa:	e7fe      	b.n	8001dfa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	3318      	adds	r3, #24
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7fe fe35 	bl	8000a70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e06:	4b1e      	ldr	r3, [pc, #120]	; (8001e80 <xTaskRemoveFromEventList+0xb0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d11d      	bne.n	8001e4a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	3304      	adds	r3, #4
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe fe2c 	bl	8000a70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e1c:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <xTaskRemoveFromEventList+0xb4>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d903      	bls.n	8001e2c <xTaskRemoveFromEventList+0x5c>
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e28:	4a16      	ldr	r2, [pc, #88]	; (8001e84 <xTaskRemoveFromEventList+0xb4>)
 8001e2a:	6013      	str	r3, [r2, #0]
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e30:	4613      	mov	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4a13      	ldr	r2, [pc, #76]	; (8001e88 <xTaskRemoveFromEventList+0xb8>)
 8001e3a:	441a      	add	r2, r3
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	3304      	adds	r3, #4
 8001e40:	4619      	mov	r1, r3
 8001e42:	4610      	mov	r0, r2
 8001e44:	f7fe fdb7 	bl	80009b6 <vListInsertEnd>
 8001e48:	e005      	b.n	8001e56 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	3318      	adds	r3, #24
 8001e4e:	4619      	mov	r1, r3
 8001e50:	480e      	ldr	r0, [pc, #56]	; (8001e8c <xTaskRemoveFromEventList+0xbc>)
 8001e52:	f7fe fdb0 	bl	80009b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e5a:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <xTaskRemoveFromEventList+0xc0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d905      	bls.n	8001e70 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001e64:	2301      	movs	r3, #1
 8001e66:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001e68:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <xTaskRemoveFromEventList+0xc4>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	e001      	b.n	8001e74 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8001e74:	697b      	ldr	r3, [r7, #20]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000ccc 	.word	0x20000ccc
 8001e84:	20000cac 	.word	0x20000cac
 8001e88:	200007d4 	.word	0x200007d4
 8001e8c:	20000c64 	.word	0x20000c64
 8001e90:	200007d0 	.word	0x200007d0
 8001e94:	20000cb8 	.word	0x20000cb8

08001e98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001ea0:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <vTaskInternalSetTimeOutState+0x24>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <vTaskInternalSetTimeOutState+0x28>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	605a      	str	r2, [r3, #4]
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	20000cbc 	.word	0x20000cbc
 8001ec0:	20000ca8 	.word	0x20000ca8

08001ec4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10a      	bne.n	8001eea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8001ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed8:	f383 8811 	msr	BASEPRI, r3
 8001edc:	f3bf 8f6f 	isb	sy
 8001ee0:	f3bf 8f4f 	dsb	sy
 8001ee4:	613b      	str	r3, [r7, #16]
}
 8001ee6:	bf00      	nop
 8001ee8:	e7fe      	b.n	8001ee8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10a      	bne.n	8001f06 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8001ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ef4:	f383 8811 	msr	BASEPRI, r3
 8001ef8:	f3bf 8f6f 	isb	sy
 8001efc:	f3bf 8f4f 	dsb	sy
 8001f00:	60fb      	str	r3, [r7, #12]
}
 8001f02:	bf00      	nop
 8001f04:	e7fe      	b.n	8001f04 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8001f06:	f000 fe7d 	bl	8002c04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001f0a:	4b1d      	ldr	r3, [pc, #116]	; (8001f80 <xTaskCheckForTimeOut+0xbc>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f22:	d102      	bne.n	8001f2a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61fb      	str	r3, [r7, #28]
 8001f28:	e023      	b.n	8001f72 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <xTaskCheckForTimeOut+0xc0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d007      	beq.n	8001f46 <xTaskCheckForTimeOut+0x82>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d302      	bcc.n	8001f46 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001f40:	2301      	movs	r3, #1
 8001f42:	61fb      	str	r3, [r7, #28]
 8001f44:	e015      	b.n	8001f72 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d20b      	bcs.n	8001f68 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	1ad2      	subs	r2, r2, r3
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7ff ff9b 	bl	8001e98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
 8001f66:	e004      	b.n	8001f72 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8001f72:	f000 fe77 	bl	8002c64 <vPortExitCritical>

	return xReturn;
 8001f76:	69fb      	ldr	r3, [r7, #28]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3720      	adds	r7, #32
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20000ca8 	.word	0x20000ca8
 8001f84:	20000cbc 	.word	0x20000cbc

08001f88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001f8c:	4b03      	ldr	r3, [pc, #12]	; (8001f9c <vTaskMissedYield+0x14>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	601a      	str	r2, [r3, #0]
}
 8001f92:	bf00      	nop
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	20000cb8 	.word	0x20000cb8

08001fa0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001fa8:	f000 f852 	bl	8002050 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001fac:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <prvIdleTask+0x28>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d9f9      	bls.n	8001fa8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <prvIdleTask+0x2c>)
 8001fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	f3bf 8f4f 	dsb	sy
 8001fc0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001fc4:	e7f0      	b.n	8001fa8 <prvIdleTask+0x8>
 8001fc6:	bf00      	nop
 8001fc8:	200007d4 	.word	0x200007d4
 8001fcc:	e000ed04 	.word	0xe000ed04

08001fd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	607b      	str	r3, [r7, #4]
 8001fda:	e00c      	b.n	8001ff6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4a12      	ldr	r2, [pc, #72]	; (8002030 <prvInitialiseTaskLists+0x60>)
 8001fe8:	4413      	add	r3, r2
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe fcb6 	bl	800095c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	607b      	str	r3, [r7, #4]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b37      	cmp	r3, #55	; 0x37
 8001ffa:	d9ef      	bls.n	8001fdc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001ffc:	480d      	ldr	r0, [pc, #52]	; (8002034 <prvInitialiseTaskLists+0x64>)
 8001ffe:	f7fe fcad 	bl	800095c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002002:	480d      	ldr	r0, [pc, #52]	; (8002038 <prvInitialiseTaskLists+0x68>)
 8002004:	f7fe fcaa 	bl	800095c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002008:	480c      	ldr	r0, [pc, #48]	; (800203c <prvInitialiseTaskLists+0x6c>)
 800200a:	f7fe fca7 	bl	800095c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800200e:	480c      	ldr	r0, [pc, #48]	; (8002040 <prvInitialiseTaskLists+0x70>)
 8002010:	f7fe fca4 	bl	800095c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002014:	480b      	ldr	r0, [pc, #44]	; (8002044 <prvInitialiseTaskLists+0x74>)
 8002016:	f7fe fca1 	bl	800095c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800201a:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <prvInitialiseTaskLists+0x78>)
 800201c:	4a05      	ldr	r2, [pc, #20]	; (8002034 <prvInitialiseTaskLists+0x64>)
 800201e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002020:	4b0a      	ldr	r3, [pc, #40]	; (800204c <prvInitialiseTaskLists+0x7c>)
 8002022:	4a05      	ldr	r2, [pc, #20]	; (8002038 <prvInitialiseTaskLists+0x68>)
 8002024:	601a      	str	r2, [r3, #0]
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	200007d4 	.word	0x200007d4
 8002034:	20000c34 	.word	0x20000c34
 8002038:	20000c48 	.word	0x20000c48
 800203c:	20000c64 	.word	0x20000c64
 8002040:	20000c78 	.word	0x20000c78
 8002044:	20000c90 	.word	0x20000c90
 8002048:	20000c5c 	.word	0x20000c5c
 800204c:	20000c60 	.word	0x20000c60

08002050 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002056:	e019      	b.n	800208c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002058:	f000 fdd4 	bl	8002c04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800205c:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <prvCheckTasksWaitingTermination+0x50>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3304      	adds	r3, #4
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe fd01 	bl	8000a70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800206e:	4b0d      	ldr	r3, [pc, #52]	; (80020a4 <prvCheckTasksWaitingTermination+0x54>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	3b01      	subs	r3, #1
 8002074:	4a0b      	ldr	r2, [pc, #44]	; (80020a4 <prvCheckTasksWaitingTermination+0x54>)
 8002076:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <prvCheckTasksWaitingTermination+0x58>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	3b01      	subs	r3, #1
 800207e:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <prvCheckTasksWaitingTermination+0x58>)
 8002080:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002082:	f000 fdef 	bl	8002c64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f810 	bl	80020ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <prvCheckTasksWaitingTermination+0x58>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1e1      	bne.n	8002058 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002094:	bf00      	nop
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000c78 	.word	0x20000c78
 80020a4:	20000ca4 	.word	0x20000ca4
 80020a8:	20000c8c 	.word	0x20000c8c

080020ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d108      	bne.n	80020d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 ff8c 	bl	8002fe0 <vPortFree>
				vPortFree( pxTCB );
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 ff89 	bl	8002fe0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80020ce:	e018      	b.n	8002102 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d103      	bne.n	80020e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 ff80 	bl	8002fe0 <vPortFree>
	}
 80020e0:	e00f      	b.n	8002102 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d00a      	beq.n	8002102 <prvDeleteTCB+0x56>
	__asm volatile
 80020ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f0:	f383 8811 	msr	BASEPRI, r3
 80020f4:	f3bf 8f6f 	isb	sy
 80020f8:	f3bf 8f4f 	dsb	sy
 80020fc:	60fb      	str	r3, [r7, #12]
}
 80020fe:	bf00      	nop
 8002100:	e7fe      	b.n	8002100 <prvDeleteTCB+0x54>
	}
 8002102:	bf00      	nop
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002112:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <prvResetNextTaskUnblockTime+0x38>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d104      	bne.n	8002126 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800211c:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <prvResetNextTaskUnblockTime+0x3c>)
 800211e:	f04f 32ff 	mov.w	r2, #4294967295
 8002122:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002124:	e008      	b.n	8002138 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002126:	4b07      	ldr	r3, [pc, #28]	; (8002144 <prvResetNextTaskUnblockTime+0x38>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	4a04      	ldr	r2, [pc, #16]	; (8002148 <prvResetNextTaskUnblockTime+0x3c>)
 8002136:	6013      	str	r3, [r2, #0]
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	20000c5c 	.word	0x20000c5c
 8002148:	20000cc4 	.word	0x20000cc4

0800214c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002152:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <xTaskGetSchedulerState+0x34>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d102      	bne.n	8002160 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800215a:	2301      	movs	r3, #1
 800215c:	607b      	str	r3, [r7, #4]
 800215e:	e008      	b.n	8002172 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002160:	4b08      	ldr	r3, [pc, #32]	; (8002184 <xTaskGetSchedulerState+0x38>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d102      	bne.n	800216e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002168:	2302      	movs	r3, #2
 800216a:	607b      	str	r3, [r7, #4]
 800216c:	e001      	b.n	8002172 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800216e:	2300      	movs	r3, #0
 8002170:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002172:	687b      	ldr	r3, [r7, #4]
	}
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	20000cb0 	.word	0x20000cb0
 8002184:	20000ccc 	.word	0x20000ccc

08002188 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d056      	beq.n	800224c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800219e:	4b2e      	ldr	r3, [pc, #184]	; (8002258 <xTaskPriorityDisinherit+0xd0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d00a      	beq.n	80021be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80021a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ac:	f383 8811 	msr	BASEPRI, r3
 80021b0:	f3bf 8f6f 	isb	sy
 80021b4:	f3bf 8f4f 	dsb	sy
 80021b8:	60fb      	str	r3, [r7, #12]
}
 80021ba:	bf00      	nop
 80021bc:	e7fe      	b.n	80021bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10a      	bne.n	80021dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80021c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ca:	f383 8811 	msr	BASEPRI, r3
 80021ce:	f3bf 8f6f 	isb	sy
 80021d2:	f3bf 8f4f 	dsb	sy
 80021d6:	60bb      	str	r3, [r7, #8]
}
 80021d8:	bf00      	nop
 80021da:	e7fe      	b.n	80021da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021e0:	1e5a      	subs	r2, r3, #1
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d02c      	beq.n	800224c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d128      	bne.n	800224c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	3304      	adds	r3, #4
 80021fe:	4618      	mov	r0, r3
 8002200:	f7fe fc36 	bl	8000a70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002210:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800221c:	4b0f      	ldr	r3, [pc, #60]	; (800225c <xTaskPriorityDisinherit+0xd4>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d903      	bls.n	800222c <xTaskPriorityDisinherit+0xa4>
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002228:	4a0c      	ldr	r2, [pc, #48]	; (800225c <xTaskPriorityDisinherit+0xd4>)
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002230:	4613      	mov	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4a09      	ldr	r2, [pc, #36]	; (8002260 <xTaskPriorityDisinherit+0xd8>)
 800223a:	441a      	add	r2, r3
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	3304      	adds	r3, #4
 8002240:	4619      	mov	r1, r3
 8002242:	4610      	mov	r0, r2
 8002244:	f7fe fbb7 	bl	80009b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002248:	2301      	movs	r3, #1
 800224a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800224c:	697b      	ldr	r3, [r7, #20]
	}
 800224e:	4618      	mov	r0, r3
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	200007d0 	.word	0x200007d0
 800225c:	20000cac 	.word	0x20000cac
 8002260:	200007d4 	.word	0x200007d4

08002264 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800226e:	4b21      	ldr	r3, [pc, #132]	; (80022f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002274:	4b20      	ldr	r3, [pc, #128]	; (80022f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	3304      	adds	r3, #4
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe fbf8 	bl	8000a70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002286:	d10a      	bne.n	800229e <prvAddCurrentTaskToDelayedList+0x3a>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d007      	beq.n	800229e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800228e:	4b1a      	ldr	r3, [pc, #104]	; (80022f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	3304      	adds	r3, #4
 8002294:	4619      	mov	r1, r3
 8002296:	4819      	ldr	r0, [pc, #100]	; (80022fc <prvAddCurrentTaskToDelayedList+0x98>)
 8002298:	f7fe fb8d 	bl	80009b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800229c:	e026      	b.n	80022ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4413      	add	r3, r2
 80022a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80022a6:	4b14      	ldr	r3, [pc, #80]	; (80022f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d209      	bcs.n	80022ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80022b6:	4b12      	ldr	r3, [pc, #72]	; (8002300 <prvAddCurrentTaskToDelayedList+0x9c>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	3304      	adds	r3, #4
 80022c0:	4619      	mov	r1, r3
 80022c2:	4610      	mov	r0, r2
 80022c4:	f7fe fb9b 	bl	80009fe <vListInsert>
}
 80022c8:	e010      	b.n	80022ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80022ca:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <prvAddCurrentTaskToDelayedList+0xa0>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	3304      	adds	r3, #4
 80022d4:	4619      	mov	r1, r3
 80022d6:	4610      	mov	r0, r2
 80022d8:	f7fe fb91 	bl	80009fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80022dc:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <prvAddCurrentTaskToDelayedList+0xa4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d202      	bcs.n	80022ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80022e6:	4a08      	ldr	r2, [pc, #32]	; (8002308 <prvAddCurrentTaskToDelayedList+0xa4>)
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	6013      	str	r3, [r2, #0]
}
 80022ec:	bf00      	nop
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20000ca8 	.word	0x20000ca8
 80022f8:	200007d0 	.word	0x200007d0
 80022fc:	20000c90 	.word	0x20000c90
 8002300:	20000c60 	.word	0x20000c60
 8002304:	20000c5c 	.word	0x20000c5c
 8002308:	20000cc4 	.word	0x20000cc4

0800230c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08a      	sub	sp, #40	; 0x28
 8002310:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002316:	f000 fb07 	bl	8002928 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800231a:	4b1c      	ldr	r3, [pc, #112]	; (800238c <xTimerCreateTimerTask+0x80>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d021      	beq.n	8002366 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002326:	2300      	movs	r3, #0
 8002328:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800232a:	1d3a      	adds	r2, r7, #4
 800232c:	f107 0108 	add.w	r1, r7, #8
 8002330:	f107 030c 	add.w	r3, r7, #12
 8002334:	4618      	mov	r0, r3
 8002336:	f7fe faf7 	bl	8000928 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	9202      	str	r2, [sp, #8]
 8002342:	9301      	str	r3, [sp, #4]
 8002344:	2302      	movs	r3, #2
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	2300      	movs	r3, #0
 800234a:	460a      	mov	r2, r1
 800234c:	4910      	ldr	r1, [pc, #64]	; (8002390 <xTimerCreateTimerTask+0x84>)
 800234e:	4811      	ldr	r0, [pc, #68]	; (8002394 <xTimerCreateTimerTask+0x88>)
 8002350:	f7ff f8de 	bl	8001510 <xTaskCreateStatic>
 8002354:	4603      	mov	r3, r0
 8002356:	4a10      	ldr	r2, [pc, #64]	; (8002398 <xTimerCreateTimerTask+0x8c>)
 8002358:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800235a:	4b0f      	ldr	r3, [pc, #60]	; (8002398 <xTimerCreateTimerTask+0x8c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8002362:	2301      	movs	r3, #1
 8002364:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10a      	bne.n	8002382 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800236c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002370:	f383 8811 	msr	BASEPRI, r3
 8002374:	f3bf 8f6f 	isb	sy
 8002378:	f3bf 8f4f 	dsb	sy
 800237c:	613b      	str	r3, [r7, #16]
}
 800237e:	bf00      	nop
 8002380:	e7fe      	b.n	8002380 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8002382:	697b      	ldr	r3, [r7, #20]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20000d00 	.word	0x20000d00
 8002390:	08003bd0 	.word	0x08003bd0
 8002394:	080024d1 	.word	0x080024d1
 8002398:	20000d04 	.word	0x20000d04

0800239c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08a      	sub	sp, #40	; 0x28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
 80023a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10a      	bne.n	80023ca <xTimerGenericCommand+0x2e>
	__asm volatile
 80023b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b8:	f383 8811 	msr	BASEPRI, r3
 80023bc:	f3bf 8f6f 	isb	sy
 80023c0:	f3bf 8f4f 	dsb	sy
 80023c4:	623b      	str	r3, [r7, #32]
}
 80023c6:	bf00      	nop
 80023c8:	e7fe      	b.n	80023c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80023ca:	4b1a      	ldr	r3, [pc, #104]	; (8002434 <xTimerGenericCommand+0x98>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d02a      	beq.n	8002428 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	2b05      	cmp	r3, #5
 80023e2:	dc18      	bgt.n	8002416 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80023e4:	f7ff feb2 	bl	800214c <xTaskGetSchedulerState>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d109      	bne.n	8002402 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80023ee:	4b11      	ldr	r3, [pc, #68]	; (8002434 <xTimerGenericCommand+0x98>)
 80023f0:	6818      	ldr	r0, [r3, #0]
 80023f2:	f107 0110 	add.w	r1, r7, #16
 80023f6:	2300      	movs	r3, #0
 80023f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023fa:	f7fe fca1 	bl	8000d40 <xQueueGenericSend>
 80023fe:	6278      	str	r0, [r7, #36]	; 0x24
 8002400:	e012      	b.n	8002428 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002402:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <xTimerGenericCommand+0x98>)
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	f107 0110 	add.w	r1, r7, #16
 800240a:	2300      	movs	r3, #0
 800240c:	2200      	movs	r2, #0
 800240e:	f7fe fc97 	bl	8000d40 <xQueueGenericSend>
 8002412:	6278      	str	r0, [r7, #36]	; 0x24
 8002414:	e008      	b.n	8002428 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002416:	4b07      	ldr	r3, [pc, #28]	; (8002434 <xTimerGenericCommand+0x98>)
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	f107 0110 	add.w	r1, r7, #16
 800241e:	2300      	movs	r3, #0
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	f7fe fd8b 	bl	8000f3c <xQueueGenericSendFromISR>
 8002426:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800242a:	4618      	mov	r0, r3
 800242c:	3728      	adds	r7, #40	; 0x28
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000d00 	.word	0x20000d00

08002438 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af02      	add	r7, sp, #8
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002442:	4b22      	ldr	r3, [pc, #136]	; (80024cc <prvProcessExpiredTimer+0x94>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	3304      	adds	r3, #4
 8002450:	4618      	mov	r0, r3
 8002452:	f7fe fb0d 	bl	8000a70 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b00      	cmp	r3, #0
 8002462:	d022      	beq.n	80024aa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	699a      	ldr	r2, [r3, #24]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	18d1      	adds	r1, r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	6978      	ldr	r0, [r7, #20]
 8002472:	f000 f8d1 	bl	8002618 <prvInsertTimerInActiveList>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d01f      	beq.n	80024bc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800247c:	2300      	movs	r3, #0
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	2300      	movs	r3, #0
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	2100      	movs	r1, #0
 8002486:	6978      	ldr	r0, [r7, #20]
 8002488:	f7ff ff88 	bl	800239c <xTimerGenericCommand>
 800248c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d113      	bne.n	80024bc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8002494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002498:	f383 8811 	msr	BASEPRI, r3
 800249c:	f3bf 8f6f 	isb	sy
 80024a0:	f3bf 8f4f 	dsb	sy
 80024a4:	60fb      	str	r3, [r7, #12]
}
 80024a6:	bf00      	nop
 80024a8:	e7fe      	b.n	80024a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80024b0:	f023 0301 	bic.w	r3, r3, #1
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	6978      	ldr	r0, [r7, #20]
 80024c2:	4798      	blx	r3
}
 80024c4:	bf00      	nop
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	20000cf8 	.word	0x20000cf8

080024d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80024d8:	f107 0308 	add.w	r3, r7, #8
 80024dc:	4618      	mov	r0, r3
 80024de:	f000 f857 	bl	8002590 <prvGetNextExpireTime>
 80024e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	4619      	mov	r1, r3
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f000 f803 	bl	80024f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80024ee:	f000 f8d5 	bl	800269c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80024f2:	e7f1      	b.n	80024d8 <prvTimerTask+0x8>

080024f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80024fe:	f7ff fa43 	bl	8001988 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002502:	f107 0308 	add.w	r3, r7, #8
 8002506:	4618      	mov	r0, r3
 8002508:	f000 f866 	bl	80025d8 <prvSampleTimeNow>
 800250c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d130      	bne.n	8002576 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10a      	bne.n	8002530 <prvProcessTimerOrBlockTask+0x3c>
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	429a      	cmp	r2, r3
 8002520:	d806      	bhi.n	8002530 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002522:	f7ff fa3f 	bl	80019a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002526:	68f9      	ldr	r1, [r7, #12]
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7ff ff85 	bl	8002438 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800252e:	e024      	b.n	800257a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d008      	beq.n	8002548 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002536:	4b13      	ldr	r3, [pc, #76]	; (8002584 <prvProcessTimerOrBlockTask+0x90>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <prvProcessTimerOrBlockTask+0x50>
 8002540:	2301      	movs	r3, #1
 8002542:	e000      	b.n	8002546 <prvProcessTimerOrBlockTask+0x52>
 8002544:	2300      	movs	r3, #0
 8002546:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002548:	4b0f      	ldr	r3, [pc, #60]	; (8002588 <prvProcessTimerOrBlockTask+0x94>)
 800254a:	6818      	ldr	r0, [r3, #0]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	4619      	mov	r1, r3
 8002556:	f7fe ffa7 	bl	80014a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800255a:	f7ff fa23 	bl	80019a4 <xTaskResumeAll>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10a      	bne.n	800257a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002564:	4b09      	ldr	r3, [pc, #36]	; (800258c <prvProcessTimerOrBlockTask+0x98>)
 8002566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	f3bf 8f4f 	dsb	sy
 8002570:	f3bf 8f6f 	isb	sy
}
 8002574:	e001      	b.n	800257a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002576:	f7ff fa15 	bl	80019a4 <xTaskResumeAll>
}
 800257a:	bf00      	nop
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20000cfc 	.word	0x20000cfc
 8002588:	20000d00 	.word	0x20000d00
 800258c:	e000ed04 	.word	0xe000ed04

08002590 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002598:	4b0e      	ldr	r3, [pc, #56]	; (80025d4 <prvGetNextExpireTime+0x44>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <prvGetNextExpireTime+0x16>
 80025a2:	2201      	movs	r2, #1
 80025a4:	e000      	b.n	80025a8 <prvGetNextExpireTime+0x18>
 80025a6:	2200      	movs	r2, #0
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d105      	bne.n	80025c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80025b4:	4b07      	ldr	r3, [pc, #28]	; (80025d4 <prvGetNextExpireTime+0x44>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	e001      	b.n	80025c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80025c4:	68fb      	ldr	r3, [r7, #12]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	20000cf8 	.word	0x20000cf8

080025d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80025e0:	f7ff fa7e 	bl	8001ae0 <xTaskGetTickCount>
 80025e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80025e6:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <prvSampleTimeNow+0x3c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d205      	bcs.n	80025fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80025f0:	f000 f936 	bl	8002860 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	e002      	b.n	8002602 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002602:	4a04      	ldr	r2, [pc, #16]	; (8002614 <prvSampleTimeNow+0x3c>)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002608:	68fb      	ldr	r3, [r7, #12]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000d08 	.word	0x20000d08

08002618 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
 8002624:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002626:	2300      	movs	r3, #0
 8002628:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	429a      	cmp	r2, r3
 800263c:	d812      	bhi.n	8002664 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	1ad2      	subs	r2, r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	429a      	cmp	r2, r3
 800264a:	d302      	bcc.n	8002652 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800264c:	2301      	movs	r3, #1
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	e01b      	b.n	800268a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002652:	4b10      	ldr	r3, [pc, #64]	; (8002694 <prvInsertTimerInActiveList+0x7c>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	3304      	adds	r3, #4
 800265a:	4619      	mov	r1, r3
 800265c:	4610      	mov	r0, r2
 800265e:	f7fe f9ce 	bl	80009fe <vListInsert>
 8002662:	e012      	b.n	800268a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d206      	bcs.n	800267a <prvInsertTimerInActiveList+0x62>
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	d302      	bcc.n	800267a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002674:	2301      	movs	r3, #1
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	e007      	b.n	800268a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800267a:	4b07      	ldr	r3, [pc, #28]	; (8002698 <prvInsertTimerInActiveList+0x80>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	3304      	adds	r3, #4
 8002682:	4619      	mov	r1, r3
 8002684:	4610      	mov	r0, r2
 8002686:	f7fe f9ba 	bl	80009fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800268a:	697b      	ldr	r3, [r7, #20]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	20000cfc 	.word	0x20000cfc
 8002698:	20000cf8 	.word	0x20000cf8

0800269c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08e      	sub	sp, #56	; 0x38
 80026a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80026a2:	e0ca      	b.n	800283a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	da18      	bge.n	80026dc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80026aa:	1d3b      	adds	r3, r7, #4
 80026ac:	3304      	adds	r3, #4
 80026ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80026b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10a      	bne.n	80026cc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80026b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ba:	f383 8811 	msr	BASEPRI, r3
 80026be:	f3bf 8f6f 	isb	sy
 80026c2:	f3bf 8f4f 	dsb	sy
 80026c6:	61fb      	str	r3, [r7, #28]
}
 80026c8:	bf00      	nop
 80026ca:	e7fe      	b.n	80026ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80026cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026d2:	6850      	ldr	r0, [r2, #4]
 80026d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026d6:	6892      	ldr	r2, [r2, #8]
 80026d8:	4611      	mov	r1, r2
 80026da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f2c0 80aa 	blt.w	8002838 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80026e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d004      	beq.n	80026fa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80026f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f2:	3304      	adds	r3, #4
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fe f9bb 	bl	8000a70 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80026fa:	463b      	mov	r3, r7
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff ff6b 	bl	80025d8 <prvSampleTimeNow>
 8002702:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b09      	cmp	r3, #9
 8002708:	f200 8097 	bhi.w	800283a <prvProcessReceivedCommands+0x19e>
 800270c:	a201      	add	r2, pc, #4	; (adr r2, 8002714 <prvProcessReceivedCommands+0x78>)
 800270e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002712:	bf00      	nop
 8002714:	0800273d 	.word	0x0800273d
 8002718:	0800273d 	.word	0x0800273d
 800271c:	0800273d 	.word	0x0800273d
 8002720:	080027b1 	.word	0x080027b1
 8002724:	080027c5 	.word	0x080027c5
 8002728:	0800280f 	.word	0x0800280f
 800272c:	0800273d 	.word	0x0800273d
 8002730:	0800273d 	.word	0x0800273d
 8002734:	080027b1 	.word	0x080027b1
 8002738:	080027c5 	.word	0x080027c5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800273c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	b2da      	uxtb	r2, r3
 8002748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	18d1      	adds	r1, r2, r3
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800275a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800275c:	f7ff ff5c 	bl	8002618 <prvInsertTimerInActiveList>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d069      	beq.n	800283a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800276c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800276e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002770:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d05e      	beq.n	800283a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800277c:	68ba      	ldr	r2, [r7, #8]
 800277e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	441a      	add	r2, r3
 8002784:	2300      	movs	r3, #0
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	2300      	movs	r3, #0
 800278a:	2100      	movs	r1, #0
 800278c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800278e:	f7ff fe05 	bl	800239c <xTimerGenericCommand>
 8002792:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d14f      	bne.n	800283a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800279a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800279e:	f383 8811 	msr	BASEPRI, r3
 80027a2:	f3bf 8f6f 	isb	sy
 80027a6:	f3bf 8f4f 	dsb	sy
 80027aa:	61bb      	str	r3, [r7, #24]
}
 80027ac:	bf00      	nop
 80027ae:	e7fe      	b.n	80027ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80027b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027b6:	f023 0301 	bic.w	r3, r3, #1
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80027c2:	e03a      	b.n	800283a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80027c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027da:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80027dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10a      	bne.n	80027fa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80027e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e8:	f383 8811 	msr	BASEPRI, r3
 80027ec:	f3bf 8f6f 	isb	sy
 80027f0:	f3bf 8f4f 	dsb	sy
 80027f4:	617b      	str	r3, [r7, #20]
}
 80027f6:	bf00      	nop
 80027f8:	e7fe      	b.n	80027f8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80027fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fc:	699a      	ldr	r2, [r3, #24]
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	18d1      	adds	r1, r2, r3
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002806:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002808:	f7ff ff06 	bl	8002618 <prvInsertTimerInActiveList>
					break;
 800280c:	e015      	b.n	800283a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800280e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002810:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d103      	bne.n	8002824 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800281c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800281e:	f000 fbdf 	bl	8002fe0 <vPortFree>
 8002822:	e00a      	b.n	800283a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002826:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800282a:	f023 0301 	bic.w	r3, r3, #1
 800282e:	b2da      	uxtb	r2, r3
 8002830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002832:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002836:	e000      	b.n	800283a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8002838:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800283a:	4b08      	ldr	r3, [pc, #32]	; (800285c <prvProcessReceivedCommands+0x1c0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	1d39      	adds	r1, r7, #4
 8002840:	2200      	movs	r2, #0
 8002842:	4618      	mov	r0, r3
 8002844:	f7fe fc16 	bl	8001074 <xQueueReceive>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	f47f af2a 	bne.w	80026a4 <prvProcessReceivedCommands+0x8>
	}
}
 8002850:	bf00      	nop
 8002852:	bf00      	nop
 8002854:	3730      	adds	r7, #48	; 0x30
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000d00 	.word	0x20000d00

08002860 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b088      	sub	sp, #32
 8002864:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002866:	e048      	b.n	80028fa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002868:	4b2d      	ldr	r3, [pc, #180]	; (8002920 <prvSwitchTimerLists+0xc0>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002872:	4b2b      	ldr	r3, [pc, #172]	; (8002920 <prvSwitchTimerLists+0xc0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	3304      	adds	r3, #4
 8002880:	4618      	mov	r0, r3
 8002882:	f7fe f8f5 	bl	8000a70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d02e      	beq.n	80028fa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4413      	add	r3, r2
 80028a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d90e      	bls.n	80028cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80028ba:	4b19      	ldr	r3, [pc, #100]	; (8002920 <prvSwitchTimerLists+0xc0>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	3304      	adds	r3, #4
 80028c2:	4619      	mov	r1, r3
 80028c4:	4610      	mov	r0, r2
 80028c6:	f7fe f89a 	bl	80009fe <vListInsert>
 80028ca:	e016      	b.n	80028fa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80028cc:	2300      	movs	r3, #0
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	2300      	movs	r3, #0
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	2100      	movs	r1, #0
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f7ff fd60 	bl	800239c <xTimerGenericCommand>
 80028dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10a      	bne.n	80028fa <prvSwitchTimerLists+0x9a>
	__asm volatile
 80028e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e8:	f383 8811 	msr	BASEPRI, r3
 80028ec:	f3bf 8f6f 	isb	sy
 80028f0:	f3bf 8f4f 	dsb	sy
 80028f4:	603b      	str	r3, [r7, #0]
}
 80028f6:	bf00      	nop
 80028f8:	e7fe      	b.n	80028f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80028fa:	4b09      	ldr	r3, [pc, #36]	; (8002920 <prvSwitchTimerLists+0xc0>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1b1      	bne.n	8002868 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002904:	4b06      	ldr	r3, [pc, #24]	; (8002920 <prvSwitchTimerLists+0xc0>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800290a:	4b06      	ldr	r3, [pc, #24]	; (8002924 <prvSwitchTimerLists+0xc4>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a04      	ldr	r2, [pc, #16]	; (8002920 <prvSwitchTimerLists+0xc0>)
 8002910:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002912:	4a04      	ldr	r2, [pc, #16]	; (8002924 <prvSwitchTimerLists+0xc4>)
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	6013      	str	r3, [r2, #0]
}
 8002918:	bf00      	nop
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	20000cf8 	.word	0x20000cf8
 8002924:	20000cfc 	.word	0x20000cfc

08002928 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800292e:	f000 f969 	bl	8002c04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002932:	4b15      	ldr	r3, [pc, #84]	; (8002988 <prvCheckForValidListAndQueue+0x60>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d120      	bne.n	800297c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800293a:	4814      	ldr	r0, [pc, #80]	; (800298c <prvCheckForValidListAndQueue+0x64>)
 800293c:	f7fe f80e 	bl	800095c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002940:	4813      	ldr	r0, [pc, #76]	; (8002990 <prvCheckForValidListAndQueue+0x68>)
 8002942:	f7fe f80b 	bl	800095c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002946:	4b13      	ldr	r3, [pc, #76]	; (8002994 <prvCheckForValidListAndQueue+0x6c>)
 8002948:	4a10      	ldr	r2, [pc, #64]	; (800298c <prvCheckForValidListAndQueue+0x64>)
 800294a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800294c:	4b12      	ldr	r3, [pc, #72]	; (8002998 <prvCheckForValidListAndQueue+0x70>)
 800294e:	4a10      	ldr	r2, [pc, #64]	; (8002990 <prvCheckForValidListAndQueue+0x68>)
 8002950:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002952:	2300      	movs	r3, #0
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	4b11      	ldr	r3, [pc, #68]	; (800299c <prvCheckForValidListAndQueue+0x74>)
 8002958:	4a11      	ldr	r2, [pc, #68]	; (80029a0 <prvCheckForValidListAndQueue+0x78>)
 800295a:	2110      	movs	r1, #16
 800295c:	200a      	movs	r0, #10
 800295e:	f7fe f919 	bl	8000b94 <xQueueGenericCreateStatic>
 8002962:	4603      	mov	r3, r0
 8002964:	4a08      	ldr	r2, [pc, #32]	; (8002988 <prvCheckForValidListAndQueue+0x60>)
 8002966:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002968:	4b07      	ldr	r3, [pc, #28]	; (8002988 <prvCheckForValidListAndQueue+0x60>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d005      	beq.n	800297c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002970:	4b05      	ldr	r3, [pc, #20]	; (8002988 <prvCheckForValidListAndQueue+0x60>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	490b      	ldr	r1, [pc, #44]	; (80029a4 <prvCheckForValidListAndQueue+0x7c>)
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe fd6c 	bl	8001454 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800297c:	f000 f972 	bl	8002c64 <vPortExitCritical>
}
 8002980:	bf00      	nop
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	20000d00 	.word	0x20000d00
 800298c:	20000cd0 	.word	0x20000cd0
 8002990:	20000ce4 	.word	0x20000ce4
 8002994:	20000cf8 	.word	0x20000cf8
 8002998:	20000cfc 	.word	0x20000cfc
 800299c:	20000dac 	.word	0x20000dac
 80029a0:	20000d0c 	.word	0x20000d0c
 80029a4:	08003bd8 	.word	0x08003bd8

080029a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	3b04      	subs	r3, #4
 80029b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	3b04      	subs	r3, #4
 80029c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f023 0201 	bic.w	r2, r3, #1
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	3b04      	subs	r3, #4
 80029d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80029d8:	4a0c      	ldr	r2, [pc, #48]	; (8002a0c <pxPortInitialiseStack+0x64>)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	3b14      	subs	r3, #20
 80029e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	3b04      	subs	r3, #4
 80029ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f06f 0202 	mvn.w	r2, #2
 80029f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	3b20      	subs	r3, #32
 80029fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80029fe:	68fb      	ldr	r3, [r7, #12]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	08002a11 	.word	0x08002a11

08002a10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002a16:	2300      	movs	r3, #0
 8002a18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002a1a:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <prvTaskExitError+0x54>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a22:	d00a      	beq.n	8002a3a <prvTaskExitError+0x2a>
	__asm volatile
 8002a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a28:	f383 8811 	msr	BASEPRI, r3
 8002a2c:	f3bf 8f6f 	isb	sy
 8002a30:	f3bf 8f4f 	dsb	sy
 8002a34:	60fb      	str	r3, [r7, #12]
}
 8002a36:	bf00      	nop
 8002a38:	e7fe      	b.n	8002a38 <prvTaskExitError+0x28>
	__asm volatile
 8002a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3e:	f383 8811 	msr	BASEPRI, r3
 8002a42:	f3bf 8f6f 	isb	sy
 8002a46:	f3bf 8f4f 	dsb	sy
 8002a4a:	60bb      	str	r3, [r7, #8]
}
 8002a4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002a4e:	bf00      	nop
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0fc      	beq.n	8002a50 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002a56:	bf00      	nop
 8002a58:	bf00      	nop
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	20000004 	.word	0x20000004
	...

08002a70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002a70:	4b07      	ldr	r3, [pc, #28]	; (8002a90 <pxCurrentTCBConst2>)
 8002a72:	6819      	ldr	r1, [r3, #0]
 8002a74:	6808      	ldr	r0, [r1, #0]
 8002a76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a7a:	f380 8809 	msr	PSP, r0
 8002a7e:	f3bf 8f6f 	isb	sy
 8002a82:	f04f 0000 	mov.w	r0, #0
 8002a86:	f380 8811 	msr	BASEPRI, r0
 8002a8a:	4770      	bx	lr
 8002a8c:	f3af 8000 	nop.w

08002a90 <pxCurrentTCBConst2>:
 8002a90:	200007d0 	.word	0x200007d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002a94:	bf00      	nop
 8002a96:	bf00      	nop

08002a98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002a98:	4808      	ldr	r0, [pc, #32]	; (8002abc <prvPortStartFirstTask+0x24>)
 8002a9a:	6800      	ldr	r0, [r0, #0]
 8002a9c:	6800      	ldr	r0, [r0, #0]
 8002a9e:	f380 8808 	msr	MSP, r0
 8002aa2:	f04f 0000 	mov.w	r0, #0
 8002aa6:	f380 8814 	msr	CONTROL, r0
 8002aaa:	b662      	cpsie	i
 8002aac:	b661      	cpsie	f
 8002aae:	f3bf 8f4f 	dsb	sy
 8002ab2:	f3bf 8f6f 	isb	sy
 8002ab6:	df00      	svc	0
 8002ab8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002aba:	bf00      	nop
 8002abc:	e000ed08 	.word	0xe000ed08

08002ac0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002ac6:	4b46      	ldr	r3, [pc, #280]	; (8002be0 <xPortStartScheduler+0x120>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a46      	ldr	r2, [pc, #280]	; (8002be4 <xPortStartScheduler+0x124>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d10a      	bne.n	8002ae6 <xPortStartScheduler+0x26>
	__asm volatile
 8002ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad4:	f383 8811 	msr	BASEPRI, r3
 8002ad8:	f3bf 8f6f 	isb	sy
 8002adc:	f3bf 8f4f 	dsb	sy
 8002ae0:	613b      	str	r3, [r7, #16]
}
 8002ae2:	bf00      	nop
 8002ae4:	e7fe      	b.n	8002ae4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002ae6:	4b3e      	ldr	r3, [pc, #248]	; (8002be0 <xPortStartScheduler+0x120>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a3f      	ldr	r2, [pc, #252]	; (8002be8 <xPortStartScheduler+0x128>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d10a      	bne.n	8002b06 <xPortStartScheduler+0x46>
	__asm volatile
 8002af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af4:	f383 8811 	msr	BASEPRI, r3
 8002af8:	f3bf 8f6f 	isb	sy
 8002afc:	f3bf 8f4f 	dsb	sy
 8002b00:	60fb      	str	r3, [r7, #12]
}
 8002b02:	bf00      	nop
 8002b04:	e7fe      	b.n	8002b04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002b06:	4b39      	ldr	r3, [pc, #228]	; (8002bec <xPortStartScheduler+0x12c>)
 8002b08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	22ff      	movs	r2, #255	; 0xff
 8002b16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002b20:	78fb      	ldrb	r3, [r7, #3]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	4b31      	ldr	r3, [pc, #196]	; (8002bf0 <xPortStartScheduler+0x130>)
 8002b2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002b2e:	4b31      	ldr	r3, [pc, #196]	; (8002bf4 <xPortStartScheduler+0x134>)
 8002b30:	2207      	movs	r2, #7
 8002b32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b34:	e009      	b.n	8002b4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002b36:	4b2f      	ldr	r3, [pc, #188]	; (8002bf4 <xPortStartScheduler+0x134>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	4a2d      	ldr	r2, [pc, #180]	; (8002bf4 <xPortStartScheduler+0x134>)
 8002b3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002b40:	78fb      	ldrb	r3, [r7, #3]
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b4a:	78fb      	ldrb	r3, [r7, #3]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b52:	2b80      	cmp	r3, #128	; 0x80
 8002b54:	d0ef      	beq.n	8002b36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002b56:	4b27      	ldr	r3, [pc, #156]	; (8002bf4 <xPortStartScheduler+0x134>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f1c3 0307 	rsb	r3, r3, #7
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d00a      	beq.n	8002b78 <xPortStartScheduler+0xb8>
	__asm volatile
 8002b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b66:	f383 8811 	msr	BASEPRI, r3
 8002b6a:	f3bf 8f6f 	isb	sy
 8002b6e:	f3bf 8f4f 	dsb	sy
 8002b72:	60bb      	str	r3, [r7, #8]
}
 8002b74:	bf00      	nop
 8002b76:	e7fe      	b.n	8002b76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002b78:	4b1e      	ldr	r3, [pc, #120]	; (8002bf4 <xPortStartScheduler+0x134>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	021b      	lsls	r3, r3, #8
 8002b7e:	4a1d      	ldr	r2, [pc, #116]	; (8002bf4 <xPortStartScheduler+0x134>)
 8002b80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002b82:	4b1c      	ldr	r3, [pc, #112]	; (8002bf4 <xPortStartScheduler+0x134>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b8a:	4a1a      	ldr	r2, [pc, #104]	; (8002bf4 <xPortStartScheduler+0x134>)
 8002b8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002b96:	4b18      	ldr	r3, [pc, #96]	; (8002bf8 <xPortStartScheduler+0x138>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a17      	ldr	r2, [pc, #92]	; (8002bf8 <xPortStartScheduler+0x138>)
 8002b9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ba0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002ba2:	4b15      	ldr	r3, [pc, #84]	; (8002bf8 <xPortStartScheduler+0x138>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a14      	ldr	r2, [pc, #80]	; (8002bf8 <xPortStartScheduler+0x138>)
 8002ba8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002bac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002bae:	f000 f8dd 	bl	8002d6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002bb2:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <xPortStartScheduler+0x13c>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002bb8:	f000 f8fc 	bl	8002db4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002bbc:	4b10      	ldr	r3, [pc, #64]	; (8002c00 <xPortStartScheduler+0x140>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a0f      	ldr	r2, [pc, #60]	; (8002c00 <xPortStartScheduler+0x140>)
 8002bc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002bc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002bc8:	f7ff ff66 	bl	8002a98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002bcc:	f7ff f852 	bl	8001c74 <vTaskSwitchContext>
	prvTaskExitError();
 8002bd0:	f7ff ff1e 	bl	8002a10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	e000ed00 	.word	0xe000ed00
 8002be4:	410fc271 	.word	0x410fc271
 8002be8:	410fc270 	.word	0x410fc270
 8002bec:	e000e400 	.word	0xe000e400
 8002bf0:	20000dfc 	.word	0x20000dfc
 8002bf4:	20000e00 	.word	0x20000e00
 8002bf8:	e000ed20 	.word	0xe000ed20
 8002bfc:	20000004 	.word	0x20000004
 8002c00:	e000ef34 	.word	0xe000ef34

08002c04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
	__asm volatile
 8002c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0e:	f383 8811 	msr	BASEPRI, r3
 8002c12:	f3bf 8f6f 	isb	sy
 8002c16:	f3bf 8f4f 	dsb	sy
 8002c1a:	607b      	str	r3, [r7, #4]
}
 8002c1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002c1e:	4b0f      	ldr	r3, [pc, #60]	; (8002c5c <vPortEnterCritical+0x58>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	3301      	adds	r3, #1
 8002c24:	4a0d      	ldr	r2, [pc, #52]	; (8002c5c <vPortEnterCritical+0x58>)
 8002c26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002c28:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <vPortEnterCritical+0x58>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d10f      	bne.n	8002c50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002c30:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <vPortEnterCritical+0x5c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00a      	beq.n	8002c50 <vPortEnterCritical+0x4c>
	__asm volatile
 8002c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3e:	f383 8811 	msr	BASEPRI, r3
 8002c42:	f3bf 8f6f 	isb	sy
 8002c46:	f3bf 8f4f 	dsb	sy
 8002c4a:	603b      	str	r3, [r7, #0]
}
 8002c4c:	bf00      	nop
 8002c4e:	e7fe      	b.n	8002c4e <vPortEnterCritical+0x4a>
	}
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	20000004 	.word	0x20000004
 8002c60:	e000ed04 	.word	0xe000ed04

08002c64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002c6a:	4b12      	ldr	r3, [pc, #72]	; (8002cb4 <vPortExitCritical+0x50>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10a      	bne.n	8002c88 <vPortExitCritical+0x24>
	__asm volatile
 8002c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c76:	f383 8811 	msr	BASEPRI, r3
 8002c7a:	f3bf 8f6f 	isb	sy
 8002c7e:	f3bf 8f4f 	dsb	sy
 8002c82:	607b      	str	r3, [r7, #4]
}
 8002c84:	bf00      	nop
 8002c86:	e7fe      	b.n	8002c86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002c88:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <vPortExitCritical+0x50>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	4a09      	ldr	r2, [pc, #36]	; (8002cb4 <vPortExitCritical+0x50>)
 8002c90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002c92:	4b08      	ldr	r3, [pc, #32]	; (8002cb4 <vPortExitCritical+0x50>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d105      	bne.n	8002ca6 <vPortExitCritical+0x42>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	f383 8811 	msr	BASEPRI, r3
}
 8002ca4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	20000004 	.word	0x20000004
	...

08002cc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002cc0:	f3ef 8009 	mrs	r0, PSP
 8002cc4:	f3bf 8f6f 	isb	sy
 8002cc8:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <pxCurrentTCBConst>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	f01e 0f10 	tst.w	lr, #16
 8002cd0:	bf08      	it	eq
 8002cd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002cd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cda:	6010      	str	r0, [r2, #0]
 8002cdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002ce0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002ce4:	f380 8811 	msr	BASEPRI, r0
 8002ce8:	f3bf 8f4f 	dsb	sy
 8002cec:	f3bf 8f6f 	isb	sy
 8002cf0:	f7fe ffc0 	bl	8001c74 <vTaskSwitchContext>
 8002cf4:	f04f 0000 	mov.w	r0, #0
 8002cf8:	f380 8811 	msr	BASEPRI, r0
 8002cfc:	bc09      	pop	{r0, r3}
 8002cfe:	6819      	ldr	r1, [r3, #0]
 8002d00:	6808      	ldr	r0, [r1, #0]
 8002d02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d06:	f01e 0f10 	tst.w	lr, #16
 8002d0a:	bf08      	it	eq
 8002d0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002d10:	f380 8809 	msr	PSP, r0
 8002d14:	f3bf 8f6f 	isb	sy
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	f3af 8000 	nop.w

08002d20 <pxCurrentTCBConst>:
 8002d20:	200007d0 	.word	0x200007d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002d24:	bf00      	nop
 8002d26:	bf00      	nop

08002d28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
	__asm volatile
 8002d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d32:	f383 8811 	msr	BASEPRI, r3
 8002d36:	f3bf 8f6f 	isb	sy
 8002d3a:	f3bf 8f4f 	dsb	sy
 8002d3e:	607b      	str	r3, [r7, #4]
}
 8002d40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002d42:	f7fe fedd 	bl	8001b00 <xTaskIncrementTick>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002d4c:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <xPortSysTickHandler+0x40>)
 8002d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	2300      	movs	r3, #0
 8002d56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	f383 8811 	msr	BASEPRI, r3
}
 8002d5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002d60:	bf00      	nop
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	e000ed04 	.word	0xe000ed04

08002d6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002d70:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <vPortSetupTimerInterrupt+0x34>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002d76:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <vPortSetupTimerInterrupt+0x38>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002d7c:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <vPortSetupTimerInterrupt+0x3c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a0a      	ldr	r2, [pc, #40]	; (8002dac <vPortSetupTimerInterrupt+0x40>)
 8002d82:	fba2 2303 	umull	r2, r3, r2, r3
 8002d86:	099b      	lsrs	r3, r3, #6
 8002d88:	4a09      	ldr	r2, [pc, #36]	; (8002db0 <vPortSetupTimerInterrupt+0x44>)
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002d8e:	4b04      	ldr	r3, [pc, #16]	; (8002da0 <vPortSetupTimerInterrupt+0x34>)
 8002d90:	2207      	movs	r2, #7
 8002d92:	601a      	str	r2, [r3, #0]
}
 8002d94:	bf00      	nop
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	e000e010 	.word	0xe000e010
 8002da4:	e000e018 	.word	0xe000e018
 8002da8:	20000000 	.word	0x20000000
 8002dac:	10624dd3 	.word	0x10624dd3
 8002db0:	e000e014 	.word	0xe000e014

08002db4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002db4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002dc4 <vPortEnableVFP+0x10>
 8002db8:	6801      	ldr	r1, [r0, #0]
 8002dba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002dbe:	6001      	str	r1, [r0, #0]
 8002dc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002dc2:	bf00      	nop
 8002dc4:	e000ed88 	.word	0xe000ed88

08002dc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002dce:	f3ef 8305 	mrs	r3, IPSR
 8002dd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2b0f      	cmp	r3, #15
 8002dd8:	d914      	bls.n	8002e04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002dda:	4a17      	ldr	r2, [pc, #92]	; (8002e38 <vPortValidateInterruptPriority+0x70>)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4413      	add	r3, r2
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002de4:	4b15      	ldr	r3, [pc, #84]	; (8002e3c <vPortValidateInterruptPriority+0x74>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	7afa      	ldrb	r2, [r7, #11]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d20a      	bcs.n	8002e04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8002dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df2:	f383 8811 	msr	BASEPRI, r3
 8002df6:	f3bf 8f6f 	isb	sy
 8002dfa:	f3bf 8f4f 	dsb	sy
 8002dfe:	607b      	str	r3, [r7, #4]
}
 8002e00:	bf00      	nop
 8002e02:	e7fe      	b.n	8002e02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002e04:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <vPortValidateInterruptPriority+0x78>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e0c:	4b0d      	ldr	r3, [pc, #52]	; (8002e44 <vPortValidateInterruptPriority+0x7c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d90a      	bls.n	8002e2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8002e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e18:	f383 8811 	msr	BASEPRI, r3
 8002e1c:	f3bf 8f6f 	isb	sy
 8002e20:	f3bf 8f4f 	dsb	sy
 8002e24:	603b      	str	r3, [r7, #0]
}
 8002e26:	bf00      	nop
 8002e28:	e7fe      	b.n	8002e28 <vPortValidateInterruptPriority+0x60>
	}
 8002e2a:	bf00      	nop
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	e000e3f0 	.word	0xe000e3f0
 8002e3c:	20000dfc 	.word	0x20000dfc
 8002e40:	e000ed0c 	.word	0xe000ed0c
 8002e44:	20000e00 	.word	0x20000e00

08002e48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08a      	sub	sp, #40	; 0x28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002e54:	f7fe fd98 	bl	8001988 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002e58:	4b5b      	ldr	r3, [pc, #364]	; (8002fc8 <pvPortMalloc+0x180>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002e60:	f000 f920 	bl	80030a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002e64:	4b59      	ldr	r3, [pc, #356]	; (8002fcc <pvPortMalloc+0x184>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f040 8093 	bne.w	8002f98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d01d      	beq.n	8002eb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002e78:	2208      	movs	r2, #8
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d014      	beq.n	8002eb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f023 0307 	bic.w	r3, r3, #7
 8002e90:	3308      	adds	r3, #8
 8002e92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <pvPortMalloc+0x6c>
	__asm volatile
 8002e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea2:	f383 8811 	msr	BASEPRI, r3
 8002ea6:	f3bf 8f6f 	isb	sy
 8002eaa:	f3bf 8f4f 	dsb	sy
 8002eae:	617b      	str	r3, [r7, #20]
}
 8002eb0:	bf00      	nop
 8002eb2:	e7fe      	b.n	8002eb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d06e      	beq.n	8002f98 <pvPortMalloc+0x150>
 8002eba:	4b45      	ldr	r3, [pc, #276]	; (8002fd0 <pvPortMalloc+0x188>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d869      	bhi.n	8002f98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002ec4:	4b43      	ldr	r3, [pc, #268]	; (8002fd4 <pvPortMalloc+0x18c>)
 8002ec6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002ec8:	4b42      	ldr	r3, [pc, #264]	; (8002fd4 <pvPortMalloc+0x18c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002ece:	e004      	b.n	8002eda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d903      	bls.n	8002eec <pvPortMalloc+0xa4>
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1f1      	bne.n	8002ed0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002eec:	4b36      	ldr	r3, [pc, #216]	; (8002fc8 <pvPortMalloc+0x180>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d050      	beq.n	8002f98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2208      	movs	r2, #8
 8002efc:	4413      	add	r3, r2
 8002efe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	1ad2      	subs	r2, r2, r3
 8002f10:	2308      	movs	r3, #8
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d91f      	bls.n	8002f58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00a      	beq.n	8002f40 <pvPortMalloc+0xf8>
	__asm volatile
 8002f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2e:	f383 8811 	msr	BASEPRI, r3
 8002f32:	f3bf 8f6f 	isb	sy
 8002f36:	f3bf 8f4f 	dsb	sy
 8002f3a:	613b      	str	r3, [r7, #16]
}
 8002f3c:	bf00      	nop
 8002f3e:	e7fe      	b.n	8002f3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	1ad2      	subs	r2, r2, r3
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002f52:	69b8      	ldr	r0, [r7, #24]
 8002f54:	f000 f908 	bl	8003168 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002f58:	4b1d      	ldr	r3, [pc, #116]	; (8002fd0 <pvPortMalloc+0x188>)
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	4a1b      	ldr	r2, [pc, #108]	; (8002fd0 <pvPortMalloc+0x188>)
 8002f64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002f66:	4b1a      	ldr	r3, [pc, #104]	; (8002fd0 <pvPortMalloc+0x188>)
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	4b1b      	ldr	r3, [pc, #108]	; (8002fd8 <pvPortMalloc+0x190>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d203      	bcs.n	8002f7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002f72:	4b17      	ldr	r3, [pc, #92]	; (8002fd0 <pvPortMalloc+0x188>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a18      	ldr	r2, [pc, #96]	; (8002fd8 <pvPortMalloc+0x190>)
 8002f78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	4b13      	ldr	r3, [pc, #76]	; (8002fcc <pvPortMalloc+0x184>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	431a      	orrs	r2, r3
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002f8e:	4b13      	ldr	r3, [pc, #76]	; (8002fdc <pvPortMalloc+0x194>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	3301      	adds	r3, #1
 8002f94:	4a11      	ldr	r2, [pc, #68]	; (8002fdc <pvPortMalloc+0x194>)
 8002f96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002f98:	f7fe fd04 	bl	80019a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00a      	beq.n	8002fbc <pvPortMalloc+0x174>
	__asm volatile
 8002fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002faa:	f383 8811 	msr	BASEPRI, r3
 8002fae:	f3bf 8f6f 	isb	sy
 8002fb2:	f3bf 8f4f 	dsb	sy
 8002fb6:	60fb      	str	r3, [r7, #12]
}
 8002fb8:	bf00      	nop
 8002fba:	e7fe      	b.n	8002fba <pvPortMalloc+0x172>
	return pvReturn;
 8002fbc:	69fb      	ldr	r3, [r7, #28]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3728      	adds	r7, #40	; 0x28
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20004a0c 	.word	0x20004a0c
 8002fcc:	20004a20 	.word	0x20004a20
 8002fd0:	20004a10 	.word	0x20004a10
 8002fd4:	20004a04 	.word	0x20004a04
 8002fd8:	20004a14 	.word	0x20004a14
 8002fdc:	20004a18 	.word	0x20004a18

08002fe0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d04d      	beq.n	800308e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002ff2:	2308      	movs	r3, #8
 8002ff4:	425b      	negs	r3, r3
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	4b24      	ldr	r3, [pc, #144]	; (8003098 <vPortFree+0xb8>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4013      	ands	r3, r2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10a      	bne.n	8003024 <vPortFree+0x44>
	__asm volatile
 800300e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003012:	f383 8811 	msr	BASEPRI, r3
 8003016:	f3bf 8f6f 	isb	sy
 800301a:	f3bf 8f4f 	dsb	sy
 800301e:	60fb      	str	r3, [r7, #12]
}
 8003020:	bf00      	nop
 8003022:	e7fe      	b.n	8003022 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00a      	beq.n	8003042 <vPortFree+0x62>
	__asm volatile
 800302c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003030:	f383 8811 	msr	BASEPRI, r3
 8003034:	f3bf 8f6f 	isb	sy
 8003038:	f3bf 8f4f 	dsb	sy
 800303c:	60bb      	str	r3, [r7, #8]
}
 800303e:	bf00      	nop
 8003040:	e7fe      	b.n	8003040 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	4b14      	ldr	r3, [pc, #80]	; (8003098 <vPortFree+0xb8>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4013      	ands	r3, r2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d01e      	beq.n	800308e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d11a      	bne.n	800308e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <vPortFree+0xb8>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	43db      	mvns	r3, r3
 8003062:	401a      	ands	r2, r3
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003068:	f7fe fc8e 	bl	8001988 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	4b0a      	ldr	r3, [pc, #40]	; (800309c <vPortFree+0xbc>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4413      	add	r3, r2
 8003076:	4a09      	ldr	r2, [pc, #36]	; (800309c <vPortFree+0xbc>)
 8003078:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800307a:	6938      	ldr	r0, [r7, #16]
 800307c:	f000 f874 	bl	8003168 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003080:	4b07      	ldr	r3, [pc, #28]	; (80030a0 <vPortFree+0xc0>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	3301      	adds	r3, #1
 8003086:	4a06      	ldr	r2, [pc, #24]	; (80030a0 <vPortFree+0xc0>)
 8003088:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800308a:	f7fe fc8b 	bl	80019a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800308e:	bf00      	nop
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20004a20 	.word	0x20004a20
 800309c:	20004a10 	.word	0x20004a10
 80030a0:	20004a1c 	.word	0x20004a1c

080030a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80030aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80030ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80030b0:	4b27      	ldr	r3, [pc, #156]	; (8003150 <prvHeapInit+0xac>)
 80030b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00c      	beq.n	80030d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	3307      	adds	r3, #7
 80030c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f023 0307 	bic.w	r3, r3, #7
 80030ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	4a1f      	ldr	r2, [pc, #124]	; (8003150 <prvHeapInit+0xac>)
 80030d4:	4413      	add	r3, r2
 80030d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80030dc:	4a1d      	ldr	r2, [pc, #116]	; (8003154 <prvHeapInit+0xb0>)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80030e2:	4b1c      	ldr	r3, [pc, #112]	; (8003154 <prvHeapInit+0xb0>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	4413      	add	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80030f0:	2208      	movs	r2, #8
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	1a9b      	subs	r3, r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f023 0307 	bic.w	r3, r3, #7
 80030fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4a15      	ldr	r2, [pc, #84]	; (8003158 <prvHeapInit+0xb4>)
 8003104:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003106:	4b14      	ldr	r3, [pc, #80]	; (8003158 <prvHeapInit+0xb4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2200      	movs	r2, #0
 800310c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800310e:	4b12      	ldr	r3, [pc, #72]	; (8003158 <prvHeapInit+0xb4>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	1ad2      	subs	r2, r2, r3
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003124:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <prvHeapInit+0xb4>)
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	4a0a      	ldr	r2, [pc, #40]	; (800315c <prvHeapInit+0xb8>)
 8003132:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	4a09      	ldr	r2, [pc, #36]	; (8003160 <prvHeapInit+0xbc>)
 800313a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800313c:	4b09      	ldr	r3, [pc, #36]	; (8003164 <prvHeapInit+0xc0>)
 800313e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003142:	601a      	str	r2, [r3, #0]
}
 8003144:	bf00      	nop
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	20000e04 	.word	0x20000e04
 8003154:	20004a04 	.word	0x20004a04
 8003158:	20004a0c 	.word	0x20004a0c
 800315c:	20004a14 	.word	0x20004a14
 8003160:	20004a10 	.word	0x20004a10
 8003164:	20004a20 	.word	0x20004a20

08003168 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003170:	4b28      	ldr	r3, [pc, #160]	; (8003214 <prvInsertBlockIntoFreeList+0xac>)
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	e002      	b.n	800317c <prvInsertBlockIntoFreeList+0x14>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	429a      	cmp	r2, r3
 8003184:	d8f7      	bhi.n	8003176 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	4413      	add	r3, r2
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	429a      	cmp	r2, r3
 8003196:	d108      	bne.n	80031aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	441a      	add	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	441a      	add	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d118      	bne.n	80031f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	4b15      	ldr	r3, [pc, #84]	; (8003218 <prvInsertBlockIntoFreeList+0xb0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d00d      	beq.n	80031e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	441a      	add	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	e008      	b.n	80031f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80031e6:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <prvInsertBlockIntoFreeList+0xb0>)
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	e003      	b.n	80031f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d002      	beq.n	8003206 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003206:	bf00      	nop
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	20004a04 	.word	0x20004a04
 8003218:	20004a0c 	.word	0x20004a0c

0800321c <__errno>:
 800321c:	4b01      	ldr	r3, [pc, #4]	; (8003224 <__errno+0x8>)
 800321e:	6818      	ldr	r0, [r3, #0]
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	20000008 	.word	0x20000008

08003228 <__libc_init_array>:
 8003228:	b570      	push	{r4, r5, r6, lr}
 800322a:	4d0d      	ldr	r5, [pc, #52]	; (8003260 <__libc_init_array+0x38>)
 800322c:	4c0d      	ldr	r4, [pc, #52]	; (8003264 <__libc_init_array+0x3c>)
 800322e:	1b64      	subs	r4, r4, r5
 8003230:	10a4      	asrs	r4, r4, #2
 8003232:	2600      	movs	r6, #0
 8003234:	42a6      	cmp	r6, r4
 8003236:	d109      	bne.n	800324c <__libc_init_array+0x24>
 8003238:	4d0b      	ldr	r5, [pc, #44]	; (8003268 <__libc_init_array+0x40>)
 800323a:	4c0c      	ldr	r4, [pc, #48]	; (800326c <__libc_init_array+0x44>)
 800323c:	f000 fc8e 	bl	8003b5c <_init>
 8003240:	1b64      	subs	r4, r4, r5
 8003242:	10a4      	asrs	r4, r4, #2
 8003244:	2600      	movs	r6, #0
 8003246:	42a6      	cmp	r6, r4
 8003248:	d105      	bne.n	8003256 <__libc_init_array+0x2e>
 800324a:	bd70      	pop	{r4, r5, r6, pc}
 800324c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003250:	4798      	blx	r3
 8003252:	3601      	adds	r6, #1
 8003254:	e7ee      	b.n	8003234 <__libc_init_array+0xc>
 8003256:	f855 3b04 	ldr.w	r3, [r5], #4
 800325a:	4798      	blx	r3
 800325c:	3601      	adds	r6, #1
 800325e:	e7f2      	b.n	8003246 <__libc_init_array+0x1e>
 8003260:	08003c10 	.word	0x08003c10
 8003264:	08003c10 	.word	0x08003c10
 8003268:	08003c10 	.word	0x08003c10
 800326c:	08003c14 	.word	0x08003c14

08003270 <memcpy>:
 8003270:	440a      	add	r2, r1
 8003272:	4291      	cmp	r1, r2
 8003274:	f100 33ff 	add.w	r3, r0, #4294967295
 8003278:	d100      	bne.n	800327c <memcpy+0xc>
 800327a:	4770      	bx	lr
 800327c:	b510      	push	{r4, lr}
 800327e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003282:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003286:	4291      	cmp	r1, r2
 8003288:	d1f9      	bne.n	800327e <memcpy+0xe>
 800328a:	bd10      	pop	{r4, pc}

0800328c <memset>:
 800328c:	4402      	add	r2, r0
 800328e:	4603      	mov	r3, r0
 8003290:	4293      	cmp	r3, r2
 8003292:	d100      	bne.n	8003296 <memset+0xa>
 8003294:	4770      	bx	lr
 8003296:	f803 1b01 	strb.w	r1, [r3], #1
 800329a:	e7f9      	b.n	8003290 <memset+0x4>

0800329c <siprintf>:
 800329c:	b40e      	push	{r1, r2, r3}
 800329e:	b500      	push	{lr}
 80032a0:	b09c      	sub	sp, #112	; 0x70
 80032a2:	ab1d      	add	r3, sp, #116	; 0x74
 80032a4:	9002      	str	r0, [sp, #8]
 80032a6:	9006      	str	r0, [sp, #24]
 80032a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80032ac:	4809      	ldr	r0, [pc, #36]	; (80032d4 <siprintf+0x38>)
 80032ae:	9107      	str	r1, [sp, #28]
 80032b0:	9104      	str	r1, [sp, #16]
 80032b2:	4909      	ldr	r1, [pc, #36]	; (80032d8 <siprintf+0x3c>)
 80032b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80032b8:	9105      	str	r1, [sp, #20]
 80032ba:	6800      	ldr	r0, [r0, #0]
 80032bc:	9301      	str	r3, [sp, #4]
 80032be:	a902      	add	r1, sp, #8
 80032c0:	f000 f868 	bl	8003394 <_svfiprintf_r>
 80032c4:	9b02      	ldr	r3, [sp, #8]
 80032c6:	2200      	movs	r2, #0
 80032c8:	701a      	strb	r2, [r3, #0]
 80032ca:	b01c      	add	sp, #112	; 0x70
 80032cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80032d0:	b003      	add	sp, #12
 80032d2:	4770      	bx	lr
 80032d4:	20000008 	.word	0x20000008
 80032d8:	ffff0208 	.word	0xffff0208

080032dc <__ssputs_r>:
 80032dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032e0:	688e      	ldr	r6, [r1, #8]
 80032e2:	429e      	cmp	r6, r3
 80032e4:	4682      	mov	sl, r0
 80032e6:	460c      	mov	r4, r1
 80032e8:	4690      	mov	r8, r2
 80032ea:	461f      	mov	r7, r3
 80032ec:	d838      	bhi.n	8003360 <__ssputs_r+0x84>
 80032ee:	898a      	ldrh	r2, [r1, #12]
 80032f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80032f4:	d032      	beq.n	800335c <__ssputs_r+0x80>
 80032f6:	6825      	ldr	r5, [r4, #0]
 80032f8:	6909      	ldr	r1, [r1, #16]
 80032fa:	eba5 0901 	sub.w	r9, r5, r1
 80032fe:	6965      	ldr	r5, [r4, #20]
 8003300:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003304:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003308:	3301      	adds	r3, #1
 800330a:	444b      	add	r3, r9
 800330c:	106d      	asrs	r5, r5, #1
 800330e:	429d      	cmp	r5, r3
 8003310:	bf38      	it	cc
 8003312:	461d      	movcc	r5, r3
 8003314:	0553      	lsls	r3, r2, #21
 8003316:	d531      	bpl.n	800337c <__ssputs_r+0xa0>
 8003318:	4629      	mov	r1, r5
 800331a:	f000 fb55 	bl	80039c8 <_malloc_r>
 800331e:	4606      	mov	r6, r0
 8003320:	b950      	cbnz	r0, 8003338 <__ssputs_r+0x5c>
 8003322:	230c      	movs	r3, #12
 8003324:	f8ca 3000 	str.w	r3, [sl]
 8003328:	89a3      	ldrh	r3, [r4, #12]
 800332a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800332e:	81a3      	strh	r3, [r4, #12]
 8003330:	f04f 30ff 	mov.w	r0, #4294967295
 8003334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003338:	6921      	ldr	r1, [r4, #16]
 800333a:	464a      	mov	r2, r9
 800333c:	f7ff ff98 	bl	8003270 <memcpy>
 8003340:	89a3      	ldrh	r3, [r4, #12]
 8003342:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800334a:	81a3      	strh	r3, [r4, #12]
 800334c:	6126      	str	r6, [r4, #16]
 800334e:	6165      	str	r5, [r4, #20]
 8003350:	444e      	add	r6, r9
 8003352:	eba5 0509 	sub.w	r5, r5, r9
 8003356:	6026      	str	r6, [r4, #0]
 8003358:	60a5      	str	r5, [r4, #8]
 800335a:	463e      	mov	r6, r7
 800335c:	42be      	cmp	r6, r7
 800335e:	d900      	bls.n	8003362 <__ssputs_r+0x86>
 8003360:	463e      	mov	r6, r7
 8003362:	6820      	ldr	r0, [r4, #0]
 8003364:	4632      	mov	r2, r6
 8003366:	4641      	mov	r1, r8
 8003368:	f000 faa8 	bl	80038bc <memmove>
 800336c:	68a3      	ldr	r3, [r4, #8]
 800336e:	1b9b      	subs	r3, r3, r6
 8003370:	60a3      	str	r3, [r4, #8]
 8003372:	6823      	ldr	r3, [r4, #0]
 8003374:	4433      	add	r3, r6
 8003376:	6023      	str	r3, [r4, #0]
 8003378:	2000      	movs	r0, #0
 800337a:	e7db      	b.n	8003334 <__ssputs_r+0x58>
 800337c:	462a      	mov	r2, r5
 800337e:	f000 fb97 	bl	8003ab0 <_realloc_r>
 8003382:	4606      	mov	r6, r0
 8003384:	2800      	cmp	r0, #0
 8003386:	d1e1      	bne.n	800334c <__ssputs_r+0x70>
 8003388:	6921      	ldr	r1, [r4, #16]
 800338a:	4650      	mov	r0, sl
 800338c:	f000 fab0 	bl	80038f0 <_free_r>
 8003390:	e7c7      	b.n	8003322 <__ssputs_r+0x46>
	...

08003394 <_svfiprintf_r>:
 8003394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003398:	4698      	mov	r8, r3
 800339a:	898b      	ldrh	r3, [r1, #12]
 800339c:	061b      	lsls	r3, r3, #24
 800339e:	b09d      	sub	sp, #116	; 0x74
 80033a0:	4607      	mov	r7, r0
 80033a2:	460d      	mov	r5, r1
 80033a4:	4614      	mov	r4, r2
 80033a6:	d50e      	bpl.n	80033c6 <_svfiprintf_r+0x32>
 80033a8:	690b      	ldr	r3, [r1, #16]
 80033aa:	b963      	cbnz	r3, 80033c6 <_svfiprintf_r+0x32>
 80033ac:	2140      	movs	r1, #64	; 0x40
 80033ae:	f000 fb0b 	bl	80039c8 <_malloc_r>
 80033b2:	6028      	str	r0, [r5, #0]
 80033b4:	6128      	str	r0, [r5, #16]
 80033b6:	b920      	cbnz	r0, 80033c2 <_svfiprintf_r+0x2e>
 80033b8:	230c      	movs	r3, #12
 80033ba:	603b      	str	r3, [r7, #0]
 80033bc:	f04f 30ff 	mov.w	r0, #4294967295
 80033c0:	e0d1      	b.n	8003566 <_svfiprintf_r+0x1d2>
 80033c2:	2340      	movs	r3, #64	; 0x40
 80033c4:	616b      	str	r3, [r5, #20]
 80033c6:	2300      	movs	r3, #0
 80033c8:	9309      	str	r3, [sp, #36]	; 0x24
 80033ca:	2320      	movs	r3, #32
 80033cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80033d4:	2330      	movs	r3, #48	; 0x30
 80033d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003580 <_svfiprintf_r+0x1ec>
 80033da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80033de:	f04f 0901 	mov.w	r9, #1
 80033e2:	4623      	mov	r3, r4
 80033e4:	469a      	mov	sl, r3
 80033e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033ea:	b10a      	cbz	r2, 80033f0 <_svfiprintf_r+0x5c>
 80033ec:	2a25      	cmp	r2, #37	; 0x25
 80033ee:	d1f9      	bne.n	80033e4 <_svfiprintf_r+0x50>
 80033f0:	ebba 0b04 	subs.w	fp, sl, r4
 80033f4:	d00b      	beq.n	800340e <_svfiprintf_r+0x7a>
 80033f6:	465b      	mov	r3, fp
 80033f8:	4622      	mov	r2, r4
 80033fa:	4629      	mov	r1, r5
 80033fc:	4638      	mov	r0, r7
 80033fe:	f7ff ff6d 	bl	80032dc <__ssputs_r>
 8003402:	3001      	adds	r0, #1
 8003404:	f000 80aa 	beq.w	800355c <_svfiprintf_r+0x1c8>
 8003408:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800340a:	445a      	add	r2, fp
 800340c:	9209      	str	r2, [sp, #36]	; 0x24
 800340e:	f89a 3000 	ldrb.w	r3, [sl]
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 80a2 	beq.w	800355c <_svfiprintf_r+0x1c8>
 8003418:	2300      	movs	r3, #0
 800341a:	f04f 32ff 	mov.w	r2, #4294967295
 800341e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003422:	f10a 0a01 	add.w	sl, sl, #1
 8003426:	9304      	str	r3, [sp, #16]
 8003428:	9307      	str	r3, [sp, #28]
 800342a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800342e:	931a      	str	r3, [sp, #104]	; 0x68
 8003430:	4654      	mov	r4, sl
 8003432:	2205      	movs	r2, #5
 8003434:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003438:	4851      	ldr	r0, [pc, #324]	; (8003580 <_svfiprintf_r+0x1ec>)
 800343a:	f7fc fec9 	bl	80001d0 <memchr>
 800343e:	9a04      	ldr	r2, [sp, #16]
 8003440:	b9d8      	cbnz	r0, 800347a <_svfiprintf_r+0xe6>
 8003442:	06d0      	lsls	r0, r2, #27
 8003444:	bf44      	itt	mi
 8003446:	2320      	movmi	r3, #32
 8003448:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800344c:	0711      	lsls	r1, r2, #28
 800344e:	bf44      	itt	mi
 8003450:	232b      	movmi	r3, #43	; 0x2b
 8003452:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003456:	f89a 3000 	ldrb.w	r3, [sl]
 800345a:	2b2a      	cmp	r3, #42	; 0x2a
 800345c:	d015      	beq.n	800348a <_svfiprintf_r+0xf6>
 800345e:	9a07      	ldr	r2, [sp, #28]
 8003460:	4654      	mov	r4, sl
 8003462:	2000      	movs	r0, #0
 8003464:	f04f 0c0a 	mov.w	ip, #10
 8003468:	4621      	mov	r1, r4
 800346a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800346e:	3b30      	subs	r3, #48	; 0x30
 8003470:	2b09      	cmp	r3, #9
 8003472:	d94e      	bls.n	8003512 <_svfiprintf_r+0x17e>
 8003474:	b1b0      	cbz	r0, 80034a4 <_svfiprintf_r+0x110>
 8003476:	9207      	str	r2, [sp, #28]
 8003478:	e014      	b.n	80034a4 <_svfiprintf_r+0x110>
 800347a:	eba0 0308 	sub.w	r3, r0, r8
 800347e:	fa09 f303 	lsl.w	r3, r9, r3
 8003482:	4313      	orrs	r3, r2
 8003484:	9304      	str	r3, [sp, #16]
 8003486:	46a2      	mov	sl, r4
 8003488:	e7d2      	b.n	8003430 <_svfiprintf_r+0x9c>
 800348a:	9b03      	ldr	r3, [sp, #12]
 800348c:	1d19      	adds	r1, r3, #4
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	9103      	str	r1, [sp, #12]
 8003492:	2b00      	cmp	r3, #0
 8003494:	bfbb      	ittet	lt
 8003496:	425b      	neglt	r3, r3
 8003498:	f042 0202 	orrlt.w	r2, r2, #2
 800349c:	9307      	strge	r3, [sp, #28]
 800349e:	9307      	strlt	r3, [sp, #28]
 80034a0:	bfb8      	it	lt
 80034a2:	9204      	strlt	r2, [sp, #16]
 80034a4:	7823      	ldrb	r3, [r4, #0]
 80034a6:	2b2e      	cmp	r3, #46	; 0x2e
 80034a8:	d10c      	bne.n	80034c4 <_svfiprintf_r+0x130>
 80034aa:	7863      	ldrb	r3, [r4, #1]
 80034ac:	2b2a      	cmp	r3, #42	; 0x2a
 80034ae:	d135      	bne.n	800351c <_svfiprintf_r+0x188>
 80034b0:	9b03      	ldr	r3, [sp, #12]
 80034b2:	1d1a      	adds	r2, r3, #4
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	9203      	str	r2, [sp, #12]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	bfb8      	it	lt
 80034bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80034c0:	3402      	adds	r4, #2
 80034c2:	9305      	str	r3, [sp, #20]
 80034c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003590 <_svfiprintf_r+0x1fc>
 80034c8:	7821      	ldrb	r1, [r4, #0]
 80034ca:	2203      	movs	r2, #3
 80034cc:	4650      	mov	r0, sl
 80034ce:	f7fc fe7f 	bl	80001d0 <memchr>
 80034d2:	b140      	cbz	r0, 80034e6 <_svfiprintf_r+0x152>
 80034d4:	2340      	movs	r3, #64	; 0x40
 80034d6:	eba0 000a 	sub.w	r0, r0, sl
 80034da:	fa03 f000 	lsl.w	r0, r3, r0
 80034de:	9b04      	ldr	r3, [sp, #16]
 80034e0:	4303      	orrs	r3, r0
 80034e2:	3401      	adds	r4, #1
 80034e4:	9304      	str	r3, [sp, #16]
 80034e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034ea:	4826      	ldr	r0, [pc, #152]	; (8003584 <_svfiprintf_r+0x1f0>)
 80034ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034f0:	2206      	movs	r2, #6
 80034f2:	f7fc fe6d 	bl	80001d0 <memchr>
 80034f6:	2800      	cmp	r0, #0
 80034f8:	d038      	beq.n	800356c <_svfiprintf_r+0x1d8>
 80034fa:	4b23      	ldr	r3, [pc, #140]	; (8003588 <_svfiprintf_r+0x1f4>)
 80034fc:	bb1b      	cbnz	r3, 8003546 <_svfiprintf_r+0x1b2>
 80034fe:	9b03      	ldr	r3, [sp, #12]
 8003500:	3307      	adds	r3, #7
 8003502:	f023 0307 	bic.w	r3, r3, #7
 8003506:	3308      	adds	r3, #8
 8003508:	9303      	str	r3, [sp, #12]
 800350a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800350c:	4433      	add	r3, r6
 800350e:	9309      	str	r3, [sp, #36]	; 0x24
 8003510:	e767      	b.n	80033e2 <_svfiprintf_r+0x4e>
 8003512:	fb0c 3202 	mla	r2, ip, r2, r3
 8003516:	460c      	mov	r4, r1
 8003518:	2001      	movs	r0, #1
 800351a:	e7a5      	b.n	8003468 <_svfiprintf_r+0xd4>
 800351c:	2300      	movs	r3, #0
 800351e:	3401      	adds	r4, #1
 8003520:	9305      	str	r3, [sp, #20]
 8003522:	4619      	mov	r1, r3
 8003524:	f04f 0c0a 	mov.w	ip, #10
 8003528:	4620      	mov	r0, r4
 800352a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800352e:	3a30      	subs	r2, #48	; 0x30
 8003530:	2a09      	cmp	r2, #9
 8003532:	d903      	bls.n	800353c <_svfiprintf_r+0x1a8>
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0c5      	beq.n	80034c4 <_svfiprintf_r+0x130>
 8003538:	9105      	str	r1, [sp, #20]
 800353a:	e7c3      	b.n	80034c4 <_svfiprintf_r+0x130>
 800353c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003540:	4604      	mov	r4, r0
 8003542:	2301      	movs	r3, #1
 8003544:	e7f0      	b.n	8003528 <_svfiprintf_r+0x194>
 8003546:	ab03      	add	r3, sp, #12
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	462a      	mov	r2, r5
 800354c:	4b0f      	ldr	r3, [pc, #60]	; (800358c <_svfiprintf_r+0x1f8>)
 800354e:	a904      	add	r1, sp, #16
 8003550:	4638      	mov	r0, r7
 8003552:	f3af 8000 	nop.w
 8003556:	1c42      	adds	r2, r0, #1
 8003558:	4606      	mov	r6, r0
 800355a:	d1d6      	bne.n	800350a <_svfiprintf_r+0x176>
 800355c:	89ab      	ldrh	r3, [r5, #12]
 800355e:	065b      	lsls	r3, r3, #25
 8003560:	f53f af2c 	bmi.w	80033bc <_svfiprintf_r+0x28>
 8003564:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003566:	b01d      	add	sp, #116	; 0x74
 8003568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800356c:	ab03      	add	r3, sp, #12
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	462a      	mov	r2, r5
 8003572:	4b06      	ldr	r3, [pc, #24]	; (800358c <_svfiprintf_r+0x1f8>)
 8003574:	a904      	add	r1, sp, #16
 8003576:	4638      	mov	r0, r7
 8003578:	f000 f87a 	bl	8003670 <_printf_i>
 800357c:	e7eb      	b.n	8003556 <_svfiprintf_r+0x1c2>
 800357e:	bf00      	nop
 8003580:	08003bdd 	.word	0x08003bdd
 8003584:	08003be7 	.word	0x08003be7
 8003588:	00000000 	.word	0x00000000
 800358c:	080032dd 	.word	0x080032dd
 8003590:	08003be3 	.word	0x08003be3

08003594 <_printf_common>:
 8003594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003598:	4616      	mov	r6, r2
 800359a:	4699      	mov	r9, r3
 800359c:	688a      	ldr	r2, [r1, #8]
 800359e:	690b      	ldr	r3, [r1, #16]
 80035a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035a4:	4293      	cmp	r3, r2
 80035a6:	bfb8      	it	lt
 80035a8:	4613      	movlt	r3, r2
 80035aa:	6033      	str	r3, [r6, #0]
 80035ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035b0:	4607      	mov	r7, r0
 80035b2:	460c      	mov	r4, r1
 80035b4:	b10a      	cbz	r2, 80035ba <_printf_common+0x26>
 80035b6:	3301      	adds	r3, #1
 80035b8:	6033      	str	r3, [r6, #0]
 80035ba:	6823      	ldr	r3, [r4, #0]
 80035bc:	0699      	lsls	r1, r3, #26
 80035be:	bf42      	ittt	mi
 80035c0:	6833      	ldrmi	r3, [r6, #0]
 80035c2:	3302      	addmi	r3, #2
 80035c4:	6033      	strmi	r3, [r6, #0]
 80035c6:	6825      	ldr	r5, [r4, #0]
 80035c8:	f015 0506 	ands.w	r5, r5, #6
 80035cc:	d106      	bne.n	80035dc <_printf_common+0x48>
 80035ce:	f104 0a19 	add.w	sl, r4, #25
 80035d2:	68e3      	ldr	r3, [r4, #12]
 80035d4:	6832      	ldr	r2, [r6, #0]
 80035d6:	1a9b      	subs	r3, r3, r2
 80035d8:	42ab      	cmp	r3, r5
 80035da:	dc26      	bgt.n	800362a <_printf_common+0x96>
 80035dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035e0:	1e13      	subs	r3, r2, #0
 80035e2:	6822      	ldr	r2, [r4, #0]
 80035e4:	bf18      	it	ne
 80035e6:	2301      	movne	r3, #1
 80035e8:	0692      	lsls	r2, r2, #26
 80035ea:	d42b      	bmi.n	8003644 <_printf_common+0xb0>
 80035ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035f0:	4649      	mov	r1, r9
 80035f2:	4638      	mov	r0, r7
 80035f4:	47c0      	blx	r8
 80035f6:	3001      	adds	r0, #1
 80035f8:	d01e      	beq.n	8003638 <_printf_common+0xa4>
 80035fa:	6823      	ldr	r3, [r4, #0]
 80035fc:	68e5      	ldr	r5, [r4, #12]
 80035fe:	6832      	ldr	r2, [r6, #0]
 8003600:	f003 0306 	and.w	r3, r3, #6
 8003604:	2b04      	cmp	r3, #4
 8003606:	bf08      	it	eq
 8003608:	1aad      	subeq	r5, r5, r2
 800360a:	68a3      	ldr	r3, [r4, #8]
 800360c:	6922      	ldr	r2, [r4, #16]
 800360e:	bf0c      	ite	eq
 8003610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003614:	2500      	movne	r5, #0
 8003616:	4293      	cmp	r3, r2
 8003618:	bfc4      	itt	gt
 800361a:	1a9b      	subgt	r3, r3, r2
 800361c:	18ed      	addgt	r5, r5, r3
 800361e:	2600      	movs	r6, #0
 8003620:	341a      	adds	r4, #26
 8003622:	42b5      	cmp	r5, r6
 8003624:	d11a      	bne.n	800365c <_printf_common+0xc8>
 8003626:	2000      	movs	r0, #0
 8003628:	e008      	b.n	800363c <_printf_common+0xa8>
 800362a:	2301      	movs	r3, #1
 800362c:	4652      	mov	r2, sl
 800362e:	4649      	mov	r1, r9
 8003630:	4638      	mov	r0, r7
 8003632:	47c0      	blx	r8
 8003634:	3001      	adds	r0, #1
 8003636:	d103      	bne.n	8003640 <_printf_common+0xac>
 8003638:	f04f 30ff 	mov.w	r0, #4294967295
 800363c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003640:	3501      	adds	r5, #1
 8003642:	e7c6      	b.n	80035d2 <_printf_common+0x3e>
 8003644:	18e1      	adds	r1, r4, r3
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	2030      	movs	r0, #48	; 0x30
 800364a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800364e:	4422      	add	r2, r4
 8003650:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003654:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003658:	3302      	adds	r3, #2
 800365a:	e7c7      	b.n	80035ec <_printf_common+0x58>
 800365c:	2301      	movs	r3, #1
 800365e:	4622      	mov	r2, r4
 8003660:	4649      	mov	r1, r9
 8003662:	4638      	mov	r0, r7
 8003664:	47c0      	blx	r8
 8003666:	3001      	adds	r0, #1
 8003668:	d0e6      	beq.n	8003638 <_printf_common+0xa4>
 800366a:	3601      	adds	r6, #1
 800366c:	e7d9      	b.n	8003622 <_printf_common+0x8e>
	...

08003670 <_printf_i>:
 8003670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003674:	7e0f      	ldrb	r7, [r1, #24]
 8003676:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003678:	2f78      	cmp	r7, #120	; 0x78
 800367a:	4691      	mov	r9, r2
 800367c:	4680      	mov	r8, r0
 800367e:	460c      	mov	r4, r1
 8003680:	469a      	mov	sl, r3
 8003682:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003686:	d807      	bhi.n	8003698 <_printf_i+0x28>
 8003688:	2f62      	cmp	r7, #98	; 0x62
 800368a:	d80a      	bhi.n	80036a2 <_printf_i+0x32>
 800368c:	2f00      	cmp	r7, #0
 800368e:	f000 80d8 	beq.w	8003842 <_printf_i+0x1d2>
 8003692:	2f58      	cmp	r7, #88	; 0x58
 8003694:	f000 80a3 	beq.w	80037de <_printf_i+0x16e>
 8003698:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800369c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036a0:	e03a      	b.n	8003718 <_printf_i+0xa8>
 80036a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80036a6:	2b15      	cmp	r3, #21
 80036a8:	d8f6      	bhi.n	8003698 <_printf_i+0x28>
 80036aa:	a101      	add	r1, pc, #4	; (adr r1, 80036b0 <_printf_i+0x40>)
 80036ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80036b0:	08003709 	.word	0x08003709
 80036b4:	0800371d 	.word	0x0800371d
 80036b8:	08003699 	.word	0x08003699
 80036bc:	08003699 	.word	0x08003699
 80036c0:	08003699 	.word	0x08003699
 80036c4:	08003699 	.word	0x08003699
 80036c8:	0800371d 	.word	0x0800371d
 80036cc:	08003699 	.word	0x08003699
 80036d0:	08003699 	.word	0x08003699
 80036d4:	08003699 	.word	0x08003699
 80036d8:	08003699 	.word	0x08003699
 80036dc:	08003829 	.word	0x08003829
 80036e0:	0800374d 	.word	0x0800374d
 80036e4:	0800380b 	.word	0x0800380b
 80036e8:	08003699 	.word	0x08003699
 80036ec:	08003699 	.word	0x08003699
 80036f0:	0800384b 	.word	0x0800384b
 80036f4:	08003699 	.word	0x08003699
 80036f8:	0800374d 	.word	0x0800374d
 80036fc:	08003699 	.word	0x08003699
 8003700:	08003699 	.word	0x08003699
 8003704:	08003813 	.word	0x08003813
 8003708:	682b      	ldr	r3, [r5, #0]
 800370a:	1d1a      	adds	r2, r3, #4
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	602a      	str	r2, [r5, #0]
 8003710:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003714:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003718:	2301      	movs	r3, #1
 800371a:	e0a3      	b.n	8003864 <_printf_i+0x1f4>
 800371c:	6820      	ldr	r0, [r4, #0]
 800371e:	6829      	ldr	r1, [r5, #0]
 8003720:	0606      	lsls	r6, r0, #24
 8003722:	f101 0304 	add.w	r3, r1, #4
 8003726:	d50a      	bpl.n	800373e <_printf_i+0xce>
 8003728:	680e      	ldr	r6, [r1, #0]
 800372a:	602b      	str	r3, [r5, #0]
 800372c:	2e00      	cmp	r6, #0
 800372e:	da03      	bge.n	8003738 <_printf_i+0xc8>
 8003730:	232d      	movs	r3, #45	; 0x2d
 8003732:	4276      	negs	r6, r6
 8003734:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003738:	485e      	ldr	r0, [pc, #376]	; (80038b4 <_printf_i+0x244>)
 800373a:	230a      	movs	r3, #10
 800373c:	e019      	b.n	8003772 <_printf_i+0x102>
 800373e:	680e      	ldr	r6, [r1, #0]
 8003740:	602b      	str	r3, [r5, #0]
 8003742:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003746:	bf18      	it	ne
 8003748:	b236      	sxthne	r6, r6
 800374a:	e7ef      	b.n	800372c <_printf_i+0xbc>
 800374c:	682b      	ldr	r3, [r5, #0]
 800374e:	6820      	ldr	r0, [r4, #0]
 8003750:	1d19      	adds	r1, r3, #4
 8003752:	6029      	str	r1, [r5, #0]
 8003754:	0601      	lsls	r1, r0, #24
 8003756:	d501      	bpl.n	800375c <_printf_i+0xec>
 8003758:	681e      	ldr	r6, [r3, #0]
 800375a:	e002      	b.n	8003762 <_printf_i+0xf2>
 800375c:	0646      	lsls	r6, r0, #25
 800375e:	d5fb      	bpl.n	8003758 <_printf_i+0xe8>
 8003760:	881e      	ldrh	r6, [r3, #0]
 8003762:	4854      	ldr	r0, [pc, #336]	; (80038b4 <_printf_i+0x244>)
 8003764:	2f6f      	cmp	r7, #111	; 0x6f
 8003766:	bf0c      	ite	eq
 8003768:	2308      	moveq	r3, #8
 800376a:	230a      	movne	r3, #10
 800376c:	2100      	movs	r1, #0
 800376e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003772:	6865      	ldr	r5, [r4, #4]
 8003774:	60a5      	str	r5, [r4, #8]
 8003776:	2d00      	cmp	r5, #0
 8003778:	bfa2      	ittt	ge
 800377a:	6821      	ldrge	r1, [r4, #0]
 800377c:	f021 0104 	bicge.w	r1, r1, #4
 8003780:	6021      	strge	r1, [r4, #0]
 8003782:	b90e      	cbnz	r6, 8003788 <_printf_i+0x118>
 8003784:	2d00      	cmp	r5, #0
 8003786:	d04d      	beq.n	8003824 <_printf_i+0x1b4>
 8003788:	4615      	mov	r5, r2
 800378a:	fbb6 f1f3 	udiv	r1, r6, r3
 800378e:	fb03 6711 	mls	r7, r3, r1, r6
 8003792:	5dc7      	ldrb	r7, [r0, r7]
 8003794:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003798:	4637      	mov	r7, r6
 800379a:	42bb      	cmp	r3, r7
 800379c:	460e      	mov	r6, r1
 800379e:	d9f4      	bls.n	800378a <_printf_i+0x11a>
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d10b      	bne.n	80037bc <_printf_i+0x14c>
 80037a4:	6823      	ldr	r3, [r4, #0]
 80037a6:	07de      	lsls	r6, r3, #31
 80037a8:	d508      	bpl.n	80037bc <_printf_i+0x14c>
 80037aa:	6923      	ldr	r3, [r4, #16]
 80037ac:	6861      	ldr	r1, [r4, #4]
 80037ae:	4299      	cmp	r1, r3
 80037b0:	bfde      	ittt	le
 80037b2:	2330      	movle	r3, #48	; 0x30
 80037b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80037b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80037bc:	1b52      	subs	r2, r2, r5
 80037be:	6122      	str	r2, [r4, #16]
 80037c0:	f8cd a000 	str.w	sl, [sp]
 80037c4:	464b      	mov	r3, r9
 80037c6:	aa03      	add	r2, sp, #12
 80037c8:	4621      	mov	r1, r4
 80037ca:	4640      	mov	r0, r8
 80037cc:	f7ff fee2 	bl	8003594 <_printf_common>
 80037d0:	3001      	adds	r0, #1
 80037d2:	d14c      	bne.n	800386e <_printf_i+0x1fe>
 80037d4:	f04f 30ff 	mov.w	r0, #4294967295
 80037d8:	b004      	add	sp, #16
 80037da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037de:	4835      	ldr	r0, [pc, #212]	; (80038b4 <_printf_i+0x244>)
 80037e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80037e4:	6829      	ldr	r1, [r5, #0]
 80037e6:	6823      	ldr	r3, [r4, #0]
 80037e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80037ec:	6029      	str	r1, [r5, #0]
 80037ee:	061d      	lsls	r5, r3, #24
 80037f0:	d514      	bpl.n	800381c <_printf_i+0x1ac>
 80037f2:	07df      	lsls	r7, r3, #31
 80037f4:	bf44      	itt	mi
 80037f6:	f043 0320 	orrmi.w	r3, r3, #32
 80037fa:	6023      	strmi	r3, [r4, #0]
 80037fc:	b91e      	cbnz	r6, 8003806 <_printf_i+0x196>
 80037fe:	6823      	ldr	r3, [r4, #0]
 8003800:	f023 0320 	bic.w	r3, r3, #32
 8003804:	6023      	str	r3, [r4, #0]
 8003806:	2310      	movs	r3, #16
 8003808:	e7b0      	b.n	800376c <_printf_i+0xfc>
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	f043 0320 	orr.w	r3, r3, #32
 8003810:	6023      	str	r3, [r4, #0]
 8003812:	2378      	movs	r3, #120	; 0x78
 8003814:	4828      	ldr	r0, [pc, #160]	; (80038b8 <_printf_i+0x248>)
 8003816:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800381a:	e7e3      	b.n	80037e4 <_printf_i+0x174>
 800381c:	0659      	lsls	r1, r3, #25
 800381e:	bf48      	it	mi
 8003820:	b2b6      	uxthmi	r6, r6
 8003822:	e7e6      	b.n	80037f2 <_printf_i+0x182>
 8003824:	4615      	mov	r5, r2
 8003826:	e7bb      	b.n	80037a0 <_printf_i+0x130>
 8003828:	682b      	ldr	r3, [r5, #0]
 800382a:	6826      	ldr	r6, [r4, #0]
 800382c:	6961      	ldr	r1, [r4, #20]
 800382e:	1d18      	adds	r0, r3, #4
 8003830:	6028      	str	r0, [r5, #0]
 8003832:	0635      	lsls	r5, r6, #24
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	d501      	bpl.n	800383c <_printf_i+0x1cc>
 8003838:	6019      	str	r1, [r3, #0]
 800383a:	e002      	b.n	8003842 <_printf_i+0x1d2>
 800383c:	0670      	lsls	r0, r6, #25
 800383e:	d5fb      	bpl.n	8003838 <_printf_i+0x1c8>
 8003840:	8019      	strh	r1, [r3, #0]
 8003842:	2300      	movs	r3, #0
 8003844:	6123      	str	r3, [r4, #16]
 8003846:	4615      	mov	r5, r2
 8003848:	e7ba      	b.n	80037c0 <_printf_i+0x150>
 800384a:	682b      	ldr	r3, [r5, #0]
 800384c:	1d1a      	adds	r2, r3, #4
 800384e:	602a      	str	r2, [r5, #0]
 8003850:	681d      	ldr	r5, [r3, #0]
 8003852:	6862      	ldr	r2, [r4, #4]
 8003854:	2100      	movs	r1, #0
 8003856:	4628      	mov	r0, r5
 8003858:	f7fc fcba 	bl	80001d0 <memchr>
 800385c:	b108      	cbz	r0, 8003862 <_printf_i+0x1f2>
 800385e:	1b40      	subs	r0, r0, r5
 8003860:	6060      	str	r0, [r4, #4]
 8003862:	6863      	ldr	r3, [r4, #4]
 8003864:	6123      	str	r3, [r4, #16]
 8003866:	2300      	movs	r3, #0
 8003868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800386c:	e7a8      	b.n	80037c0 <_printf_i+0x150>
 800386e:	6923      	ldr	r3, [r4, #16]
 8003870:	462a      	mov	r2, r5
 8003872:	4649      	mov	r1, r9
 8003874:	4640      	mov	r0, r8
 8003876:	47d0      	blx	sl
 8003878:	3001      	adds	r0, #1
 800387a:	d0ab      	beq.n	80037d4 <_printf_i+0x164>
 800387c:	6823      	ldr	r3, [r4, #0]
 800387e:	079b      	lsls	r3, r3, #30
 8003880:	d413      	bmi.n	80038aa <_printf_i+0x23a>
 8003882:	68e0      	ldr	r0, [r4, #12]
 8003884:	9b03      	ldr	r3, [sp, #12]
 8003886:	4298      	cmp	r0, r3
 8003888:	bfb8      	it	lt
 800388a:	4618      	movlt	r0, r3
 800388c:	e7a4      	b.n	80037d8 <_printf_i+0x168>
 800388e:	2301      	movs	r3, #1
 8003890:	4632      	mov	r2, r6
 8003892:	4649      	mov	r1, r9
 8003894:	4640      	mov	r0, r8
 8003896:	47d0      	blx	sl
 8003898:	3001      	adds	r0, #1
 800389a:	d09b      	beq.n	80037d4 <_printf_i+0x164>
 800389c:	3501      	adds	r5, #1
 800389e:	68e3      	ldr	r3, [r4, #12]
 80038a0:	9903      	ldr	r1, [sp, #12]
 80038a2:	1a5b      	subs	r3, r3, r1
 80038a4:	42ab      	cmp	r3, r5
 80038a6:	dcf2      	bgt.n	800388e <_printf_i+0x21e>
 80038a8:	e7eb      	b.n	8003882 <_printf_i+0x212>
 80038aa:	2500      	movs	r5, #0
 80038ac:	f104 0619 	add.w	r6, r4, #25
 80038b0:	e7f5      	b.n	800389e <_printf_i+0x22e>
 80038b2:	bf00      	nop
 80038b4:	08003bee 	.word	0x08003bee
 80038b8:	08003bff 	.word	0x08003bff

080038bc <memmove>:
 80038bc:	4288      	cmp	r0, r1
 80038be:	b510      	push	{r4, lr}
 80038c0:	eb01 0402 	add.w	r4, r1, r2
 80038c4:	d902      	bls.n	80038cc <memmove+0x10>
 80038c6:	4284      	cmp	r4, r0
 80038c8:	4623      	mov	r3, r4
 80038ca:	d807      	bhi.n	80038dc <memmove+0x20>
 80038cc:	1e43      	subs	r3, r0, #1
 80038ce:	42a1      	cmp	r1, r4
 80038d0:	d008      	beq.n	80038e4 <memmove+0x28>
 80038d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80038da:	e7f8      	b.n	80038ce <memmove+0x12>
 80038dc:	4402      	add	r2, r0
 80038de:	4601      	mov	r1, r0
 80038e0:	428a      	cmp	r2, r1
 80038e2:	d100      	bne.n	80038e6 <memmove+0x2a>
 80038e4:	bd10      	pop	{r4, pc}
 80038e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80038ee:	e7f7      	b.n	80038e0 <memmove+0x24>

080038f0 <_free_r>:
 80038f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038f2:	2900      	cmp	r1, #0
 80038f4:	d044      	beq.n	8003980 <_free_r+0x90>
 80038f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038fa:	9001      	str	r0, [sp, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f1a1 0404 	sub.w	r4, r1, #4
 8003902:	bfb8      	it	lt
 8003904:	18e4      	addlt	r4, r4, r3
 8003906:	f000 f913 	bl	8003b30 <__malloc_lock>
 800390a:	4a1e      	ldr	r2, [pc, #120]	; (8003984 <_free_r+0x94>)
 800390c:	9801      	ldr	r0, [sp, #4]
 800390e:	6813      	ldr	r3, [r2, #0]
 8003910:	b933      	cbnz	r3, 8003920 <_free_r+0x30>
 8003912:	6063      	str	r3, [r4, #4]
 8003914:	6014      	str	r4, [r2, #0]
 8003916:	b003      	add	sp, #12
 8003918:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800391c:	f000 b90e 	b.w	8003b3c <__malloc_unlock>
 8003920:	42a3      	cmp	r3, r4
 8003922:	d908      	bls.n	8003936 <_free_r+0x46>
 8003924:	6825      	ldr	r5, [r4, #0]
 8003926:	1961      	adds	r1, r4, r5
 8003928:	428b      	cmp	r3, r1
 800392a:	bf01      	itttt	eq
 800392c:	6819      	ldreq	r1, [r3, #0]
 800392e:	685b      	ldreq	r3, [r3, #4]
 8003930:	1949      	addeq	r1, r1, r5
 8003932:	6021      	streq	r1, [r4, #0]
 8003934:	e7ed      	b.n	8003912 <_free_r+0x22>
 8003936:	461a      	mov	r2, r3
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	b10b      	cbz	r3, 8003940 <_free_r+0x50>
 800393c:	42a3      	cmp	r3, r4
 800393e:	d9fa      	bls.n	8003936 <_free_r+0x46>
 8003940:	6811      	ldr	r1, [r2, #0]
 8003942:	1855      	adds	r5, r2, r1
 8003944:	42a5      	cmp	r5, r4
 8003946:	d10b      	bne.n	8003960 <_free_r+0x70>
 8003948:	6824      	ldr	r4, [r4, #0]
 800394a:	4421      	add	r1, r4
 800394c:	1854      	adds	r4, r2, r1
 800394e:	42a3      	cmp	r3, r4
 8003950:	6011      	str	r1, [r2, #0]
 8003952:	d1e0      	bne.n	8003916 <_free_r+0x26>
 8003954:	681c      	ldr	r4, [r3, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	6053      	str	r3, [r2, #4]
 800395a:	4421      	add	r1, r4
 800395c:	6011      	str	r1, [r2, #0]
 800395e:	e7da      	b.n	8003916 <_free_r+0x26>
 8003960:	d902      	bls.n	8003968 <_free_r+0x78>
 8003962:	230c      	movs	r3, #12
 8003964:	6003      	str	r3, [r0, #0]
 8003966:	e7d6      	b.n	8003916 <_free_r+0x26>
 8003968:	6825      	ldr	r5, [r4, #0]
 800396a:	1961      	adds	r1, r4, r5
 800396c:	428b      	cmp	r3, r1
 800396e:	bf04      	itt	eq
 8003970:	6819      	ldreq	r1, [r3, #0]
 8003972:	685b      	ldreq	r3, [r3, #4]
 8003974:	6063      	str	r3, [r4, #4]
 8003976:	bf04      	itt	eq
 8003978:	1949      	addeq	r1, r1, r5
 800397a:	6021      	streq	r1, [r4, #0]
 800397c:	6054      	str	r4, [r2, #4]
 800397e:	e7ca      	b.n	8003916 <_free_r+0x26>
 8003980:	b003      	add	sp, #12
 8003982:	bd30      	pop	{r4, r5, pc}
 8003984:	20004a24 	.word	0x20004a24

08003988 <sbrk_aligned>:
 8003988:	b570      	push	{r4, r5, r6, lr}
 800398a:	4e0e      	ldr	r6, [pc, #56]	; (80039c4 <sbrk_aligned+0x3c>)
 800398c:	460c      	mov	r4, r1
 800398e:	6831      	ldr	r1, [r6, #0]
 8003990:	4605      	mov	r5, r0
 8003992:	b911      	cbnz	r1, 800399a <sbrk_aligned+0x12>
 8003994:	f000 f8bc 	bl	8003b10 <_sbrk_r>
 8003998:	6030      	str	r0, [r6, #0]
 800399a:	4621      	mov	r1, r4
 800399c:	4628      	mov	r0, r5
 800399e:	f000 f8b7 	bl	8003b10 <_sbrk_r>
 80039a2:	1c43      	adds	r3, r0, #1
 80039a4:	d00a      	beq.n	80039bc <sbrk_aligned+0x34>
 80039a6:	1cc4      	adds	r4, r0, #3
 80039a8:	f024 0403 	bic.w	r4, r4, #3
 80039ac:	42a0      	cmp	r0, r4
 80039ae:	d007      	beq.n	80039c0 <sbrk_aligned+0x38>
 80039b0:	1a21      	subs	r1, r4, r0
 80039b2:	4628      	mov	r0, r5
 80039b4:	f000 f8ac 	bl	8003b10 <_sbrk_r>
 80039b8:	3001      	adds	r0, #1
 80039ba:	d101      	bne.n	80039c0 <sbrk_aligned+0x38>
 80039bc:	f04f 34ff 	mov.w	r4, #4294967295
 80039c0:	4620      	mov	r0, r4
 80039c2:	bd70      	pop	{r4, r5, r6, pc}
 80039c4:	20004a28 	.word	0x20004a28

080039c8 <_malloc_r>:
 80039c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039cc:	1ccd      	adds	r5, r1, #3
 80039ce:	f025 0503 	bic.w	r5, r5, #3
 80039d2:	3508      	adds	r5, #8
 80039d4:	2d0c      	cmp	r5, #12
 80039d6:	bf38      	it	cc
 80039d8:	250c      	movcc	r5, #12
 80039da:	2d00      	cmp	r5, #0
 80039dc:	4607      	mov	r7, r0
 80039de:	db01      	blt.n	80039e4 <_malloc_r+0x1c>
 80039e0:	42a9      	cmp	r1, r5
 80039e2:	d905      	bls.n	80039f0 <_malloc_r+0x28>
 80039e4:	230c      	movs	r3, #12
 80039e6:	603b      	str	r3, [r7, #0]
 80039e8:	2600      	movs	r6, #0
 80039ea:	4630      	mov	r0, r6
 80039ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039f0:	4e2e      	ldr	r6, [pc, #184]	; (8003aac <_malloc_r+0xe4>)
 80039f2:	f000 f89d 	bl	8003b30 <__malloc_lock>
 80039f6:	6833      	ldr	r3, [r6, #0]
 80039f8:	461c      	mov	r4, r3
 80039fa:	bb34      	cbnz	r4, 8003a4a <_malloc_r+0x82>
 80039fc:	4629      	mov	r1, r5
 80039fe:	4638      	mov	r0, r7
 8003a00:	f7ff ffc2 	bl	8003988 <sbrk_aligned>
 8003a04:	1c43      	adds	r3, r0, #1
 8003a06:	4604      	mov	r4, r0
 8003a08:	d14d      	bne.n	8003aa6 <_malloc_r+0xde>
 8003a0a:	6834      	ldr	r4, [r6, #0]
 8003a0c:	4626      	mov	r6, r4
 8003a0e:	2e00      	cmp	r6, #0
 8003a10:	d140      	bne.n	8003a94 <_malloc_r+0xcc>
 8003a12:	6823      	ldr	r3, [r4, #0]
 8003a14:	4631      	mov	r1, r6
 8003a16:	4638      	mov	r0, r7
 8003a18:	eb04 0803 	add.w	r8, r4, r3
 8003a1c:	f000 f878 	bl	8003b10 <_sbrk_r>
 8003a20:	4580      	cmp	r8, r0
 8003a22:	d13a      	bne.n	8003a9a <_malloc_r+0xd2>
 8003a24:	6821      	ldr	r1, [r4, #0]
 8003a26:	3503      	adds	r5, #3
 8003a28:	1a6d      	subs	r5, r5, r1
 8003a2a:	f025 0503 	bic.w	r5, r5, #3
 8003a2e:	3508      	adds	r5, #8
 8003a30:	2d0c      	cmp	r5, #12
 8003a32:	bf38      	it	cc
 8003a34:	250c      	movcc	r5, #12
 8003a36:	4629      	mov	r1, r5
 8003a38:	4638      	mov	r0, r7
 8003a3a:	f7ff ffa5 	bl	8003988 <sbrk_aligned>
 8003a3e:	3001      	adds	r0, #1
 8003a40:	d02b      	beq.n	8003a9a <_malloc_r+0xd2>
 8003a42:	6823      	ldr	r3, [r4, #0]
 8003a44:	442b      	add	r3, r5
 8003a46:	6023      	str	r3, [r4, #0]
 8003a48:	e00e      	b.n	8003a68 <_malloc_r+0xa0>
 8003a4a:	6822      	ldr	r2, [r4, #0]
 8003a4c:	1b52      	subs	r2, r2, r5
 8003a4e:	d41e      	bmi.n	8003a8e <_malloc_r+0xc6>
 8003a50:	2a0b      	cmp	r2, #11
 8003a52:	d916      	bls.n	8003a82 <_malloc_r+0xba>
 8003a54:	1961      	adds	r1, r4, r5
 8003a56:	42a3      	cmp	r3, r4
 8003a58:	6025      	str	r5, [r4, #0]
 8003a5a:	bf18      	it	ne
 8003a5c:	6059      	strne	r1, [r3, #4]
 8003a5e:	6863      	ldr	r3, [r4, #4]
 8003a60:	bf08      	it	eq
 8003a62:	6031      	streq	r1, [r6, #0]
 8003a64:	5162      	str	r2, [r4, r5]
 8003a66:	604b      	str	r3, [r1, #4]
 8003a68:	4638      	mov	r0, r7
 8003a6a:	f104 060b 	add.w	r6, r4, #11
 8003a6e:	f000 f865 	bl	8003b3c <__malloc_unlock>
 8003a72:	f026 0607 	bic.w	r6, r6, #7
 8003a76:	1d23      	adds	r3, r4, #4
 8003a78:	1af2      	subs	r2, r6, r3
 8003a7a:	d0b6      	beq.n	80039ea <_malloc_r+0x22>
 8003a7c:	1b9b      	subs	r3, r3, r6
 8003a7e:	50a3      	str	r3, [r4, r2]
 8003a80:	e7b3      	b.n	80039ea <_malloc_r+0x22>
 8003a82:	6862      	ldr	r2, [r4, #4]
 8003a84:	42a3      	cmp	r3, r4
 8003a86:	bf0c      	ite	eq
 8003a88:	6032      	streq	r2, [r6, #0]
 8003a8a:	605a      	strne	r2, [r3, #4]
 8003a8c:	e7ec      	b.n	8003a68 <_malloc_r+0xa0>
 8003a8e:	4623      	mov	r3, r4
 8003a90:	6864      	ldr	r4, [r4, #4]
 8003a92:	e7b2      	b.n	80039fa <_malloc_r+0x32>
 8003a94:	4634      	mov	r4, r6
 8003a96:	6876      	ldr	r6, [r6, #4]
 8003a98:	e7b9      	b.n	8003a0e <_malloc_r+0x46>
 8003a9a:	230c      	movs	r3, #12
 8003a9c:	603b      	str	r3, [r7, #0]
 8003a9e:	4638      	mov	r0, r7
 8003aa0:	f000 f84c 	bl	8003b3c <__malloc_unlock>
 8003aa4:	e7a1      	b.n	80039ea <_malloc_r+0x22>
 8003aa6:	6025      	str	r5, [r4, #0]
 8003aa8:	e7de      	b.n	8003a68 <_malloc_r+0xa0>
 8003aaa:	bf00      	nop
 8003aac:	20004a24 	.word	0x20004a24

08003ab0 <_realloc_r>:
 8003ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ab4:	4680      	mov	r8, r0
 8003ab6:	4614      	mov	r4, r2
 8003ab8:	460e      	mov	r6, r1
 8003aba:	b921      	cbnz	r1, 8003ac6 <_realloc_r+0x16>
 8003abc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ac0:	4611      	mov	r1, r2
 8003ac2:	f7ff bf81 	b.w	80039c8 <_malloc_r>
 8003ac6:	b92a      	cbnz	r2, 8003ad4 <_realloc_r+0x24>
 8003ac8:	f7ff ff12 	bl	80038f0 <_free_r>
 8003acc:	4625      	mov	r5, r4
 8003ace:	4628      	mov	r0, r5
 8003ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ad4:	f000 f838 	bl	8003b48 <_malloc_usable_size_r>
 8003ad8:	4284      	cmp	r4, r0
 8003ada:	4607      	mov	r7, r0
 8003adc:	d802      	bhi.n	8003ae4 <_realloc_r+0x34>
 8003ade:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003ae2:	d812      	bhi.n	8003b0a <_realloc_r+0x5a>
 8003ae4:	4621      	mov	r1, r4
 8003ae6:	4640      	mov	r0, r8
 8003ae8:	f7ff ff6e 	bl	80039c8 <_malloc_r>
 8003aec:	4605      	mov	r5, r0
 8003aee:	2800      	cmp	r0, #0
 8003af0:	d0ed      	beq.n	8003ace <_realloc_r+0x1e>
 8003af2:	42bc      	cmp	r4, r7
 8003af4:	4622      	mov	r2, r4
 8003af6:	4631      	mov	r1, r6
 8003af8:	bf28      	it	cs
 8003afa:	463a      	movcs	r2, r7
 8003afc:	f7ff fbb8 	bl	8003270 <memcpy>
 8003b00:	4631      	mov	r1, r6
 8003b02:	4640      	mov	r0, r8
 8003b04:	f7ff fef4 	bl	80038f0 <_free_r>
 8003b08:	e7e1      	b.n	8003ace <_realloc_r+0x1e>
 8003b0a:	4635      	mov	r5, r6
 8003b0c:	e7df      	b.n	8003ace <_realloc_r+0x1e>
	...

08003b10 <_sbrk_r>:
 8003b10:	b538      	push	{r3, r4, r5, lr}
 8003b12:	4d06      	ldr	r5, [pc, #24]	; (8003b2c <_sbrk_r+0x1c>)
 8003b14:	2300      	movs	r3, #0
 8003b16:	4604      	mov	r4, r0
 8003b18:	4608      	mov	r0, r1
 8003b1a:	602b      	str	r3, [r5, #0]
 8003b1c:	f7fc fc7c 	bl	8000418 <_sbrk>
 8003b20:	1c43      	adds	r3, r0, #1
 8003b22:	d102      	bne.n	8003b2a <_sbrk_r+0x1a>
 8003b24:	682b      	ldr	r3, [r5, #0]
 8003b26:	b103      	cbz	r3, 8003b2a <_sbrk_r+0x1a>
 8003b28:	6023      	str	r3, [r4, #0]
 8003b2a:	bd38      	pop	{r3, r4, r5, pc}
 8003b2c:	20004a2c 	.word	0x20004a2c

08003b30 <__malloc_lock>:
 8003b30:	4801      	ldr	r0, [pc, #4]	; (8003b38 <__malloc_lock+0x8>)
 8003b32:	f000 b811 	b.w	8003b58 <__retarget_lock_acquire_recursive>
 8003b36:	bf00      	nop
 8003b38:	20004a30 	.word	0x20004a30

08003b3c <__malloc_unlock>:
 8003b3c:	4801      	ldr	r0, [pc, #4]	; (8003b44 <__malloc_unlock+0x8>)
 8003b3e:	f000 b80c 	b.w	8003b5a <__retarget_lock_release_recursive>
 8003b42:	bf00      	nop
 8003b44:	20004a30 	.word	0x20004a30

08003b48 <_malloc_usable_size_r>:
 8003b48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b4c:	1f18      	subs	r0, r3, #4
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	bfbc      	itt	lt
 8003b52:	580b      	ldrlt	r3, [r1, r0]
 8003b54:	18c0      	addlt	r0, r0, r3
 8003b56:	4770      	bx	lr

08003b58 <__retarget_lock_acquire_recursive>:
 8003b58:	4770      	bx	lr

08003b5a <__retarget_lock_release_recursive>:
 8003b5a:	4770      	bx	lr

08003b5c <_init>:
 8003b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5e:	bf00      	nop
 8003b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b62:	bc08      	pop	{r3}
 8003b64:	469e      	mov	lr, r3
 8003b66:	4770      	bx	lr

08003b68 <_fini>:
 8003b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b6a:	bf00      	nop
 8003b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b6e:	bc08      	pop	{r3}
 8003b70:	469e      	mov	lr, r3
 8003b72:	4770      	bx	lr
